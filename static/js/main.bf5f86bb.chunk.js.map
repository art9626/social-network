{"version":3,"sources":["api/profileApi.ts","redux/profilePageReducer.ts","redux/usersPageReducer.ts","api/usersApi.ts","redux/dialogsPageReducer.ts","components/common/Error/Error.module.css","api/indexApi.ts","api/authApi.ts","reportWebVitals.js","redux/appReducer.ts","redux/reduxStore.ts","components/common/Error/Error.tsx","components/common/ColorTheme.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/common/Private.tsx","redux/appSelectors.ts","App.tsx","index.js","utils/errors/errors.ts","redux/authSelecrors.ts","api/securityApi.ts","redux/authReducer.ts"],"names":["profileAPI","id","instance","get","then","res","editDataContacts","data","status","put","photo","formData","FormData","append","headers","aboutMe","contacts","lookingForAJobDescription","Object","keys","map","item","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","SET_PHOTO","TOGGLE_IN_WAITING","SET_ERROR","TOGGLE_EDIT_MODE","actions","addPost","text","type","setUserProfile","userData","setUserStatus","setPhoto","photos","toggleInWaiting","inWaiting","setError","errorText","errorName","toggleEditMode","state","fieldName","getProfileThunk","dispatch","a","response","getStatusThunk","setStatusThunk","resultCode","ResultCodesEnum","Success","ProfileStatusSaveError","messages","setPhotoThunk","getState","profilePage","errorMessages","onSetPhotoErrorMessage","ProfilePhotoSaveError","message","setProfileDataThunk","auth","ProfileDataSaveError","initialState","posts","likesCount","userProfile","userStatus","profileInfoEditMode","statusEditMode","profilePageReducer","action","length","followUnfollowErrorTimer","usersAPI","post","delete","count","page","term","friend","params","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_IN_PROGRESS","SET_FILTER","follow","userId","unfollow","setUsers","users","setCurrentPage","setTotalCount","totalCount","toggleIsFetching","isFetching","toggleFollowingProgress","inProgress","setFilter","payload","followUnfollow","apiMethod","actionCreator","FollowUnfollowError","clearTimeout","setTimeout","followThunk","unfollowThunk","getUsersListThunk","pageSize","currentPage","searchValue","followersFilter","items","followingInProgress","onFollowUnfollowErrorMessage","filter","usersPageReducer","followed","SEND_MESSAGE","sendMessage","dialogs","name","dialogsPageReducer","module","exports","axios","create","baseURL","withCredentials","authAPI","getAuthUserData","login","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INIT_SUCCESS","init","appReducer","rootReducer","combineReducers","dialogsPage","usersPage","authReducer","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Error","errorMessage","className","classes","ColorModeContext","createContext","toggleColorMode","ColorTheme","children","useState","mode","setMode","colorMode","useMemo","prevMode","theme","createTheme","palette","Provider","value","ThemeProvider","Header","React","memo","toggleNavbar","useTheme","useContext","useSelector","getAuth","avatar","small","isAuth","useDispatch","AppBar","position","Toolbar","IconButton","onClick","size","edge","color","sx","mr","Avatar","src","alt","Typography","Button","variant","logoutUserThunk","to","ml","Navbar","navbarStatus","Drawer","anchor","open","onClose","style","height","width","marginRight","component","List","toLowerCase","primary","Divider","ListItemLink","props","location","useLocation","isMatchPath","pathname","renderLink","forwardRef","itemProps","ref","role","undefined","ListItem","button","bgcolor","hover","info","main","ListItemText","Layout","setNavbarStatus","e","Box","fallback","LinearProgress","Container","maxWidth","Privat","getIsAuth","from","getInit","DialogsPage","lazy","LoginPage","ProfilePage","UsersPage","ChatPage","Music","News","App","setErrorMessage","initApp","getAuthUser","catchUnhandledErrors","reason","useEffect","addEventListener","removeEventListener","timerId","path","element","index","ReactDOM","render","document","getElementById","getCaptchaUrl","captchaUrl","securityAPI","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","url","loginUserThunk","CapthaIsRequired","setCaptchaUrl","stopSubmit","_error","email"],"mappings":"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","file":"static/js/main.bf5f86bb.chunk.js","sourcesContent":["import { ContactsType, PhotosType, UserProfileType } from \"../redux/profilePageReducer\";\nimport { instance, OperationResultType } from \"./indexApi\";\n\n\n\n\nexport const profileAPI = {\n  getProfileData: (id: number | null) => {\n    return instance.get<UserProfileType>(`/profile/${id}`).then(res => { editDataContacts(res.data); return res.data });\n  },\n\n  getStatus: (id: number) => {\n    return instance.get<string>(`/profile/status/${id}`).then(res => res.data);\n  },\n\n  setStatus: (status: string) => {\n    return instance.put<OperationResultType>('/profile/status', { status }).then(res => res.data);\n  },\n\n  setProfilePhoto: (photo: File) => {\n    const formData = new FormData();\n    formData.append('image', photo);\n    return instance.put<OperationResultType<{ photos: PhotosType }>>('/profile/photo', formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then(res => res.data);\n  },\n\n  setProfileData: (data: UserProfileType) => {\n    return instance.put<OperationResultType>('/profile', data).then(res => res.data);\n  },\n}\n\nconst editDataContacts = (data: UserProfileType) => {\n  const { aboutMe, contacts, lookingForAJobDescription } = data;\n\n  if (aboutMe === null) {\n    data.aboutMe = '';\n  }\n\n  if (lookingForAJobDescription === null) {\n    data.lookingForAJobDescription = '';\n  }\n\n  Object.keys(contacts).map((item: string) => {\n    if (contacts[item as keyof ContactsType] === null) {\n      return contacts[item as keyof ContactsType] = '';\n    }\n    return contacts[item as keyof ContactsType];\n  })\n};","import { ProfileDataSaveError } from './../utils/errors/errors';\nimport { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { profileAPI } from \"../api/profileApi\";\nimport { ProfilePhotoSaveError, ProfileStatusSaveError } from \"../utils/errors/errors\";\n\n\ntype InitialStateType = typeof initialState\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n}\n\nexport type ErrorMessagesType = {\n  onSetPhotoErrorMessage: string | null;\n  onSetStatusErrorMessage: string | null;\n}\n\nexport type UserProfileType = {\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n  aboutMe: string;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n}\n\nexport type PhotosType = {\n  small: string | null;\n  large: string | null;\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>\n\n\nconst ADD_POST = 'social-network/profile/ADD-POST';\nconst SET_USER_PROFILE = 'social-network/profile/SET_USER_PROFILE';\nconst SET_USER_STATUS = 'social-network/profile/SET_USER_STATUS';\nconst SET_PHOTO = 'social-network/profile/SET_PHOTO';\nconst TOGGLE_IN_WAITING = 'social-network/profile/TOGGLE_IN_WAITING';\nconst SET_ERROR = 'social-network/profile/SET_ERROR';\nconst TOGGLE_EDIT_MODE = 'social-network/profile/TOGGLE_PROFILE_INFO_EDIT_MODE';\n\nexport const actions = {\n  addPost: (text: string) => ({ type: ADD_POST, text }) as const,\n  setUserProfile: (userData: UserProfileType) => ({ type: SET_USER_PROFILE, userData }) as const,\n  setUserStatus: (text: string) => ({ type: SET_USER_STATUS, text }) as const,\n  setPhoto: (photos: PhotosType) => ({ type: SET_PHOTO, photos }) as const,\n  toggleInWaiting: (inWaiting: boolean) => ({ type: TOGGLE_IN_WAITING, inWaiting }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  toggleEditMode: (state: boolean, fieldName: string) => ({ type: TOGGLE_EDIT_MODE, state, fieldName }) as const,\n}\n\n\n\nexport const getProfileThunk = (id: number | null): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getProfileData(id)\n    dispatch(actions.setUserProfile(response));\n  }\n}\n\nexport const getStatusThunk = (id: number): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setUserStatus(response));\n  }\n}\n\nexport const setStatusThunk = (text: string): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    try {\n      const response = await profileAPI.setStatus(text)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setUserStatus(text));\n        dispatch(actions.toggleEditMode(false, 'statusEditMode'));\n      } else {\n        throw new ProfileStatusSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport const setPhotoThunk = (photo: File): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      if (getState().profilePage.errorMessages.onSetPhotoErrorMessage) {\n        dispatch(actions.setError(null, 'onSetPhotoErrorMessage'));\n      }\n      dispatch(actions.toggleInWaiting(true));\n\n      const response = await profileAPI.setProfilePhoto(photo);\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setPhoto(response.data.photos));\n      } else {\n        throw new ProfilePhotoSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      if (err instanceof ProfilePhotoSaveError) {\n        dispatch(actions.setError(err.message, 'onSetPhotoErrorMessage'));\n      } else {\n        throw err;\n      }\n    } finally {\n      dispatch(actions.toggleInWaiting(false));\n    }\n  }\n}\n\n\nexport const setProfileDataThunk = (data: UserProfileType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      const id = getState().auth.id;\n      const response = await profileAPI.setProfileData(data)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        await dispatch(getProfileThunk(id));\n        dispatch(actions.toggleEditMode(false, 'profileInfoEditMode'));\n      } else {\n        throw new ProfileDataSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n}\n\n\n\nconst initialState = {\n  posts: [\n    { id: 1, message: 'Hi, how are you?', likesCount: 10 },\n    { id: 2, message: 'Its my first post', likesCount: 15 },\n    { id: 3, message: 'Da', likesCount: 120 },\n    { id: 4, message: 'Ok, its cool', likesCount: 110 },\n    { id: 5, message: ';)', likesCount: 40 },\n  ] as Array<PostType>,\n  userProfile: null as UserProfileType | null,\n  userStatus: '',\n  inWaiting: false,\n  profileInfoEditMode: false,\n  statusEditMode: false,\n  errorMessages: {\n    onSetPhotoErrorMessage: null,\n  } as ErrorMessagesType,\n}\n\n\nconst profilePageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case ADD_POST: {\n      return {\n        ...state,\n        posts: [\n          ...state.posts,\n          {\n            id: state.posts.length + 1,\n            message: action.text,\n            likesCount: 0,\n          }\n        ],\n      };\n    }\n\n    case SET_USER_PROFILE: {\n      return { ...state, userProfile: action.userData };\n    }\n\n    case SET_USER_STATUS: {\n      return { ...state, userStatus: action.text }\n    }\n\n    case SET_PHOTO: {\n      return {\n        ...state,\n        userProfile: {\n          ...state.userProfile as UserProfileType,\n          photos: action.photos,\n        }, /// !!! as UserProfileType\n      }\n    }\n\n    case TOGGLE_IN_WAITING:\n      return {\n        ...state,\n        inWaiting: action.inWaiting,\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case TOGGLE_EDIT_MODE:\n      return {\n        ...state,\n        [action.fieldName]: action.state,\n      }\n\n\n\n    default:\n      return state;\n  }\n}\n\nexport default profilePageReducer;","import { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { usersAPI } from \"../api/usersApi\";\nimport { FollowUnfollowError } from \"../utils/errors/errors\";\nimport { PhotosType } from \"./profilePageReducer\";\nimport { OperationResultType } from '../api/indexApi';\n\nconst FOLLOW = 'social-network/users/FOLLOW';\nconst UNFOLLOW = 'social-network/users/UNFOLLOW';\nconst SET_USERS = 'social-network/users/SET_USERS';\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'social-network/users/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'social-network/users/TOGGLE_IS_FETCHING';\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'social-network/users/TOGGLE_FOLLOWING_IN_PROGRESS';\nconst SET_ERROR = 'social-network/users/SET_ERROR';\nconst SET_FILTER = 'social-network/users/SET_FILTER';\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>;\n\nexport type ErrorMessagesType = {\n  onFollowUnfollowErrorMessage: string | null;\n}\n\nexport const actions = {\n  follow: (userId: number) => ({ type: FOLLOW, userId }) as const,\n  unfollow: (userId: number) => ({ type: UNFOLLOW, userId }) as const,\n  setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }) as const,\n  setCurrentPage: (page: number) => ({ type: SET_CURRENT_PAGE, page }) as const,\n  setTotalCount: (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount }) as const,\n  toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }) as const,\n  toggleFollowingProgress: (inProgress: boolean, id: number) => ({ type: TOGGLE_FOLLOWING_IN_PROGRESS, inProgress, id }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  setFilter: (payload: { term: string, friend: boolean | null }, page: number) => ({ type: SET_FILTER, payload, page }) as const,\n}\n\n\n\n\nlet followUnfollowErrorTimer: NodeJS.Timeout;\n\nconst followUnfollow = async (\n  dispatch: Dispatch<ActionsType>, apiMethod: (id: number) => Promise<OperationResultType>,\n  actionCreator: (userId: number) => ActionsType,\n  id: number\n) => {\n  try {\n    dispatch(actions.toggleFollowingProgress(true, id));\n\n    const response = await apiMethod(id);\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actionCreator(id))\n    } else {\n      throw new FollowUnfollowError(response.messages[0])\n    }\n  } catch (err) {\n    if (err instanceof FollowUnfollowError) {\n      dispatch(actions.setError(err.message, 'onFollowUnfollowErrorMessage'));\n\n      clearTimeout(followUnfollowErrorTimer);\n      followUnfollowErrorTimer = setTimeout(() => {\n        dispatch(actions.setError(null, 'onFollowUnfollowErrorMessage'));\n      }, 2000)\n    } else {\n      throw err;\n    }\n  } finally {\n    dispatch(actions.toggleFollowingProgress(false, id));\n  }\n}\n\nexport const followThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getFollow, actions.follow, id);\n  }\n}\n\nexport const unfollowThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getUnfollow, actions.unfollow, id);\n  }\n}\n\n\nexport const getUsersListThunk = (pageSize: number, currentPage: number, searchValue: string, followersFilter: boolean | null): ThunkActionType => {\n  return async (dispatch: Dispatch<ActionsType>) => {\n    dispatch(actions.toggleIsFetching(true));\n\n    const response = await usersAPI.getUsersData(pageSize, currentPage, searchValue, followersFilter);\n\n    dispatch(actions.setUsers(response.items));\n    dispatch(actions.setTotalCount(response.totalCount));\n\n    dispatch(actions.toggleIsFetching(false));\n  }\n}\n\nexport type UserType = {\n  name: string\n  id: number\n  photos: PhotosType\n  status: string | null\n  followed: boolean\n}\n\n\nexport type FilterType = {\n  term: string;\n  friend: boolean | null;\n};\n\nexport type SetFilterType = typeof actions.setFilter;\nexport type SetCurrentPageType = typeof actions.setCurrentPage;\n\ntype InitialStateType = typeof initialState\n\nconst initialState = {\n  items: [] as Array<UserType>,\n  pageSize: 50,\n  currentPage: 1,\n  totalCount: 0,\n  isFetching: false,\n  followingInProgress: [] as Array<number>, // массив пользовательских id\n  errorMessages: {\n    onFollowUnfollowErrorMessage: null,\n  } as ErrorMessagesType,\n  filter: null as null | FilterType,\n};\n\nconst usersPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case FOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: true,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: false,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case SET_USERS:\n      return {\n        ...state,\n        items: action.users,\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.page,\n      };\n\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalCount: action.totalCount,\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n\n    case TOGGLE_FOLLOWING_IN_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.inProgress\n          ? [...state.followingInProgress, action.id]\n          : state.followingInProgress.filter(item => item !== action.id),\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: {\n          // ...state.filter,\n          ...action.payload,\n        },\n        currentPage: action.page,\n      }\n\n\n    default:\n      return state;\n  }\n}\n\nexport default usersPageReducer;","import { UserType } from \"../redux/usersPageReducer\";\nimport { instance, OperationResultType } from './indexApi';\n\ntype GetUsersDataResponseType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n}\n\n\nexport const usersAPI = {\n  getFollow: (id: number) => {\n    return instance.post<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUnfollow: (id: number) => {\n    return instance.delete<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUsersData: (count = 10, page: number, term: string, friend: boolean | null ) => {\n    // return instance.get(`/users?count=${pageSize}&page=${currentPage}&term=${searchStr}`).then(res => res.data);   \n    return instance.get<GetUsersDataResponseType>(`/users`, { params: {count, page, term, friend} }).then(res => res.data);\n  },\n}","import { InferActionsType } from \"./reduxStore\";\n\ntype InitialStateType = typeof initialState\n\ntype DialogType = {\n  id: number\n  name: string\n}\n\ntype MessageType = {\n  id: number\n  message: string\n  status: string\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\nconst SEND_MESSAGE = 'social-network/dialogs-page/SEND-MESSAGE';\n\nexport const actions = {\n  sendMessage: (text: string) => ({ type: SEND_MESSAGE, text }) as const,\n}\n\n\nconst initialState = {\n  dialogs: [\n    {id: 1, name: 'Aaaa'},\n    {id: 2, name: 'Bbb'},\n    {id: 3, name: 'Ccc'},\n  ] as Array<DialogType>,\n  messages: [\n    {id: 1, message: 'Hey!', status: 'from'},\n    {id: 2, message: 'How are you?', status: 'from'},\n    {id: 3, message: 'Im ok)', status: 'to'},\n  ] as Array<MessageType>,\n}\n\nconst dialogsPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SEND_MESSAGE: {\n      return {\n        ...state, \n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length + 1, \n            status: 'to',\n            message: action.text,\n          }\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default dialogsPageReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Error_item__3hG1O\"};","import axios from \"axios\";\n\nexport type OperationResultType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n}\n\nexport const instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0',\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"9d799735-d786-4c1b-bde9-09779c3bba07\" // ddr9626@yandex.ru\n    // \"API-KEY\": \"036c44c9-5c4a-4e50-8bd2-abc9e86b54f0\" // art9626@mail.ru\n  },\n});","import { LoginFormDataType } from './../redux/authReducer';\nimport { instance, OperationResultType } from './indexApi';\n\n\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n  CapthaIsRequired = 10,\n}\n\ntype LogautResponseType = {\n  resultCode: number;\n}\n\ntype AuthUserDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype LoginUserDataType = {\n  userId: number\n}\n\nexport const authAPI = {\n  getAuthUserData: () => {\n    return instance.get<OperationResultType<AuthUserDataType>>('/auth/me').then(res => res.data);\n  },\n\n  login: (formData: LoginFormDataType) => {\n    return instance.post<OperationResultType<LoginUserDataType>>('/auth/login', formData).then(res => res.data);\n  },\n\n  logout: () => {\n    return instance.post<LogautResponseType>('/auth/logout');\n  },\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { getAuthUser } from \"./authReducer\";\n\n\ntype InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\n\n\nconst INIT_SUCCESS = 'social-network/app/INIT_SUCCESS';\n\nconst actions = {\n  initSuccess: () => ({ type: INIT_SUCCESS }) as const,\n}\n\n\n\n\nexport const initAppThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    dispatch(getAuthUser())\n      .then(() => {\n        dispatch(actions.initSuccess())\n      });\n  }\n}\n\n\n\nconst initialState = {\n  init: false,\n}\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case INIT_SUCCESS:\n      return {\n        ...state,\n        init: true,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\n\n\n\nexport default appReducer;","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport authReducer from './authReducer';\nimport dialogsPageReducer from './dialogsPageReducer';\nimport profilePageReducer from './profilePageReducer';\nimport usersPageReducer from './usersPageReducer';\nimport thunkMiddleware from 'redux-thunk'\nimport appReducer from './appReducer';\nimport { reducer as formReducer } from 'redux-form'\n\nconst rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  usersPage: usersPageReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n});\n\n// Создание store с расширением Redux Devtools\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// Создание store\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n\n// Определяем тип state по возвращаемому объекту из метода getState\nexport type RootStateType = ReturnType<typeof store.getState>\n\n// Определяем тип state по возвращаемому объекту из функции rootReducer \n// (возвращает она тоже самое, что и метот getState, потому что rootReducer - это функция принимающая глобальный state и возвращающая его)\n// export type RootStateType = ReturnType<typeof rootReducer>\n\n\n\n// Динамически определяем тип actions\n// type InferActionCreatersType<T> = T extends {[key: string]: infer U} ? U : never;\n// export type InferActionsType<T extends {[key: string]: (...arg: any) => any}> = ReturnType<InferActionCreatersType<T>>;\n\n// То же самое в укороченной записи\nexport type InferActionsType<T> = T extends {[key: string]: (...arg: any) => infer U} ? U : never;\n\n\nexport default store;","import React from 'react';\nimport classes from './Error.module.css'\n\ntype ErrorPropsType = {\n  errorMessage: string\n}\n\nconst Error = ({ errorMessage }: ErrorPropsType): JSX.Element => {\n  return (\n    <div className={classes.item}>{errorMessage}</div>\n  );\n}\n\nexport default Error; ","import { createTheme, ThemeProvider } from '@mui/material';\nimport React, { createContext, useMemo, useState } from 'react';\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => { } });\n\nexport const ColorTheme: React.FC = ({ children }) => {\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  const colorMode = useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = createTheme({\n    palette: { \n      mode,\n    },\n  });\n\n  \n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};","import { AppBar, Avatar, Button, IconButton, Toolbar, Typography, useTheme } from '@mui/material';\nimport React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { logoutUserThunk } from '../../redux/authReducer';\nimport { getAuth } from '../../redux/authSelecrors';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { RootStateType } from '../../redux/reduxStore';\nimport { ColorModeContext } from '../common/ColorTheme';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\ntype PropsType = {\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Header: React.FC<PropsType> = React.memo(({ toggleNavbar }) => {\n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n  const userData = useSelector(getAuth);\n  const avatar = useSelector((state: RootStateType) => state.profilePage.userProfile?.photos.small)\n  const { isAuth, login } = userData;\n\n  const dispatch = useDispatch();\n\n  const logoutUser = () => dispatch(logoutUserThunk());\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton\n          onClick={toggleNavbar(true)}\n          size=\"large\"\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          sx={{ mr: 'auto' }}\n        >\n          <MenuIcon />\n        </IconButton>\n        {\n          isAuth === 'authorized'\n            ? <>\n              <Avatar src={avatar as string} alt='User avatar' sx={{ mr: 3 }} />\n              <Typography sx={{ mr: 5 }}>\n                {login}\n              </Typography>\n              <Button variant=\"contained\" color='error' onClick={logoutUser}>Logout</Button>\n            </>\n            : <Link to='/login'>Login</Link>\n        }\n        <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\n          {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n\n  )\n});","import React from 'react';\nimport { NavLink, NavLinkProps, useLocation } from 'react-router-dom';\nimport { Divider, Drawer, List, ListItem, ListItemText } from '@mui/material';\nimport { Box } from '@mui/system';\n\ntype PropsType = {\n  navbarStatus: boolean;\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Navbar: React.FC<PropsType> = ({ navbarStatus, toggleNavbar }) => {\n  return (\n    <Drawer\n      anchor='left'\n      open={navbarStatus}\n      onClose={toggleNavbar(false)}\n    >\n      <img style={{ height: '50px', width: '50px', marginRight: 'auto' }} src=\"https://i.imgur.com/BrIpiK6.png\" />\n      <Box\n        sx={{ width: 250 }}\n        onClick={toggleNavbar(false)}\n        component='nav'\n      >\n        <List>\n          {\n            ['Profile', 'Dialogs', 'Chat', 'News', 'Music', 'Users'].map((item) => {\n              return (\n                <ListItemLink \n                  key={item} \n                  to={`/${item.toLowerCase()}`} \n                  primary={item} \n                />\n              );\n            })\n          }\n        </List>\n        <Divider />\n      </Box>\n    </Drawer >\n  )\n}\n\n\ntype ListItemLinkPropsType = {\n  primary: string;\n  to: string;\n}\n\nconst ListItemLink = (props: ListItemLinkPropsType) => {\n  const location = useLocation();\n  const { primary, to } = props;\n  const isMatchPath = location.pathname === to;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef<HTMLAnchorElement, Omit<NavLinkProps, 'to'>>(function Link(\n        itemProps,\n        ref,\n      ) {\n        return <NavLink\n          to={to} ref={ref}\n          {...itemProps} role={undefined}\n        />;\n      }),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem \n        button component={renderLink}\n        sx={ (theme) => (isMatchPath ? { bgcolor: theme.palette.action.hover,  color: theme.palette.info.main } : {}) } \n      >\n        <ListItemText \n          primary={primary} \n        />\n      </ListItem>\n    </li>\n  );\n}","import { Box, Container, LinearProgress } from '@mui/material';\nimport React, { Suspense, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Header } from '../Header/Header';\nimport { Navbar } from '../Navbar/Navbar';\n\nexport const Layout: React.FC = () => {\n  const [navbarStatus, setNavbarStatus] = useState(false);\n\n  const toggleNavbar = (status: boolean) => (e: React.MouseEvent) => setNavbarStatus(status);\n\n  return (\n    <>\n      <Header toggleNavbar={toggleNavbar} />\n      <Box\n        component='main'\n        sx={{\n          bgcolor: 'background.default',\n          color: 'text.primary',\n        }}\n      >\n        <Suspense fallback={<LinearProgress color='primary' />}>\n          <Container maxWidth='md'>\n            <Outlet />\n          </Container>\n        </Suspense>\n        <Navbar navbarStatus={navbarStatus} toggleNavbar={toggleNavbar} />\n      </Box>\n    </>\n  );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { getIsAuth } from '../../redux/authSelecrors';\n\n\nexport const Privat: React.FC = ({ children }) => {\n\n  const isAuth = useSelector(getIsAuth);\n  const location = useLocation();\n\n  if (isAuth === 'notAuthorized') {\n    return <Navigate to='/login' state={{ from: location.pathname }} />\n  };\n\n  return (\n    <>\n      {children}\n    </>\n  );\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getInit = (state: RootStateType) => state.app.init;","import React, { lazy, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n// import './App.css'\nimport Error from './components/common/Error/Error';\nimport { Layout } from './components/Layout/Layout';\nimport { Privat } from './components/common/Private';\nimport { initAppThunk } from './redux/appReducer';\nimport { getInit } from './redux/appSelectors';\nimport { getAuth } from './redux/authSelecrors';\nimport { LinearProgress, } from '@mui/material';\nimport { ColorTheme } from './components/common/ColorTheme';\n\n\nconst DialogsPage = lazy(() => import('./components/Dialogs/DialogsPage'));\nconst LoginPage = lazy(() => import('./components/Login/LoginPage'));\nconst ProfilePage = lazy(() => import('./components/Profile/ProfilePage'));\nconst UsersPage = lazy(() => import('./components/Users/UsersPage'));\nconst ChatPage = lazy(() => import('./components/Chat/ChatPage'));\nconst Music = lazy(() => import('./components/Music/Music'));\nconst News = lazy(() => import('./components/News/News'));\n\n\n\nconst App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState<null | string>(null);\n  const init = useSelector(getInit);\n  const auth = useSelector(getAuth);\n\n  const dispatch = useDispatch();\n\n  const initApp = () => dispatch(initAppThunk());\n\n  const catchUnhandledErrors = (e: PromiseRejectionEvent) => {\n    setErrorMessage(e.reason.message);\n  }\n\n  useEffect(() => {\n    initApp();\n    window.addEventListener('unhandledrejection', catchUnhandledErrors);\n\n    return () => window.removeEventListener('unhandledrejection', catchUnhandledErrors);\n  }, [])\n\n  useEffect(() => {\n    let timerId: NodeJS.Timeout;\n    if (errorMessage) {\n      timerId = setTimeout(() => {\n        setErrorMessage(null);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [errorMessage]);\n\n\n\n  if (!init) return <LinearProgress color='primary' />;\n\n  return (\n    <ColorTheme>\n      {\n        errorMessage && <Error errorMessage={errorMessage} />\n      }\n\n      <Routes>\n        <Route path='/' element={<Layout />}>\n          <Route index element={auth.isAuth === 'authorized' ? <Navigate to='/profile' /> : <div>Registration</div>} />\n          <Route path='login' element={<LoginPage />} />\n          <Route\n            path='profile/'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='profile/:id'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='dialogs/*'\n            element={\n              <Privat>\n                <DialogsPage />\n              </Privat>\n            }\n          />\n          <Route\n            path='chat'\n            element={\n              <Privat>\n                <ChatPage />\n              </Privat>\n            }\n          />\n          <Route path='users' element={<UsersPage />} />\n          <Route path='news' element={<News />} />\n          <Route path='music' element={<Music />} />\n          <Route path='*' element={<div>Error 404 Page not found</div>} />\n        </Route>\n      </Routes>\n    </ColorTheme>\n  );\n}\n\nexport default App;","import 'normalize.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, /* HashRouter */ } from 'react-router-dom';\n\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { createTheme } from '@mui/material';\n\n\nconst lightTheme = createTheme();\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nReactDOM.render(\n\n  // HashRouter using only for git hab pages diploy!!!\n  // <HashRouter>\n  <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </BrowserRouter>,\n  // </HashRouter>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export class FollowUnfollowError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'FollowUnfollowError';\n  }\n}\n\nexport class ProfileDataSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfileDataSaveError';\n  }\n}\n\nexport class ProfileStatusSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfileStatusSaveError';\n  }\n}\n\nexport class ProfilePhotoSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfilePhotoSaveError';\n  }\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getAuth = (state: RootStateType) => state.auth;\n\nexport const getIsAuth = (state: RootStateType) => state.auth.isAuth;\n\nexport const getCaptchaUrl = (state: RootStateType) => state.auth.captchaUrl;","import { instance } from \"./indexApi\";\n\n\ntype GetCaptchaResponseType = {\n  url: string;\n}\n\n\nexport const securityAPI = {\n  getCaptchaUrl: () => {\n    return instance.get<GetCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { authAPI, ResultCodesEnum } from \"../api/authApi\";\nimport { securityAPI } from \"../api/securityApi\";\n\n\ntype AuthUserDataType = {\n  email: string | null;\n  id: number | null;\n  login: string | null;\n}\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n}\n\nexport type FieldsNamesType = keyof LoginFormDataType;\n\n\nexport type IsAuthType = 'notAuthorized' | 'authorized';\n\nexport type InitialStateType = typeof initialState;\n\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>;\n\n\n\n\nconst SET_AUTH_USER_DATA = 'social-network/auth/SET_AUTH_USER_DATA';\nconst SET_CAPTCHA_URL = 'social-network/auth/SET_CAPTCHA_URL';\n\nconst actions = {\n  setAuthUserData: (data: AuthUserDataType, isAuth: IsAuthType) => ({ type: SET_AUTH_USER_DATA, data, isAuth }) as const,\n  setCaptchaUrl: (url: string) => ({ type: SET_CAPTCHA_URL, url }) as const,\n}\n\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\n\nexport const getAuthUser = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n\n    const response = await authAPI.getAuthUserData()\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData(response.data, 'authorized'));\n    }\n  }\n}\n\nexport const loginUserThunk = (formData: LoginFormDataType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType | FormAction>) => { // FormAction тип экшена, который возвращаее stopSubmit\n    const response = await authAPI.login(formData)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUser());\n    } else {\n      if (response.resultCode === ResultCodesEnum.CapthaIsRequired) {\n        dispatch(setCaptchaUrl());\n      }\n      dispatch(stopSubmit('login', { _error: response.messages[0] }));\n    }\n  }\n}\n\nexport const logoutUserThunk = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData({ id: null, login: null, email: null }, 'notAuthorized'));\n    }\n  }\n}\n\nconst setCaptchaUrl = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await securityAPI.getCaptchaUrl();\n    dispatch(actions.setCaptchaUrl(response.url));\n  }\n}\n\nconst initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: 'notAuthorized' as IsAuthType,\n  captchaUrl: null as string | null,\n}\n\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isAuth: action.isAuth,\n      };\n\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.url,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\nexport default authReducer;"],"sourceRoot":""}