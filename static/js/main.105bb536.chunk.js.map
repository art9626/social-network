{"version":3,"sources":["api/profileApi.ts","redux/profilePageReducer.ts","redux/usersPageReducer.ts","api/usersApi.ts","redux/dialogsPageReducer.ts","api/chatApi.ts","redux/chatReducer.ts","api/indexApi.ts","api/authApi.ts","redux/appReducer.ts","redux/reduxStore.ts","components/common/Error/Error.tsx","components/common/ColorTheme.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/common/Private.tsx","redux/appSelectors.ts","App.tsx","index.js","utils/errors/errors.ts","redux/authSelecrors.ts","api/securityApi.ts","redux/authReducer.ts"],"names":["profileAPI","id","instance","get","then","res","editDataContacts","data","status","put","photo","formData","FormData","append","headers","aboutMe","contacts","lookingForAJobDescription","Object","keys","map","item","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","SET_PHOTO","TOGGLE_IN_WAITING","SET_ERROR","TOGGLE_EDIT_MODE","actions","addPost","text","type","setUserProfile","userData","setUserStatus","setPhoto","photos","toggleInWaiting","inWaiting","setError","errorText","errorName","toggleEditMode","state","fieldName","getProfileThunk","dispatch","a","response","getStatusThunk","setStatusThunk","resultCode","ResultCodesEnum","Success","ProfileStatusSaveError","messages","setPhotoThunk","getState","Promise","reject","Error","catch","err","finally","setProfileDataThunk","auth","ProfileDataSaveError","initialState","posts","message","likesCount","userProfile","userStatus","profileInfoEditMode","statusEditMode","errorMessages","onSetPhotoErrorMessage","profilePageReducer","action","length","followUnfollowErrorTimer","usersAPI","post","delete","count","page","term","friend","params","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_IN_PROGRESS","SET_FILTER","follow","userId","unfollow","setUsers","users","setCurrentPage","setTotalCount","totalCount","toggleIsFetching","isFetching","toggleFollowingProgress","inProgress","setFilter","payload","followUnfollow","apiMethod","actionCreator","FollowUnfollowError","clearTimeout","setTimeout","followThunk","unfollowThunk","getUsersListThunk","pageSize","currentPage","searchValue","followersFilter","items","followingInProgress","onFollowUnfollowErrorMessage","filter","usersPageReducer","followed","SEND_MESSAGE","sendMessage","dialogs","name","dialogsPageReducer","subscribers","window","timerId","_subscriberMessageHandler","_subscriberStatusChangedHendler","wsChannel","onOpenWsChannel","statusChanged","forEach","onCloseWsChannel","createWsChannel","onMessageWsChannel","e","newMessages","JSON","parse","messagesReceived","cleanup","removeEventListener","WebSocket","addEventListener","chatApi","close","event","callback","push","send","SET_MESSAGES","SET_CHANNEL_STATUS","startWsChannelListeningThunk","stopWsChannelListeningThunk","channelStatus","chatReducer","axios","create","baseURL","withCredentials","authAPI","getAuthUserData","login","logout","INIT_SUCCESS","init","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","authReducer","app","form","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","children","setErrorMessage","handleClose","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","ColorModeContext","createContext","toggleColorMode","ColorTheme","useState","mode","setMode","colorMode","useMemo","prevMode","theme","createTheme","palette","Provider","value","ThemeProvider","Header","React","memo","toggleNavbar","useTheme","useContext","useSelector","getAuth","avatar","small","isAuth","useDispatch","AppBar","position","Toolbar","IconButton","onClick","size","edge","color","sx","mr","Avatar","src","alt","Typography","Button","variant","logoutUserThunk","to","ml","Navbar","navbarStatus","Drawer","anchor","style","height","width","marginRight","component","List","toLowerCase","primary","Divider","ListItemLink","props","location","useLocation","isMatchPath","pathname","renderLink","forwardRef","itemProps","ref","role","undefined","ListItem","button","bgcolor","hover","info","main","ListItemText","Layout","setNavbarStatus","Box","minHeight","fallback","LinearProgress","Container","maxWidth","Privat","getIsAuth","from","getInit","DialogsPage","lazy","LoginPage","ProfilePage","UsersPage","ChatPage","Music","News","App","errorMessage","initApp","getAuthUser","catchUnhandledErrors","console","log","useEffect","TypeError","path","element","index","ReactDOM","render","document","getElementById","getCaptchaUrl","captchaUrl","securityAPI","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","url","loginUserThunk","CapthaIsRequired","setCaptchaUrl","stopSubmit","_error","email"],"mappings":"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","file":"static/js/main.105bb536.chunk.js","sourcesContent":["import { ContactsType, PhotosType, UserProfileType } from \"../redux/profilePageReducer\";\nimport { instance, OperationResultType } from \"./indexApi\";\n\n\n\n\nexport const profileAPI = {\n  getProfileData: (id: number | null) => {\n    return instance.get<UserProfileType>(`/profile/${id}`).then(res => { editDataContacts(res.data); return res.data });\n  },\n\n  getStatus: (id: number) => {\n    return instance.get<string>(`/profile/status/${id}`).then(res => res.data);\n  },\n\n  setStatus: (status: string) => {\n    return instance.put<OperationResultType>('/profile/status', { status }).then(res => res.data);\n  },\n\n  setProfilePhoto: (photo: File) => {\n    const formData = new FormData();\n    formData.append('image', photo);\n    return instance.put<OperationResultType<{ photos: PhotosType }>>('/profile/photo', formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then(res => res.data);\n  },\n\n  setProfileData: (data: UserProfileType) => {\n    return instance.put<OperationResultType>('/profile', data).then(res => res.data);\n  },\n}\n\nconst editDataContacts = (data: UserProfileType) => {\n  const { aboutMe, contacts, lookingForAJobDescription } = data;\n\n  if (aboutMe === null) {\n    data.aboutMe = '';\n  }\n\n  if (lookingForAJobDescription === null) {\n    data.lookingForAJobDescription = '';\n  }\n\n  Object.keys(contacts).map((item: string) => {\n    if (contacts[item as keyof ContactsType] === null) {\n      return contacts[item as keyof ContactsType] = '';\n    }\n    return contacts[item as keyof ContactsType];\n  })\n};","import { ProfileDataSaveError } from './../utils/errors/errors';\nimport { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { profileAPI } from \"../api/profileApi\";\nimport { ProfilePhotoSaveError, ProfileStatusSaveError } from \"../utils/errors/errors\";\n\n\ntype InitialStateType = typeof initialState\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n}\n\nexport type ErrorMessagesType = {\n  onSetPhotoErrorMessage: string | null;\n  onSetStatusErrorMessage: string | null;\n}\n\nexport type UserProfileType = {\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n  aboutMe: string;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n}\n\nexport type PhotosType = {\n  small: string | null;\n  large: string | null;\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>\n\n\nconst ADD_POST = 'social-network/profile/ADD-POST';\nconst SET_USER_PROFILE = 'social-network/profile/SET_USER_PROFILE';\nconst SET_USER_STATUS = 'social-network/profile/SET_USER_STATUS';\nconst SET_PHOTO = 'social-network/profile/SET_PHOTO';\nconst TOGGLE_IN_WAITING = 'social-network/profile/TOGGLE_IN_WAITING';\nconst SET_ERROR = 'social-network/profile/SET_ERROR';\nconst TOGGLE_EDIT_MODE = 'social-network/profile/TOGGLE_PROFILE_INFO_EDIT_MODE';\n\nexport const actions = {\n  addPost: (text: string) => ({ type: ADD_POST, text }) as const,\n  setUserProfile: (userData: UserProfileType) => ({ type: SET_USER_PROFILE, userData }) as const,\n  setUserStatus: (text: string) => ({ type: SET_USER_STATUS, text }) as const,\n  setPhoto: (photos: PhotosType) => ({ type: SET_PHOTO, photos }) as const,\n  toggleInWaiting: (inWaiting: boolean) => ({ type: TOGGLE_IN_WAITING, inWaiting }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  toggleEditMode: (state: boolean, fieldName: string) => ({ type: TOGGLE_EDIT_MODE, state, fieldName }) as const,\n}\n\n\n\nexport const getProfileThunk = (id: number | null): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getProfileData(id)\n    dispatch(actions.setUserProfile(response));\n  }\n}\n\nexport const getStatusThunk = (id: number): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setUserStatus(response));\n  }\n}\n\nexport const setStatusThunk = (text: string): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    try {\n      const response = await profileAPI.setStatus(text)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setUserStatus(text));\n        dispatch(actions.toggleEditMode(false, 'statusEditMode'));\n      } else {\n        throw new ProfileStatusSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n// export const setPhotoThunk = (photo: File): ThunkActionType => {\n//   return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n//     try {\n//       if (getState().profilePage.errorMessages.onSetPhotoErrorMessage) {\n//         dispatch(actions.setError(null, 'onSetPhotoErrorMessage'));\n//       }\n//       dispatch(actions.toggleInWaiting(true));\n\n//       const response = await profileAPI.setProfilePhoto(photo);\n//       if (response.resultCode === ResultCodesEnum.Success) {\n//         dispatch(actions.setPhoto(response.data.photos));\n//       } else {\n//         throw new ProfilePhotoSaveError(response.messages[0]);\n//       }\n//     } catch (err) {\n//       if (err instanceof ProfilePhotoSaveError) {\n//         dispatch(actions.setError(err.message, 'onSetPhotoErrorMessage'));\n//       } else {\n//         throw err;\n//       }\n//     } finally {\n//       dispatch(actions.toggleInWaiting(false));\n//     }\n//   }\n// }\n\n\nexport const setPhotoThunk = (photo: File): any => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    // try {\n      // if (getState().profilePage.errorMessages.onSetPhotoErrorMessage) {\n      //   dispatch(actions.setError(null, 'onSetPhotoErrorMessage'));\n      // }\n      dispatch(actions.toggleInWaiting(true));\n\n      profileAPI.setProfilePhoto(photo)\n        .then((res) => {\n          if (res.resultCode === ResultCodesEnum.Success) {\n            dispatch(actions.setPhoto(res.data.photos));\n          } else {\n            Promise.reject(new Error(res.messages[0]));\n          }\n        })\n        .catch((err) => {\n          throw(err);\n        })\n        .finally(() => {\n          dispatch(actions.toggleInWaiting(false));\n        })\n    // } catch (err) {\n    //   if (err instanceof ProfilePhotoSaveError) {\n    //     dispatch(actions.setError(err.message, 'onSetPhotoErrorMessage'));\n    //   } else {\n    //     throw err;\n    //   }\n    // } finally {\n    //   dispatch(actions.toggleInWaiting(false));\n    // }\n  }\n}\n\n\nexport const setProfileDataThunk = (data: UserProfileType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      const id = getState().auth.id;\n      const response = await profileAPI.setProfileData(data)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        await dispatch(getProfileThunk(id));\n        dispatch(actions.toggleEditMode(false, 'profileInfoEditMode'));\n      } else {\n        throw new ProfileDataSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n}\n\n\n\nconst initialState = {\n  posts: [\n    { id: 1, message: 'Hi, how are you?', likesCount: 10 },\n    { id: 2, message: 'Its my first post', likesCount: 15 },\n    { id: 3, message: 'Da', likesCount: 120 },\n    { id: 4, message: 'Ok, its cool', likesCount: 110 },\n    { id: 5, message: ';)', likesCount: 40 },\n  ] as Array<PostType>,\n  userProfile: null as UserProfileType | null,\n  userStatus: '',\n  inWaiting: false,\n  profileInfoEditMode: false,\n  statusEditMode: false,\n  errorMessages: {\n    onSetPhotoErrorMessage: null,\n  } as ErrorMessagesType,\n}\n\n\nconst profilePageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case ADD_POST: {\n      return {\n        ...state,\n        posts: [\n          ...state.posts,\n          {\n            id: state.posts.length + 1,\n            message: action.text,\n            likesCount: 0,\n          }\n        ],\n      };\n    }\n\n    case SET_USER_PROFILE: {\n      return { ...state, userProfile: action.userData };\n    }\n\n    case SET_USER_STATUS: {\n      return { ...state, userStatus: action.text }\n    }\n\n    case SET_PHOTO: {\n      return {\n        ...state,\n        userProfile: {\n          ...state.userProfile as UserProfileType,\n          photos: action.photos,\n        }, /// !!! as UserProfileType\n      }\n    }\n\n    case TOGGLE_IN_WAITING:\n      return {\n        ...state,\n        inWaiting: action.inWaiting,\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case TOGGLE_EDIT_MODE:\n      return {\n        ...state,\n        [action.fieldName]: action.state,\n      }\n\n\n\n    default:\n      return state;\n  }\n}\n\nexport default profilePageReducer;","import { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { usersAPI } from \"../api/usersApi\";\nimport { FollowUnfollowError } from \"../utils/errors/errors\";\nimport { PhotosType } from \"./profilePageReducer\";\nimport { OperationResultType } from '../api/indexApi';\n\nconst FOLLOW = 'social-network/users/FOLLOW';\nconst UNFOLLOW = 'social-network/users/UNFOLLOW';\nconst SET_USERS = 'social-network/users/SET_USERS';\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'social-network/users/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'social-network/users/TOGGLE_IS_FETCHING';\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'social-network/users/TOGGLE_FOLLOWING_IN_PROGRESS';\nconst SET_ERROR = 'social-network/users/SET_ERROR';\nconst SET_FILTER = 'social-network/users/SET_FILTER';\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>;\n\nexport type ErrorMessagesType = {\n  onFollowUnfollowErrorMessage: string | null;\n}\n\nexport const actions = {\n  follow: (userId: number) => ({ type: FOLLOW, userId }) as const,\n  unfollow: (userId: number) => ({ type: UNFOLLOW, userId }) as const,\n  setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }) as const,\n  setCurrentPage: (page: number) => ({ type: SET_CURRENT_PAGE, page }) as const,\n  setTotalCount: (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount }) as const,\n  toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }) as const,\n  toggleFollowingProgress: (inProgress: boolean, id: number) => ({ type: TOGGLE_FOLLOWING_IN_PROGRESS, inProgress, id }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  setFilter: (payload: { term: string, friend: boolean | null }, page: number) => ({ type: SET_FILTER, payload, page }) as const,\n}\n\n\n\n\nlet followUnfollowErrorTimer: NodeJS.Timeout;\n\nconst followUnfollow = async (\n  dispatch: Dispatch<ActionsType>, apiMethod: (id: number) => Promise<OperationResultType>,\n  actionCreator: (userId: number) => ActionsType,\n  id: number\n) => {\n  try {\n    dispatch(actions.toggleFollowingProgress(true, id));\n\n    const response = await apiMethod(id);\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actionCreator(id))\n    } else {\n      throw new FollowUnfollowError(response.messages[0])\n    }\n  } catch (err) {\n    if (err instanceof FollowUnfollowError) {\n      dispatch(actions.setError(err.message, 'onFollowUnfollowErrorMessage'));\n\n      clearTimeout(followUnfollowErrorTimer);\n      followUnfollowErrorTimer = setTimeout(() => {\n        dispatch(actions.setError(null, 'onFollowUnfollowErrorMessage'));\n      }, 2000)\n    } else {\n      throw err;\n    }\n  } finally {\n    dispatch(actions.toggleFollowingProgress(false, id));\n  }\n}\n\nexport const followThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getFollow, actions.follow, id);\n  }\n}\n\nexport const unfollowThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getUnfollow, actions.unfollow, id);\n  }\n}\n\n\nexport const getUsersListThunk = (pageSize: number, currentPage: number, searchValue: string, followersFilter: boolean | null): ThunkActionType => {\n  return async (dispatch: Dispatch<ActionsType>) => {\n    dispatch(actions.toggleIsFetching(true));\n\n    const response = await usersAPI.getUsersData(pageSize, currentPage, searchValue, followersFilter);\n\n    dispatch(actions.setUsers(response.items));\n    dispatch(actions.setTotalCount(response.totalCount));\n\n    dispatch(actions.toggleIsFetching(false));\n  }\n}\n\nexport type UserType = {\n  name: string\n  id: number\n  photos: PhotosType\n  status: string | null\n  followed: boolean\n}\n\n\nexport type FilterType = {\n  term: string;\n  friend: boolean | null;\n};\n\nexport type SetFilterType = typeof actions.setFilter;\nexport type SetCurrentPageType = typeof actions.setCurrentPage;\n\ntype InitialStateType = typeof initialState\n\nconst initialState = {\n  items: [] as Array<UserType>,\n  pageSize: 50,\n  currentPage: 1,\n  totalCount: 0,\n  isFetching: false,\n  followingInProgress: [] as Array<number>, // массив пользовательских id\n  errorMessages: {\n    onFollowUnfollowErrorMessage: null,\n  } as ErrorMessagesType,\n  filter: null as null | FilterType,\n};\n\nconst usersPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case FOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: true,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: false,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case SET_USERS:\n      return {\n        ...state,\n        items: action.users,\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.page,\n      };\n\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalCount: action.totalCount,\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n\n    case TOGGLE_FOLLOWING_IN_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.inProgress\n          ? [...state.followingInProgress, action.id]\n          : state.followingInProgress.filter(item => item !== action.id),\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: {\n          // ...state.filter,\n          ...action.payload,\n        },\n        currentPage: action.page,\n      }\n\n\n    default:\n      return state;\n  }\n}\n\nexport default usersPageReducer;","import { UserType } from \"../redux/usersPageReducer\";\nimport { instance, OperationResultType } from './indexApi';\n\ntype GetUsersDataResponseType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n}\n\n\nexport const usersAPI = {\n  getFollow: (id: number) => {\n    return instance.post<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUnfollow: (id: number) => {\n    return instance.delete<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUsersData: (count = 10, page: number, term: string, friend: boolean | null ) => {\n    // return instance.get(`/users?count=${pageSize}&page=${currentPage}&term=${searchStr}`).then(res => res.data);   \n    return instance.get<GetUsersDataResponseType>(`/users`, { params: {count, page, term, friend} }).then(res => res.data);\n  },\n}","import { InferActionsType } from \"./reduxStore\";\n\ntype InitialStateType = typeof initialState\n\ntype DialogType = {\n  id: number\n  name: string\n}\n\ntype MessageType = {\n  id: number\n  message: string\n  status: string\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\nconst SEND_MESSAGE = 'social-network/dialogs-page/SEND-MESSAGE';\n\nexport const actions = {\n  sendMessage: (text: string) => ({ type: SEND_MESSAGE, text }) as const,\n}\n\n\nconst initialState = {\n  dialogs: [\n    {id: 1, name: 'Aaaa'},\n    {id: 2, name: 'Bbb'},\n    {id: 3, name: 'Ccc'},\n  ] as Array<DialogType>,\n  messages: [\n    {id: 1, message: 'Hey!', status: 'from'},\n    {id: 2, message: 'How are you?', status: 'from'},\n    {id: 3, message: 'Im ok)', status: 'to'},\n  ] as Array<MessageType>,\n}\n\nconst dialogsPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SEND_MESSAGE: {\n      return {\n        ...state, \n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length + 1, \n            status: 'to',\n            message: action.text,\n          }\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default dialogsPageReducer;","import { SubscriberMessageHandlerType, SubscriberStatusChangedHandlerType } from './../redux/chatReducer';\n\n\nexport type MessageDataType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n}\n\ntype SubscribeEventType = 'messagesReceived' | 'statusChanged';\n\n\n\nlet subscribers = {\n  'messagesReceived': [] as SubscriberMessageHandlerType[],\n  'statusChanged': [] as SubscriberStatusChangedHandlerType[],\n};\n\n// @ts-ignore\nwindow.subscribers = subscribers;\n\nlet wsChannel: WebSocket | null = null;\n\nlet timerId: NodeJS.Timeout; \n\n\n\nconst onOpenWsChannel = () => {\n  subscribers.statusChanged.forEach((item) => item(true));\n};\n\nconst onCloseWsChannel = () => {\n  subscribers.statusChanged.forEach((item) => item(false));\n  timerId = setTimeout(() => {\n    createWsChannel()\n  }, 3000)\n};\n\nconst onMessageWsChannel = (e: MessageEvent) => {\n  const newMessages: Array<MessageDataType> = JSON.parse(e.data);\n  subscribers.messagesReceived.forEach((item) => item(newMessages));\n};\n\n\n\nconst cleanup = () => {\n  clearTimeout(timerId);\n  wsChannel?.removeEventListener('open', onOpenWsChannel);\n  wsChannel?.removeEventListener('close', onCloseWsChannel);\n  wsChannel?.removeEventListener('message', onMessageWsChannel);\n}\n\nconst createWsChannel = () => {\n  cleanup();\n  wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  wsChannel.addEventListener('open', onOpenWsChannel);\n  wsChannel.addEventListener('close', onCloseWsChannel);\n  wsChannel.addEventListener('message', onMessageWsChannel);\n}\n\n\n\nexport const chatApi = {\n  start() {\n    createWsChannel();\n  },\n\n  stop() {\n    cleanup();\n    wsChannel?.close();\n    subscribers.statusChanged.forEach((item) => item(false));\n  },\n\n  subscribe(event: SubscribeEventType, callback: SubscriberMessageHandlerType | SubscriberStatusChangedHandlerType) {\n    event === 'messagesReceived' && subscribers[event].push(callback as SubscriberMessageHandlerType);\n    event === 'statusChanged' && subscribers[event].push(callback as SubscriberStatusChangedHandlerType);\n  },\n\n  unsubscribe(event: SubscribeEventType, callback: SubscriberMessageHandlerType | SubscriberStatusChangedHandlerType) {\n    if (event === 'messagesReceived') {\n      subscribers[event] = subscribers[event].filter((item) => item !== callback);\n    }\n    if (event === 'statusChanged') {\n      subscribers[event] = subscribers[event].filter((item) => item !== callback);\n    }\n  },\n\n  send(message: string) {\n    wsChannel?.send(message);\n  }\n}\n","import { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { chatApi, MessageDataType } from \"../api/chatApi\";\nimport { InferActionsType, RootStateType } from \"./reduxStore\";\n\n\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsType<typeof actions>;\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\nexport type SubscriberMessageHandlerType = (messages: MessageDataType[]) => void;\nexport type SubscriberStatusChangedHandlerType = (status: boolean) => void;\n\n\n\n\nconst SET_MESSAGES = 'social-network/auth/SET_MESSAGES';\nconst SET_CHANNEL_STATUS = 'social-network/auth/SET_CHANNEL_STATUS';\n\n\nconst actions = {\n  setMessages: (messages: MessageDataType[]) => ({ type: SET_MESSAGES, messages } as const),\n  setChannelStatus: (status: boolean) => ({ type: SET_CHANNEL_STATUS, status } as const),\n}\n\n\n\nlet _subscriberMessageHandler: SubscriberMessageHandlerType;\nlet _subscriberStatusChangedHendler: SubscriberStatusChangedHandlerType;\n\nexport const startWsChannelListeningThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    chatApi.start();\n    _subscriberMessageHandler = (messages: MessageDataType[]) => {\n      dispatch(actions.setMessages(messages));\n    };\n    _subscriberStatusChangedHendler = (status: boolean) => {\n      dispatch(actions.setChannelStatus(status));\n    };\n    chatApi.subscribe('messagesReceived', _subscriberMessageHandler);\n    chatApi.subscribe('statusChanged', _subscriberStatusChangedHendler);\n  }\n}\n\nexport const stopWsChannelListeningThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    chatApi.stop();\n    chatApi.unsubscribe('messagesReceived', _subscriberMessageHandler);\n    chatApi.unsubscribe('statusChanged', _subscriberStatusChangedHendler);\n    dispatch(actions.setMessages([]));\n  };\n}\n\nexport const sendMessage = (message: string) => {\n  chatApi.send(message);\n};\n\n\n\n\nconst initialState = {\n  messages: [] as MessageDataType[],\n  channelStatus: false,\n}\n\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case SET_MESSAGES:\n      return {\n        ...state,\n        messages: action.messages.length > 1 ? action.messages : [...state.messages, ...action.messages],\n      };\n\n    case SET_CHANNEL_STATUS:\n      return {\n        ...state,\n        channelStatus: action.status,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\nexport default chatReducer;","import axios from \"axios\";\n\nexport type OperationResultType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n}\n\nexport const instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0',\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"9d799735-d786-4c1b-bde9-09779c3bba07\" // ddr9626@yandex.ru\n    // \"API-KEY\": \"036c44c9-5c4a-4e50-8bd2-abc9e86b54f0\" // art9626@mail.ru\n  },\n});","import { LoginFormDataType } from './../redux/authReducer';\nimport { instance, OperationResultType } from './indexApi';\n\n\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n  CapthaIsRequired = 10,\n}\n\ntype LogautResponseType = {\n  resultCode: number;\n}\n\ntype AuthUserDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype LoginUserDataType = {\n  userId: number\n}\n\nexport const authAPI = {\n  getAuthUserData: () => {\n    return instance.get<OperationResultType<AuthUserDataType>>('/auth/me').then(res => res.data);\n  },\n\n  login: (formData: LoginFormDataType) => {\n    return instance.post<OperationResultType<LoginUserDataType>>('/auth/login', formData).then(res => res.data);\n  },\n\n  logout: () => {\n    return instance.post<LogautResponseType>('/auth/logout');\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { getAuthUser } from \"./authReducer\";\n\n\ntype InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\n\n\nconst INIT_SUCCESS = 'social-network/app/INIT_SUCCESS';\n\nconst actions = {\n  initSuccess: () => ({ type: INIT_SUCCESS }) as const,\n}\n\n\n\n\nexport const initAppThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    dispatch(getAuthUser())\n      .then(() => {\n        dispatch(actions.initSuccess())\n      });\n  }\n}\n\n\n\nconst initialState = {\n  init: false,\n}\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case INIT_SUCCESS:\n      return {\n        ...state,\n        init: true,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\n\n\n\nexport default appReducer;","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport authReducer from './authReducer';\nimport dialogsPageReducer from './dialogsPageReducer';\nimport profilePageReducer from './profilePageReducer';\nimport usersPageReducer from './usersPageReducer';\nimport thunkMiddleware from 'redux-thunk'\nimport appReducer from './appReducer';\nimport { reducer as formReducer } from 'redux-form'\nimport chatReducer from './chatReducer';\n\nconst rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  usersPage: usersPageReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n});\n\n// Создание store с расширением Redux Devtools\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// Создание store\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n\n// Определяем тип state по возвращаемому объекту из метода getState\nexport type RootStateType = ReturnType<typeof store.getState>\n\n// Определяем тип state по возвращаемому объекту из функции rootReducer \n// (возвращает она тоже самое, что и метот getState, потому что rootReducer - это функция принимающая глобальный state и возвращающая его)\n// export type RootStateType = ReturnType<typeof rootReducer>\n\n\n\n// Динамически определяем тип actions\n// type InferActionCreatersType<T> = T extends {[key: string]: infer U} ? U : never;\n// export type InferActionsType<T extends {[key: string]: (...arg: any) => any}> = ReturnType<InferActionCreatersType<T>>;\n\n// То же самое в укороченной записи\nexport type InferActionsType<T> = T extends {[key: string]: (...arg: any) => infer U} ? U : never;\n\n\nexport default store;","import { Alert, Snackbar } from '@mui/material';\nimport React from 'react';\n\n\n\n\n\nconst Error: React.FC<{ setErrorMessage: React.Dispatch<React.SetStateAction<string | null>> }> = ({ children, setErrorMessage }) => {\n\n  const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setErrorMessage(null);\n  };\n\n  return (\n    <Snackbar\n      open={true}\n      autoHideDuration={3000}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n    >\n      <Alert onClose={handleClose} severity=\"error\">\n        {children}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default Error; ","import { createTheme, ThemeProvider } from '@mui/material';\nimport React, { createContext, useMemo, useState } from 'react';\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => { } });\n\nexport const ColorTheme: React.FC = ({ children }) => {\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  const colorMode = useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = createTheme({\n    palette: { \n      mode,\n    },\n  });\n\n  \n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};","import { AppBar, Avatar, Button, IconButton, Toolbar, Typography, useTheme } from '@mui/material';\nimport React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { logoutUserThunk } from '../../redux/authReducer';\nimport { getAuth } from '../../redux/authSelecrors';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { RootStateType } from '../../redux/reduxStore';\nimport { ColorModeContext } from '../common/ColorTheme';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\ntype PropsType = {\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Header: React.FC<PropsType> = React.memo(({ toggleNavbar }) => {\n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n  const userData = useSelector(getAuth);\n  const avatar = useSelector((state: RootStateType) => state.profilePage.userProfile?.photos.small)\n  const { isAuth, login } = userData;\n\n  const dispatch = useDispatch();\n\n  const logoutUser = () => dispatch(logoutUserThunk());\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton\n          onClick={toggleNavbar(true)}\n          size=\"large\"\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          sx={{ mr: 'auto' }}\n        >\n          <MenuIcon />\n        </IconButton>\n        {\n          isAuth === 'authorized'\n            ? <>\n              <Avatar src={avatar as string} alt='User avatar' sx={{ mr: 3 }} />\n              <Typography sx={{ mr: 5 }}>\n                {login}\n              </Typography>\n              <Button variant=\"contained\" color='error' onClick={logoutUser}>Logout</Button>\n            </>\n            : <Link to='/login'>Login</Link>\n        }\n        <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\n          {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n\n  )\n});","import React from 'react';\nimport { NavLink, NavLinkProps, useLocation } from 'react-router-dom';\nimport { Divider, Drawer, List, ListItem, ListItemText } from '@mui/material';\nimport { Box } from '@mui/system';\n\ntype PropsType = {\n  navbarStatus: boolean;\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Navbar: React.FC<PropsType> = ({ navbarStatus, toggleNavbar }) => {\n  return (\n    <Drawer\n      anchor='left'\n      open={navbarStatus}\n      onClose={toggleNavbar(false)}\n    >\n      <img style={{ height: '50px', width: '50px', marginRight: 'auto' }} src=\"https://i.imgur.com/BrIpiK6.png\" />\n      <Box\n        sx={{ width: 250 }}\n        onClick={toggleNavbar(false)}\n        component='nav'\n      >\n        <List>\n          {\n            ['Profile', 'Dialogs', 'Chat', 'News', 'Music', 'Users'].map((item) => {\n              return (\n                <ListItemLink \n                  key={item} \n                  to={`/${item.toLowerCase()}`} \n                  primary={item} \n                />\n              );\n            })\n          }\n        </List>\n        <Divider />\n      </Box>\n    </Drawer >\n  )\n}\n\n\ntype ListItemLinkPropsType = {\n  primary: string;\n  to: string;\n}\n\nconst ListItemLink = (props: ListItemLinkPropsType) => {\n  const location = useLocation();\n  const { primary, to } = props;\n  const isMatchPath = location.pathname === to;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef<HTMLAnchorElement, Omit<NavLinkProps, 'to'>>(function Link(\n        itemProps,\n        ref,\n      ) {\n        return <NavLink\n          to={to} ref={ref}\n          {...itemProps} role={undefined}\n        />;\n      }),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem \n        button component={renderLink}\n        sx={ (theme) => (isMatchPath ? { bgcolor: theme.palette.action.hover,  color: theme.palette.info.main } : {}) } \n      >\n        <ListItemText \n          primary={primary} \n        />\n      </ListItem>\n    </li>\n  );\n}","import { Box, Container, LinearProgress } from '@mui/material';\nimport React, { Suspense, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Header } from '../Header/Header';\nimport { Navbar } from '../Navbar/Navbar';\n\nexport const Layout: React.FC = React.memo(() => {\n  const [navbarStatus, setNavbarStatus] = useState(false);\n\n  const toggleNavbar = (status: boolean) => (e: React.MouseEvent) => setNavbarStatus(status);\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        bgcolor: 'background.default',\n        color: 'text.primary',\n      }}\n    >\n      <Header toggleNavbar={toggleNavbar} />\n      <Box\n        component='main'\n      >\n        <Suspense fallback={<LinearProgress color='primary' />}>\n          <Container maxWidth='md'>\n            <Outlet />\n          </Container>\n        </Suspense>\n        <Navbar navbarStatus={navbarStatus} toggleNavbar={toggleNavbar} />\n      </Box>\n    </Box>\n  );\n})","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { getIsAuth } from '../../redux/authSelecrors';\n\n\nexport const Privat: React.FC = ({ children }) => {\n\n  const isAuth = useSelector(getIsAuth);\n  const location = useLocation();\n\n  if (isAuth === 'notAuthorized') {\n    return <Navigate to='/login' state={{ from: location.pathname }} />\n  };\n\n  return (\n    <>\n      {children}\n    </>\n  );\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getInit = (state: RootStateType) => state.app.init;","import React, { lazy, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport Error from './components/common/Error/Error';\nimport { Layout } from './components/Layout/Layout';\nimport { Privat } from './components/common/Private';\nimport { initAppThunk } from './redux/appReducer';\nimport { getInit } from './redux/appSelectors';\nimport { getAuth } from './redux/authSelecrors';\nimport { LinearProgress, } from '@mui/material';\nimport { ColorTheme } from './components/common/ColorTheme';\n\n\nconst DialogsPage = lazy(() => import('./components/Dialogs/DialogsPage'));\nconst LoginPage = lazy(() => import('./components/Login/LoginPage'));\nconst ProfilePage = lazy(() => import('./components/Profile/ProfilePage'));\nconst UsersPage = lazy(() => import('./components/Users/UsersPage'));\nconst ChatPage = lazy(() => import('./components/Chat/ChatPage'));\nconst Music = lazy(() => import('./components/Music/Music'));\nconst News = lazy(() => import('./components/News/News'));\n\n\n\nconst App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState<null | string>(null);\n  const init = useSelector(getInit);\n  const auth = useSelector(getAuth);\n\n  const dispatch = useDispatch();\n\n  const initApp = () => dispatch(initAppThunk());\n\n  const catchUnhandledErrors = (e: PromiseRejectionEvent) => {\n    console.log(e);\n\n    setErrorMessage(e.reason.message);\n  }\n\n  useEffect(() => {\n    initApp();\n    window.addEventListener('unhandledrejection', catchUnhandledErrors);\n\n    return () => window.removeEventListener('unhandledrejection', catchUnhandledErrors);\n  }, [])\n\n\n\n\n  if (!init) return <LinearProgress color='primary' />;\n\n  return (\n    <ColorTheme>\n      <button onClick={() => {\n        Promise.reject(new TypeError(\"Ошибка!\"));\n      }}>\n        Error\n      </button>\n      {\n        errorMessage\n        && <Error\n          setErrorMessage={setErrorMessage}\n        >\n          {errorMessage}\n        </Error>\n      }\n\n      <Routes>\n        <Route path='/' element={<Layout />}>\n          <Route index element={auth.isAuth === 'authorized' ? <Navigate to='/profile' /> : <div>Registration</div>} />\n          <Route path='login' element={<LoginPage />} />\n          <Route\n            path='profile/'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='profile/:id'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='dialogs/*'\n            element={\n              <Privat>\n                <DialogsPage />\n              </Privat>\n            }\n          />\n          <Route\n            path='chat'\n            element={\n              <Privat>\n                <ChatPage />\n              </Privat>\n            }\n          />\n          <Route path='users' element={<UsersPage />} />\n          <Route path='news' element={<News />} />\n          <Route path='music' element={<Music />} />\n          <Route path='*' element={<div>Error 404 Page not found</div>} />\n        </Route>\n      </Routes>\n    </ColorTheme>\n  );\n}\n\nexport default App;","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, /* HashRouter */ } from 'react-router-dom';\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n\nReactDOM.render(\n\n  // HashRouter using only for git hab pages diploy!!!\n  // <HashRouter>\n  <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </BrowserRouter>,\n  // </HashRouter>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","export class FollowUnfollowError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'FollowUnfollowError';\n  }\n}\n\nexport class ProfileDataSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfileDataSaveError';\n  }\n}\n\nexport class ProfileStatusSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfileStatusSaveError';\n  }\n}\n\nexport class ProfilePhotoSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfilePhotoSaveError';\n  }\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getAuth = (state: RootStateType) => state.auth;\n\nexport const getIsAuth = (state: RootStateType) => state.auth.isAuth;\n\nexport const getCaptchaUrl = (state: RootStateType) => state.auth.captchaUrl;","import { instance } from \"./indexApi\";\n\n\ntype GetCaptchaResponseType = {\n  url: string;\n}\n\n\nexport const securityAPI = {\n  getCaptchaUrl: () => {\n    return instance.get<GetCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { authAPI, ResultCodesEnum } from \"../api/authApi\";\nimport { securityAPI } from \"../api/securityApi\";\n\n\ntype AuthUserDataType = {\n  email: string | null;\n  id: number | null;\n  login: string | null;\n}\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n}\n\nexport type FieldsNamesType = keyof LoginFormDataType;\n\n\nexport type IsAuthType = 'notAuthorized' | 'authorized';\n\nexport type InitialStateType = typeof initialState;\n\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>;\n\n\n\n\nconst SET_AUTH_USER_DATA = 'social-network/auth/SET_AUTH_USER_DATA';\nconst SET_CAPTCHA_URL = 'social-network/auth/SET_CAPTCHA_URL';\n\nconst actions = {\n  setAuthUserData: (data: AuthUserDataType, isAuth: IsAuthType) => ({ type: SET_AUTH_USER_DATA, data, isAuth }) as const,\n  setCaptchaUrl: (url: string) => ({ type: SET_CAPTCHA_URL, url }) as const,\n}\n\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\n\nexport const getAuthUser = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n\n    const response = await authAPI.getAuthUserData()\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData(response.data, 'authorized'));\n    }\n  }\n}\n\nexport const loginUserThunk = (formData: LoginFormDataType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType | FormAction>) => { // FormAction тип экшена, который возвращаее stopSubmit\n    const response = await authAPI.login(formData)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUser());\n    } else {\n      if (response.resultCode === ResultCodesEnum.CapthaIsRequired) {\n        dispatch(setCaptchaUrl());\n      }\n      dispatch(stopSubmit('login', { _error: response.messages[0] }));\n    }\n  }\n}\n\nexport const logoutUserThunk = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData({ id: null, login: null, email: null }, 'notAuthorized'));\n    }\n  }\n}\n\nconst setCaptchaUrl = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await securityAPI.getCaptchaUrl();\n    dispatch(actions.setCaptchaUrl(response.url));\n  }\n}\n\nconst initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: 'notAuthorized' as IsAuthType,\n  captchaUrl: null as string | null,\n}\n\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isAuth: action.isAuth,\n      };\n\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.url,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\nexport default authReducer;"],"sourceRoot":""}