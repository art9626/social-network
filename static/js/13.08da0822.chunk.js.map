{"version":3,"sources":["redux/chatSelecror.ts","components/Chat/ChatPage.tsx"],"names":["getMessages","state","chat","messages","getChannelStatus","channelStatus","ChatPage","React","memo","dispatch","useDispatch","useEffect","startWsChannelListeningThunk","stopWsChannelListeningThunk","Box","sx","display","flexDirection","justifyContent","height","paddingBottom","MessagesList","SendMessageForm","useSelector","messagesAnchor","useRef","useState","scrollIsActive","setScrollIsActive","current","scrollIntoView","List","width","margin","padding","paddingTop","color","overflowY","onScroll","e","currentTarget","scrollHeight","clientHeight","scrollTop","map","item","index","Message","messageData","ref","photo","userName","message","userId","isOwner","getAuth","id","ListItem","alignSelf","maxWidth","marginBottom","backgroundColor","borderRadius","ListItemAvatar","to","Avatar","src","alt","style","ListItemText","primary","secondary","Typography","component","variant","newMessage","setNewMessage","onSubmit","preventDefault","sendMessage","TextField","onChange","target","value","name","Button","type","endIcon","disabled"],"mappings":"sPAEaA,EAAc,SAACC,GAAD,OAA0BA,EAAMC,KAAKC,UAEnDC,EAAmB,SAACH,GAAD,OAA0BA,EAAMC,KAAKG,e,iCCS/DC,EAAqBC,IAAMC,MAAK,WACpC,IAAMC,EAAWC,cAcjB,OATAC,qBAAU,WAGR,OANoCF,EAASG,eAMtC,WAL4BH,EAASI,kBAQ3C,IAID,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,OAAQ,qBACRC,cAAe,QANnB,UASE,cAACC,EAAD,IACA,cAACC,EAAD,UAQAD,EAAyBd,IAAMC,MAAK,WACxC,IAAML,EAAWoB,YAAYvB,GACvBwB,EAAiBC,iBAAuB,MAC9C,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAmBA,OANAjB,qBAAU,WAAO,IAAD,EACdgB,IAAc,UAAIH,EAAeK,eAAnB,OAAI,EAAwBC,oBACzC,CAAC3B,IAKF,eAAC4B,EAAA,EAAD,CACEhB,GAAI,CACFC,QAAS,OACTC,cAAe,SACfe,MAAO,OACPb,OAAQ,OACRc,OAAQ,IACRC,QAAS,SACTC,WAAY,OACZC,MAAO,UACPC,UAAW,UAEbC,SA9BoB,SAACC,GACvB,MAAkDA,EAAEC,cAApD,EAAQC,aAAR,EAAsBC,aAAtB,EAAoCC,UAEY,GAC9ChB,GAAkBC,GAAkB,GAEpCD,GAAkBC,GAAkB,IAYtC,UAeIzB,EAASyC,KAAI,SAACC,EAAuBC,GACnC,OACE,cAACC,EAAD,CAAqBC,YAAaH,GAApBC,MAIpB,qBAAKG,IAAKzB,UAWVuB,EAAsCxC,IAAMC,MAAK,YAAsB,IAAnBwC,EAAkB,EAAlBA,YAChDE,EAAqCF,EAArCE,MAAOC,EAA8BH,EAA9BG,SAAUC,EAAoBJ,EAApBI,QAASC,EAAWL,EAAXK,OAE5BC,EAAUD,IADD9B,YAAYgC,KAAnBC,GAGR,OACE,eAACC,EAAA,EAAD,CACE1C,GAAI,CACF2C,UAAWJ,EAAU,WAAa,aAClCtB,MAAO,cACP2B,SAAU,QACVC,aAAc,OACdC,gBAAiBP,EAAU,gBAAkB,eAC7CQ,aAAc,OAPlB,UAUE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAASC,GAAE,mBAAcX,GAAzB,SACE,cAACY,EAAA,EAAD,UAEIf,GAAS,qBAAKgB,IAAG,UAAKhB,GAASiB,IAAI,SAASC,MAAO,CAAEpC,MAAO,OAAQb,OAAQ,gBAKpF,cAACkD,EAAA,EAAD,CACEC,QAASnB,EACToB,UACE,mCACE,cAACC,EAAA,EAAD,CACEC,UAAU,OACVrC,MAAM,QACNsC,QAAQ,QAHV,SAKGtB,cAYT9B,EAA4Bf,IAAMC,MAAK,WAC3C,MAAoCkB,mBAAS,IAA7C,mBAAOiD,EAAP,KAAmBC,EAAnB,KACMvE,EAAgBkB,YAAYnB,GAYlC,OACE,eAACU,EAAA,EAAD,CACE2D,UAAU,OACVI,SAbiB,SAACtC,GACpBA,EAAEuC,iBAEGH,IAGLI,YAAYJ,GACZC,EAAc,MAOZ7D,GAAI,CACFC,QAAS,OACTC,cAAe,UALnB,UAQE,cAAC+D,EAAA,EAAD,CACEC,SAAU,SAAC1C,GAAD,OAAOqC,EAAcrC,EAAE2C,OAAOC,QACxCT,QAAQ,WACRS,MAAOR,EACPS,KAAK,aACLrE,GAAI,CACFiB,MAAO,OACP4B,aAAc,SAIlB,cAACyB,EAAA,EAAD,CACEC,KAAK,SACLZ,QAAQ,YACRa,QAAS,cAAC,IAAD,IACTC,UAAWnF,EAJb,wBAYSC","file":"static/js/13.08da0822.chunk.js","sourcesContent":["import { RootStateType } from './reduxStore';\n\nexport const getMessages = (state: RootStateType) => state.chat.messages;\n\nexport const getChannelStatus = (state: RootStateType) => state.chat.channelStatus;","import { Avatar, Box, Button, List, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@mui/material';\nimport React, { FormEvent, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MessageDataType } from '../../api/chatApi';\nimport { getAuth } from '../../redux/authSelecrors';\nimport { stopWsChannelListeningThunk, sendMessage, startWsChannelListeningThunk } from '../../redux/chatReducer';\nimport { getChannelStatus, getMessages } from '../../redux/chatSelecror';\nimport SendIcon from '@mui/icons-material/Send';\nimport { NavLink } from 'react-router-dom';\n\n\n\n\nconst ChatPage: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n\n  const startWsChannelListening = () => dispatch(startWsChannelListeningThunk());\n  const stopWsChannelListening = () => dispatch(stopWsChannelListeningThunk());\n\n  useEffect(() => {\n    startWsChannelListening();\n\n    return () => {\n      stopWsChannelListening();\n    }\n  }, []);\n\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'calc(100vh - 64px)',\n        paddingBottom: '20px',\n      }}\n    >\n      <MessagesList />\n      <SendMessageForm />\n    </Box>\n  );\n});\n\n\n\n\nconst MessagesList: React.FC = React.memo(() => {\n  const messages = useSelector(getMessages);\n  const messagesAnchor = useRef<HTMLDivElement>(null);\n  const [scrollIsActive, setScrollIsActive] = useState(true);\n\n  const onScrollHandler = (e: React.UIEvent<HTMLUListElement, UIEvent>) => {\n    const { scrollHeight, clientHeight, scrollTop } = e.currentTarget;\n\n    if ((scrollHeight - clientHeight) - scrollTop > 50) {\n      scrollIsActive && setScrollIsActive(false);\n    } else {\n      scrollIsActive || setScrollIsActive(true);\n    }\n\n  }\n\n  useEffect(() => {\n    scrollIsActive && messagesAnchor.current?.scrollIntoView();\n  }, [messages])\n\n\n\n  return (\n    <List\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        height: '100%',\n        margin: '0',\n        padding: '0 30px',\n        paddingTop: '20px',\n        color: 'grey.50',\n        overflowY: 'scroll',\n      }}\n      onScroll={onScrollHandler}\n    >\n      {\n        messages.map((item: MessageDataType, index: number) => {\n          return (\n            <Message key={index} messageData={item} />\n          );\n        })\n      }\n      <div ref={messagesAnchor}></div>\n    </List>\n  );\n});\n\n\n\ntype MessagePropsType = {\n  messageData: MessageDataType;\n}\n\nconst Message: React.FC<MessagePropsType> = React.memo(({ messageData }) => {\n  const { photo, userName, message, userId } = messageData;\n  const { id } = useSelector(getAuth);\n  const isOwner = userId === id;\n\n  return (\n    <ListItem\n      sx={{\n        alignSelf: isOwner ? 'flex-end' : 'flex-start',\n        width: 'fit-content',\n        maxWidth: '300px',\n        marginBottom: '20px',\n        backgroundColor: isOwner ? 'success.light' : 'success.dark',\n        borderRadius: '5px',\n      }}\n    >\n      <ListItemAvatar>\n        <NavLink to={`/profile/${userId}`}>\n          <Avatar>\n            {\n              photo && <img src={`${photo}`} alt=\"Avatar\" style={{ width: '50px', height: '50px' }} />\n            }\n          </Avatar>\n        </NavLink>\n      </ListItemAvatar>\n      <ListItemText\n        primary={userName}\n        secondary={\n          <>\n            <Typography\n              component='span'\n              color='white'\n              variant='body2'\n            >\n              {message}\n            </Typography>\n          </>\n        }\n      />\n    </ListItem>\n  );\n});\n\n\n\n\nconst SendMessageForm: React.FC = React.memo(() => {\n  const [newMessage, setNewMessage] = useState('');\n  const channelStatus = useSelector(getChannelStatus);\n\n  const onSubmitForm = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!newMessage) {\n      return;\n    }\n    sendMessage(newMessage);\n    setNewMessage('');\n  }\n\n  return (\n    <Box\n      component='form'\n      onSubmit={onSubmitForm}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField\n        onChange={(e) => setNewMessage(e.target.value)}\n        variant=\"outlined\"\n        value={newMessage}\n        name=\"newMessage\"\n        sx={{\n          width: '100%',\n          marginBottom: '5px',\n        }}\n      />\n\n      <Button\n        type='submit'\n        variant=\"contained\"\n        endIcon={<SendIcon />}\n        disabled={!channelStatus}\n      >\n        Send\n      </Button>\n    </Box>\n  );\n});\n\nexport default ChatPage;"],"sourceRoot":""}