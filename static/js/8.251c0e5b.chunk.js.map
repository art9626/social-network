{"version":3,"sources":["components/common/Preloader/Preloader.tsx","components/common/Preloader/Preloader.module.css","assets/images/user-icon.jpeg","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","redux/profileSelecrors.ts","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePage.tsx"],"names":["Preloader","className","classes","ldsRipple","module","exports","ProfileDataForm","initialValues","deactiveEditMode","setProfileData","onSubmit","values","setSubmitting","validate","errors","fullName","aboutMe","regExp","Object","keys","contacts","forEach","item","test","props","isSubmitting","touched","name","type","map","index","autoComplete","component","disabled","onClick","getUserProfile","state","profilePage","userProfile","getUserStatus","userStatus","getInWaiting","inWaiting","getErrorMessages","errorMessages","getProfileInfoEditMode","profileInfoEditMode","getStatusEditMode","statusEditMode","ProfileData","activeEditMode","isOwner","lookingForAJob","lookingForAJobDescription","contactName","contactValue","Contact","href","ProfileStatus","useSelector","dispatch","useDispatch","setEditMode","fieldName","actions","toggleEditMode","useEffect","Typography","onDoubleClick","ProfileStatusForm","text","setStatusThunk","length","ProfilePhoto","photos","errorMessage","onSetPhotoErrorMessage","handleClose","event","reason","errorText","errorName","setError","Box","sx","pb","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","Skeleton","mb","variant","width","height","fontSize","src","large","userIcon","style","alt","htmlFor","display","id","onChange","e","photo","target","files","setPhotoThunk","Button","color","ProfileInfo","React","memo","editMode","Grid","container","pt","xl","lg","md","sm","xs","preventDefault","data","setProfileDataThunk","ProfilePage","useParams","auth","getAuth","currentUserId","isAuth","getCurrentUserData","getProfileThunk","getProfile","getStatusThunk","getStatus"],"mappings":"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","file":"static/js/8.251c0e5b.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from './Preloader.module.css';\n\nconst Preloader: React.FC = () => {\n  return (\n    <div className={classes.ldsRipple}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  )\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRipple\":\"Preloader_ldsRipple__39kqY\"};","export default __webpack_public_path__ + \"static/media/user-icon.506e3070.jpeg\";","import React, { MouseEvent } from 'react';\nimport { ContactsType, UserProfileType } from '../../../../redux/profilePageReducer';\nimport { ErrorMessage, Field, FieldArray, Form, Formik, FormikErrors, FormikHelpers, FormikProps } from 'formik';\n\n\n\ntype PropsType = {\n  initialValues: UserProfileType;\n  deactiveEditMode: (e: MouseEvent<HTMLButtonElement>) => void;\n  setProfileData: (data: UserProfileType) => void;\n}\n\n\n\n\nexport const ProfileDataForm: React.FC<PropsType> = ({ initialValues, deactiveEditMode, setProfileData }) => {\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values: UserProfileType, { setSubmitting }: FormikHelpers<UserProfileType>) => {\n        setProfileData(values);\n        setSubmitting(false);\n      }}\n      validate={(values: UserProfileType) => {\n        const errors: FormikErrors<UserProfileType> = {};\n\n        if (!values.fullName) {\n          errors.fullName = 'The FullName field is required';\n        }\n\n        if (!values.aboutMe) {\n          errors.aboutMe = 'The AboutMe field is required';\n        }\n\n        const regExp = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\n\n        Object.keys(values.contacts).forEach((item) => {\n          if (values.contacts[item as keyof ContactsType] && !regExp.test(values.contacts[item as keyof ContactsType])) {\n            if (!errors.contacts) {\n              errors.contacts = {};\n            }\n            errors.contacts[item as keyof ContactsType] = 'Invalid URL address';\n          }\n        })\n        return errors;\n      }}\n    >\n      {\n        (props: FormikProps<UserProfileType>) => {\n\n          const { values, isSubmitting, errors, touched } = props;\n\n          return (\n            <Form>\n              <label>\n                Full Name\n                <Field\n                  name='fullName'\n                  type='text'\n                />\n              </label>\n              {errors.fullName && touched.fullName && <div>{errors.fullName}</div>}\n              <label>\n                About me\n                <Field\n                  name='aboutMe'\n                  type='text'\n                />\n              </label>\n              {errors.aboutMe && touched.aboutMe && <div>{errors.aboutMe}</div>}\n              <label>\n                Looking for a job\n                <Field\n                  name='lookingForAJob'\n                  type='checkbox'\n                />\n              </label>\n              <label>\n                My skills\n                <Field\n                  name='lookingForAJobDescription'\n                  type='text'\n                />\n              </label>\n              <ul>\n                <h3>Contacts</h3>\n                <FieldArray name='contacts'>\n                  {\n                    () => {\n                      return (\n                        <>\n                          {\n                            Object.keys(values.contacts).map((item, index) => {\n                              return (\n                                <li key={index}>\n                                  <span>{item}: </span>\n                                  <Field\n                                    name={`contacts.${item}`}\n                                    type='text'\n                                    autoComplete='off'\n                                  />\n                                  <ErrorMessage\n                                    name={`contacts.${item}`}\n                                    component='div'\n                                    className='field-error'\n                                  />\n                                </li>\n                              );\n                            })\n                          }\n                        </>\n                      );\n                    }\n                  }\n                </FieldArray>\n              </ul>\n\n              <button type='submit' disabled={isSubmitting}>Done</button>\n              <button onClick={deactiveEditMode}>Close</button>\n\n            </Form>\n          );\n        }\n      }\n    </Formik>\n  );\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getUserProfile = (state: RootStateType) => state.profilePage.userProfile;\n\nexport const getUserStatus = (state: RootStateType) => state.profilePage.userStatus;\n\nexport const getPosts = (state: RootStateType) => state.profilePage.posts;\n\nexport const getInWaiting = (state: RootStateType) => state.profilePage.inWaiting;\n\nexport const getErrorMessages = (state: RootStateType) => state.profilePage.errorMessages;\n\nexport const getProfileInfoEditMode = (state: RootStateType) => state.profilePage.profileInfoEditMode;\n\nexport const getStatusEditMode = (state: RootStateType) => state.profilePage.statusEditMode;","import React from 'react';\nimport { ContactsType, UserProfileType } from '../../../../redux/profilePageReducer';\n\ntype PropsType = {\n  userProfile: UserProfileType;\n  activeEditMode: () => void;\n  isOwner: boolean;\n}\n\nexport const ProfileData: React.FC<PropsType> = ({ userProfile, activeEditMode, isOwner }) => {\n\n  const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts } = userProfile;\n\n  return (\n    <>\n      <h2>{fullName}</h2>\n      <p>About me: {aboutMe}</p>\n      <p>Looking for a job: {lookingForAJob ? 'Yes' : 'No'}</p>\n      {\n        lookingForAJob &&\n        <p>My skills: {lookingForAJobDescription}</p>\n      }\n      <h3>Contacts</h3>\n      <ul>\n        {\n          Object.keys(contacts)\n            .map((item: string) => {\n              return <Contact key={item} contactName={item} contactValue={contacts[item as keyof ContactsType]} />\n            })\n        }\n      </ul>\n      {\n        isOwner && <button onClick={activeEditMode}>Edit</button>\n      }\n    </>\n  );\n}\n\ntype ContactPropsType = {\n  contactName: string;\n  contactValue: string;\n}\n\nconst Contact: React.FC<ContactPropsType> = ({ contactName, contactValue }) => {\n  return (\n    <li>\n      {contactName}: {<a href={`http://${contactValue}`}>{contactValue}</a>}\n    </li>\n  );\n}","import { Typography, useTheme } from '@mui/material';\nimport { Field, Form, Formik, FormikErrors, FormikHelpers, FormikProps } from 'formik';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, setStatusThunk } from '../../../../redux/profilePageReducer';\nimport { getErrorMessages, getStatusEditMode, getUserStatus } from '../../../../redux/profileSelecrors';\ntype PropsType = {\n  isOwner: boolean;\n}\n\nexport const ProfileStatus: React.FC<PropsType> = ({ isOwner }) => {\n  const userStatus = useSelector(getUserStatus);\n  const statusEditMode = useSelector(getStatusEditMode);\n  const dispatch = useDispatch();\n\n  const setEditMode = (state: boolean, fieldName: string) => dispatch(actions.toggleEditMode(state, fieldName));\n\n\n  const activateEditMode = () => {\n    if (isOwner) {\n      setEditMode(true, 'statusEditMode')\n    }\n  };\n\n  useEffect(() => {\n    setEditMode(false, 'statusEditMode')\n  }, [])\n\n  return (\n    <div>\n      {\n        statusEditMode\n          ? <ProfileStatusForm />\n          : <Typography \n              onDoubleClick={activateEditMode}\n              component='span'\n            >\n              {userStatus || '---'}\n            </Typography>\n      }\n    </div>\n  )\n}\n\n\n\n\n\n\ntype InitialValuesType = {\n  userStatus: string;\n}\n\nconst ProfileStatusForm: React.FC = () => {\n\n  const userStatus = useSelector(getUserStatus);\n  const dispatch = useDispatch();\n  const setStatus = (text: string) => dispatch(setStatusThunk(text));\n\n  const initialValues: InitialValuesType = { userStatus: userStatus === null ? '' : userStatus };\n\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values: InitialValuesType, { setSubmitting }: FormikHelpers<InitialValuesType>) => {\n        setStatus(values.userStatus);\n        setSubmitting(false);\n      }}\n      validate={(values: InitialValuesType) => {\n        const errors: FormikErrors<InitialValuesType> = {};\n        \n        if (values.userStatus.length > 300) {\n          errors.userStatus = 'Status max length 300 symbols';\n        }\n\n        return errors;\n      }}\n    >\n      {\n        (props: FormikProps<InitialValuesType>) => {\n          const { errors, touched, isSubmitting } = props;\n\n          return (\n            <Form>\n              <Field \n                name='userStatus'\n                type='text'\n                autoComplete='off'\n              />\n              <button type='submit' disabled={isSubmitting}>Save status</button>\n              { errors.userStatus && touched.userStatus && <div>{errors.userStatus}</div> }\n            </Form>\n          );\n        }\n      }\n    </Formik>\n  );\n}","import { Alert, Box, Button, IconButton, Skeleton, Snackbar } from '@mui/material';\nimport React, { ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport userIcon from '../../../../assets/images/user-icon.jpeg'\nimport { actions, setPhotoThunk, UserProfileType } from '../../../../redux/profilePageReducer';\nimport { getErrorMessages, getInWaiting } from '../../../../redux/profileSelecrors';\nimport CloseIcon from '@mui/icons-material/Close';\n\ntype PropsType = {\n  userProfile: UserProfileType;\n  isOwner: boolean;\n}\n\n\n\nexport const ProfilePhoto: React.FC<PropsType> = ({ isOwner, userProfile }) => {\n  const inWaiting = useSelector(getInWaiting);\n  const errorMessages = useSelector(getErrorMessages);\n  const { photos } = userProfile;\n  const errorMessage = errorMessages.onSetPhotoErrorMessage;\n\n  const dispatch = useDispatch()\n\n  const setPhoto = (photo: File) => dispatch(setPhotoThunk(photo));\n  const setError = (errorText: string | null, errorName: string) => dispatch(actions.setError(errorText, errorName));\n\n  const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setError(null, 'onSetPhotoErrorMessage');\n  };\n\n\n  const onChooseFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setPhoto(e.target.files[0]);\n    }\n  }\n\n\n  return (\n    <Box\n      sx={{ pb: 3 }}\n    >\n      {\n        errorMessage\n          && <Snackbar\n              open={true}\n              autoHideDuration={6000}\n              onClose={handleClose}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            >\n              <Alert onClose={handleClose} severity=\"error\">\n                {errorMessage}\n              </Alert>\n            </Snackbar>\n      }\n      {\n        inWaiting\n          ? <Skeleton\n              sx={{ mb: 2 }} variant='rectangular'\n              width={300}\n              height={300}\n            />\n          : <Box\n              sx={{ mb: 2, fontSize: 0 }}\n            >\n              <img\n                src={photos.large || userIcon}\n                style={{ width: '300px', height: '300px' }}\n                alt='User photo'\n              />\n            </Box>\n      }\n      {\n        isOwner\n          && <label htmlFor='uploadPhoto'>\n              <input\n                style={{ display: 'none' }}\n                id='uploadPhoto'\n                type='file'\n                onChange={onChooseFile}\n              />\n\n              <Button \n                color='primary' \n                variant='contained' \n                component='span' \n                disabled={inWaiting}\n              >\n                Upload photo\n              </Button>\n            </label>\n      }\n    </Box>\n  );\n}","import React, { MouseEvent, useEffect } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport { ProfileDataForm } from './ProfileDataForm/ProfileDataForm';\nimport { actions, setProfileDataThunk, UserProfileType } from '../../../redux/profilePageReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProfileInfoEditMode, getUserProfile } from '../../../redux/profileSelecrors';\nimport { ProfileData } from './ProfileData/ProfileData';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\nimport { Grid } from '@mui/material';\nimport { ProfilePhoto } from './ProfilePhoto/ProfilePhoto';\n\ntype PropsType = {\n  isOwner: boolean;\n}\n\n\nexport const ProfileInfo: React.FC<PropsType> = React.memo(({ isOwner }) => {\n\n  const userProfile = useSelector(getUserProfile);\n  const editMode = useSelector(getProfileInfoEditMode);\n\n  const dispatch = useDispatch();\n\n  const setProfileData = (data: UserProfileType) => dispatch(setProfileDataThunk(data));\n  const setEditMode = (state: boolean, fieldName: string) => dispatch(actions.toggleEditMode(state, fieldName));\n\n  useEffect(() => {\n    return () => {\n      setEditMode(false, 'profileInfoEditMode');\n    };\n  }, []);\n\n\n  const activeEditMode = () => {\n    setEditMode(true, 'profileInfoEditMode');\n  }\n\n  const deactiveEditMode = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setEditMode(false, 'profileInfoEditMode');\n  }\n\n\n  return (\n    <>\n      {\n        userProfile\n          ? <Grid\n              container\n              sx={{ pt: 5 }}\n            >\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <ProfilePhoto userProfile={userProfile} isOwner={isOwner} />\n                <ProfileStatus isOwner={isOwner} />\n              </Grid>\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                {\n                  editMode\n                    ? <ProfileDataForm\n                      initialValues={userProfile}\n                      deactiveEditMode={deactiveEditMode}\n                      setProfileData={setProfileData}\n                    />\n                    : <ProfileData\n                      userProfile={userProfile}\n                      activeEditMode={activeEditMode}\n                      isOwner={isOwner}\n                    />\n                }\n              </Grid>\n            </Grid>\n\n          : <Preloader />\n      }\n    </>\n  )\n});","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getAuth } from '../../redux/authSelecrors';\nimport { getProfileThunk, getStatusThunk } from '../../redux/profilePageReducer';\nimport { MyPosts } from './MyPosts/MyPosts';\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\n\n\nexport type SetErrorType = (errorText: string | null, errorName: string) => {\n  readonly type: \"social-network/profile/SET_ERROR\";\n  readonly errorText: string | null;\n  readonly errorName: string;\n};\n\n\n\n\n\nconst ProfilePage: React.FC = React.memo(() => {\n  let { id } = useParams();\n  const auth = useSelector(getAuth);\n  const dispatch = useDispatch();\n\n  const getProfile = (id: number | null) => dispatch(getProfileThunk(id));\n  const getStatus = (id: number) => dispatch(getStatusThunk(id));\n\n\n\n  let currentUserId: number | null = null;\n\n  if (id) {\n    currentUserId = +id;\n  }\n\n  if (!currentUserId) {\n    const { isAuth, id } = auth;\n    if (isAuth === 'authorized') {\n      currentUserId = id;\n    }\n  }\n\n  const isOwner = currentUserId === auth.id;\n\n\n  const getCurrentUserData = () => {\n    if (typeof currentUserId === 'number') {\n      getProfile(currentUserId);\n      getStatus(currentUserId);\n    }\n  }\n\n  useEffect(() => {\n    getCurrentUserData();\n  }, [currentUserId]);\n\n\n\n\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n      />\n      {/* <MyPosts /> */}\n    </div>\n  );\n});\n\n\n\nexport default ProfilePage;"],"sourceRoot":""}