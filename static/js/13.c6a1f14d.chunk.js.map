{"version":3,"sources":["assets/images/user-icon.jpeg","redux/profileSelecrors.ts","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","components/Profile/ProfileInfo/ProfileInfoPreloader.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePage.tsx"],"names":["getUserProfile","state","profilePage","userProfile","getUserStatus","userStatus","getInWaiting","inWaiting","getErrorMessages","errorMessages","getProfileInfoEditMode","profileInfoEditMode","getStatusEditMode","statusEditMode","getProfileDataIsSubmitting","profileDataIsSubmitting","ProfileDataForm","editMode","initialValues","deactiveEditMode","setProfileData","isSubmitting","useSelector","formik","useFormik","onSubmit","values","validate","errors","fullName","aboutMe","regExp","Object","keys","contacts","forEach","item","test","handleSubmit","touched","Modal","open","onClose","Box","component","sx","position","top","left","transform","width","maxHeight","bgcolor","borderRadius","boxShadow","p","overflowY","Typography","gutterBottom","variant","color","List","ListItem","TextField","fullWidth","name","label","value","onChange","handleChange","error","Boolean","helperText","autoComplete","multiline","rows","FormControlLabel","control","Checkbox","lookingForAJob","checked","lookingForAJobDescription","map","index","size","ButtonGroup","Button","type","disabled","onClick","ProfileData","activeEditMode","isOwner","arrayItems","description","ListItemText","primary","secondary","flexDirection","alignItems","contactName","contactValue","Contact","textDecoration","href","ProfileStatus","dispatch","useDispatch","setEditMode","fieldName","actions","toggleEditMode","useEffect","onDoubleClick","ProfileStatusForm","text","setSubmitting","setStatusThunk","length","mr","ProfilePhoto","photos","errorMessage","onSetPhotoErrorMessage","pb","Error","handleClose","event","reason","errorText","errorName","setError","Skeleton","mb","height","fontSize","src","large","userIcon","style","alt","htmlFor","display","id","e","photo","target","files","setPhotoThunk","ProfileInfoPreloaderLeft","ProfileInfoPreloaderRight","arr","ProfileInfo","React","memo","Grid","container","pt","xl","lg","md","sm","xs","preventDefault","data","setProfileDataThunk","ProfilePage","useParams","auth","getAuth","currentUserId","isAuth","getCurrentUserData","getProfileThunk","getProfile","getStatusThunk","getStatus"],"mappings":"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","file":"static/js/13.c6a1f14d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user-icon.506e3070.jpeg\";","import { RootStateType } from \"./reduxStore\";\n\nexport const getUserProfile = (state: RootStateType) => state.profilePage.userProfile;\n\nexport const getUserStatus = (state: RootStateType) => state.profilePage.userStatus;\n\nexport const getInWaiting = (state: RootStateType) => state.profilePage.inWaiting;\n\nexport const getErrorMessages = (state: RootStateType) => state.profilePage.errorMessages;\n\nexport const getProfileInfoEditMode = (state: RootStateType) => state.profilePage.profileInfoEditMode;\n\nexport const getStatusEditMode = (state: RootStateType) => state.profilePage.statusEditMode;\n\nexport const getProfileDataIsSubmitting = (state: RootStateType) => state.profilePage.profileDataIsSubmitting;","import React, { MouseEvent } from 'react';\nimport { ContactsType, UserProfileType } from '../../../../redux/profilePageReducer';\nimport { FormikErrors, useFormik } from 'formik';\nimport { Box, Button, ButtonGroup, Checkbox, FormControlLabel, List, ListItem, Modal, TextField, Typography } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { getProfileDataIsSubmitting } from '../../../../redux/profileSelecrors';\nimport { text } from 'stream/consumers';\n\ntype PropsType = {\n  editMode: boolean;\n  initialValues: UserProfileType;\n  deactiveEditMode: (e: MouseEvent<HTMLButtonElement>) => void;\n  setProfileData: (data: UserProfileType) => void;\n}\n\nexport const ProfileDataForm: React.FC<PropsType> = ({ editMode, initialValues, deactiveEditMode, setProfileData }) => {\n  const isSubmitting = useSelector(getProfileDataIsSubmitting);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: (values: UserProfileType) => {\n      setProfileData(values);\n    },\n    validate: (values: UserProfileType) => {\n      const errors: FormikErrors<UserProfileType> = {};\n\n      if (!values.fullName) {\n        errors.fullName = 'The Full Name field is required';\n      }\n\n      if (!values.aboutMe) {\n        errors.aboutMe = 'The AboutMe field is required';\n      }\n\n      const regExp = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/;\n\n      Object.keys(values.contacts).forEach((item) => {\n        if (values.contacts[item as keyof ContactsType] && !regExp.test(values.contacts[item as keyof ContactsType])) {\n          if (!errors.contacts) {\n            errors.contacts = {};\n          }\n          errors.contacts[item as keyof ContactsType] = 'Invalid URL address';\n        }\n      })\n      return errors;\n    }\n  })\n  const { handleSubmit, values, errors, touched } = formik;\n\n\n  return (\n\n    <Modal\n      open={editMode}\n      onClose={deactiveEditMode}\n    >\n      <Box\n        component='form'\n        onSubmit={handleSubmit}\n        sx={{\n          position: 'absolute' as 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: 500,\n          maxHeight: '80vh',\n          bgcolor: 'background.paper',\n          borderRadius: '5px',\n          boxShadow: 24,\n          p: 4,\n          overflowY: 'scroll',\n        }}\n      >\n        <Typography\n          gutterBottom\n          variant='h5'\n          component='h3'\n          color='primary'\n        >\n          Main info:\n        </Typography>\n        <List>\n          <ListItem>\n            <TextField\n              fullWidth\n              name=\"fullName\"\n              label='Full Name'\n              value={values.fullName}\n              onChange={formik.handleChange}\n              error={touched.fullName && Boolean(errors.fullName)}\n              helperText={touched.fullName && errors.fullName}\n              autoComplete='off'\n            />\n          </ListItem>\n          <ListItem>\n            <TextField\n              fullWidth\n              name=\"aboutMe\"\n              label='About Me'\n              value={values.aboutMe}\n              onChange={formik.handleChange}\n              error={touched.aboutMe && Boolean(errors.aboutMe)}\n              helperText={touched.aboutMe && errors.aboutMe}\n              autoComplete='off'\n              multiline\n              rows={3}\n            />\n          </ListItem>\n          <ListItem>\n            <FormControlLabel\n              sx={{\n                color: 'text.primary'\n              }}\n              onChange={formik.handleChange}\n              name=\"lookingForAJob\"\n              label='Looking for a job'\n              control={<Checkbox value={values.lookingForAJob} checked={values.lookingForAJob} />}\n            />\n          </ListItem>\n          <ListItem>\n            <TextField\n              fullWidth\n              name=\"lookingForAJobDescription\"\n              label='My Skills'\n              value={values.lookingForAJobDescription}\n              onChange={formik.handleChange}\n              error={touched.lookingForAJobDescription && Boolean(errors.lookingForAJobDescription)}\n              helperText={touched.lookingForAJobDescription && errors.lookingForAJobDescription}\n              autoComplete='off'\n              multiline\n              rows={3}\n            />\n          </ListItem>\n        </List>\n        <Typography\n          gutterBottom\n          variant='h5'\n          component='h3'\n          color='primary'\n        >\n          Contacts:\n        </Typography>\n        <List>\n          {\n            Object.keys(values.contacts).map((item, index) => {\n              return (\n                <ListItem key={index}>\n                  <TextField\n                    fullWidth\n                    name={`contacts.${item}`}\n                    value={values.contacts[item as keyof ContactsType]}\n                    label={item}\n                    onChange={formik.handleChange}\n                    error={errors.contacts && touched.contacts && touched.contacts[item as keyof ContactsType] && Boolean(errors.contacts[item as keyof ContactsType])}\n                    helperText={errors.contacts && touched.contacts && touched.contacts[item as keyof ContactsType] && errors.contacts[item as keyof ContactsType]}\n                    autoComplete='off'\n                    size=\"small\"\n                  />\n                </ListItem>\n              );\n            })\n          }\n        </List>\n        <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n          >\n            Submit\n          </Button>\n          <Button\n            onClick={deactiveEditMode}\n          >\n            Close\n          </Button>\n        </ButtonGroup>\n      </Box>\n    </Modal>\n  );\n\n}\n","import { Button, List, ListItem, ListItemText, Typography } from '@mui/material';\nimport React from 'react';\nimport { ContactsType, UserProfileType } from '../../../../redux/profilePageReducer';\n\ntype PropsType = {\n  userProfile: UserProfileType;\n  activeEditMode: () => void;\n  isOwner: boolean;\n}\n\nexport const ProfileData: React.FC<PropsType> = ({ userProfile, activeEditMode, isOwner }) => {\n\n  const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts } = userProfile;\n\n  const arrayItems = [\n    {\n      description: 'About me',\n      value: aboutMe,\n    },\n    {\n      description: 'Looking for a job',\n      value: lookingForAJob ? 'Yes' : 'No',\n    },\n    {\n      description: 'My skills',\n      value: lookingForAJobDescription,\n    },\n  ]\n\n  return (\n    <>\n      <Typography\n        component='h2'\n        variant='h1'\n        color='primary'\n      >\n        {fullName}\n      </Typography>\n      <List>\n        {\n          arrayItems.map((item, index) => {\n            return (\n              <ListItem key={index}>\n                <ListItemText\n                  primary={\n                    <Typography\n                      component='span'\n                      variant='h6'\n                      color='secondary'\n                    >\n                      {item.description}\n                    </Typography>\n                  }\n                  secondary={item.value}\n                />\n              </ListItem>\n            );\n          })\n        }\n        <ListItem\n          sx={{\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n          }}\n        >\n          <Typography\n            component='span'\n            variant='h6'\n            color='secondary'\n          >\n            Contacts\n          </Typography>\n          <List>\n            {\n              Object.keys(contacts)\n                .map((item: string) => {\n                  return <Contact key={item} contactName={item} contactValue={contacts[item as keyof ContactsType]} />\n                })\n            }\n          </List>\n        </ListItem>\n      </List>\n      {\n        isOwner && <Button variant='contained' onClick={activeEditMode}>Edit</Button>\n      }\n    </>\n  );\n}\n\ntype ContactPropsType = {\n  contactName: string;\n  contactValue: string;\n}\n\nconst Contact: React.FC<ContactPropsType> = ({ contactName, contactValue }) => {\n  return (\n    <ListItem\n      sx={{\n        p: '0'\n      }}\n    >\n      <ListItemText\n        primary={\n          <Typography>\n            {contactName}: {<Typography sx={{ textDecoration: 'none' }} component='a' href={`http://${contactValue}`}>{contactValue}</Typography>}\n          </Typography>\n        }\n      />\n    </ListItem>\n  );\n}","import { Button, TextField, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { FormikErrors, FormikHelpers, useFormik } from 'formik';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, setStatusThunk } from '../../../../redux/profilePageReducer';\nimport { getStatusEditMode, getUserStatus } from '../../../../redux/profileSelecrors';\n\ntype PropsType = {\n  isOwner: boolean;\n}\n\nexport const ProfileStatus: React.FC<PropsType> = ({ isOwner }) => {\n  const userStatus = useSelector(getUserStatus);\n  const statusEditMode = useSelector(getStatusEditMode);\n  const dispatch = useDispatch();\n\n  const setEditMode = (state: boolean, fieldName: string) => dispatch(actions.toggleEditMode(state, fieldName));\n\n\n  const activateEditMode = () => {\n    if (isOwner) {\n      setEditMode(true, 'statusEditMode')\n    }\n  };\n\n  useEffect(() => {\n    setEditMode(false, 'statusEditMode')\n  }, [])\n\n  return (\n    <div>\n      {\n        statusEditMode\n          ? <ProfileStatusForm />\n          : <>\n            <Typography\n              onDoubleClick={activateEditMode}\n              component='span'\n            >\n              {userStatus || '---'}\n            </Typography>\n          </>\n      }\n    </div>\n  )\n}\n\n\n\n\n\n\ntype InitialValuesType = {\n  userStatus: string;\n}\n\nconst ProfileStatusForm: React.FC = () => {\n  const userStatus = useSelector(getUserStatus);\n  const dispatch = useDispatch();\n  const setStatus = (text: string) => dispatch(setStatusThunk(text));\n\n  const initialValues: InitialValuesType = { userStatus: userStatus === null ? '' : userStatus };\n\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: (values: InitialValuesType, { setSubmitting }: FormikHelpers<InitialValuesType>) => {\n      setStatus(values.userStatus);\n      setSubmitting(false);\n    },\n    validate: (values: InitialValuesType) => {\n      const errors: FormikErrors<InitialValuesType> = {};\n\n      if (values.userStatus.length > 300) {\n        errors.userStatus = 'Status max length 300 symbols';\n      }\n\n      return errors;\n    },\n  })\n\n  const { isSubmitting, handleSubmit, values, errors, touched } = formik;\n\n\n  return (\n    <Box\n      component='form'\n      onSubmit={handleSubmit}\n    >\n      <TextField\n        sx={{\n          mr: 2\n        }}\n        name='userStatus'\n        value={values.userStatus}\n        onChange={formik.handleChange}\n        autoComplete='off'\n        size='small'\n        variant='standard'\n        error={touched.userStatus && Boolean(errors.userStatus)}\n        helperText={touched.userStatus && errors.userStatus}\n      />\n      <Button\n        variant='contained'\n        type='submit'\n        color='success'\n        size='small'\n        disabled={isSubmitting}\n      >\n        Submit\n      </Button>\n    </Box>\n  );\n}","import { Box, Button, Skeleton } from '@mui/material';\nimport React, { ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport userIcon from '../../../../assets/images/user-icon.jpeg'\nimport { actions, setPhotoThunk, UserProfileType } from '../../../../redux/profilePageReducer';\nimport { getErrorMessages, getInWaiting } from '../../../../redux/profileSelecrors';\nimport Error from '../../../common/Error/Error';\n\ntype PropsType = {\n  userProfile: UserProfileType;\n  isOwner: boolean;\n}\n\n\n\nexport const ProfilePhoto: React.FC<PropsType> = ({ isOwner, userProfile }) => {\n  const inWaiting = useSelector(getInWaiting);\n  const errorMessages = useSelector(getErrorMessages);\n  const { photos } = userProfile;\n  const errorMessage = errorMessages.onSetPhotoErrorMessage;\n\n  const dispatch = useDispatch()\n\n  const setPhoto = (photo: File) => dispatch(setPhotoThunk(photo));\n  const setError = (errorText: string | null, errorName: string) => dispatch(actions.setError(errorText, errorName));\n\n  const handleCloseError = (event: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setError(null, 'onSetPhotoErrorMessage');\n  };\n\n\n  const onChooseFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setPhoto(e.target.files[0]);\n    }\n  }\n\n\n  return (\n    <Box\n      sx={{ pb: 3 }}\n    >\n      {\n        errorMessage\n        && <Error\n             handleClose={handleCloseError}\n          >\n            {errorMessage}\n          </Error>\n      }\n      {\n        inWaiting\n          ? <Skeleton\n            sx={{ mb: 2 }} \n            variant='rectangular'\n            width={300}\n            height={300}\n          />\n          : <Box\n            sx={{ mb: 2, fontSize: 0 }}\n          >\n            <img\n              src={photos.large || userIcon}\n              style={{ width: '300px', height: '300px' }}\n              alt='User photo'\n            />\n          </Box>\n      }\n      {\n        isOwner\n        && <label htmlFor='uploadPhoto'>\n          <input\n            style={{ display: 'none' }}\n            id='uploadPhoto'\n            type='file'\n            onChange={onChooseFile}\n          />\n\n          <Button\n            color='primary'\n            variant='contained'\n            component='span'\n            disabled={inWaiting}\n          >\n            Upload photo\n          </Button>\n        </label>\n      }\n    </Box>\n  );\n}","import { Skeleton } from '@mui/material';\nimport React from 'react';\n\nexport const ProfileInfoPreloaderLeft: React.FC = () => {\n  return (\n    <>\n      <Skeleton\n        sx={{ mb: 2 }}\n        variant='rectangular'\n        width={300}\n        height={300}\n      />\n      <Skeleton\n        width={130}\n        height={60}\n        variant=\"text\"\n      />\n      <Skeleton\n        width={300}\n        variant=\"text\"\n      />\n    </>\n  );\n};\n\n\n\nexport const ProfileInfoPreloaderRight: React.FC = () => {\n  const arr = [1, 1, 1, 1, 1];\n\n  return (\n    <>\n      <Skeleton\n        sx={{\n          mb: 3\n        }}\n        width='40%'\n        height={40}\n        variant=\"text\"\n      />\n      {\n        arr.map((item, index) => {\n          if (index <= 2) {\n            return (\n              <Skeleton\n                sx={{\n                  mb: 1\n                }}\n                key={index}\n                width='60%'\n                variant=\"text\"\n              />\n            );\n          }\n        })\n      }\n      <Skeleton\n        sx={{\n          mb: 3\n        }}\n        width='40%'\n        height={40}\n        variant=\"text\"\n      />\n      {\n        arr.map((item, index) => {\n          return (\n            <Skeleton\n              sx={{\n                mb: 1\n              }}\n              key={index}\n              width='60%'\n              variant=\"text\"\n            />\n          );\n        })\n      }\n      <Skeleton\n        width='20%'\n        height={60}\n        variant=\"text\"\n      />\n    </>\n  );\n};\n\n","import React, { MouseEvent, useEffect } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport { ProfileDataForm } from './ProfileDataForm/ProfileDataForm';\nimport { actions, setProfileDataThunk, UserProfileType } from '../../../redux/profilePageReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProfileInfoEditMode, getUserProfile } from '../../../redux/profileSelecrors';\nimport { ProfileData } from './ProfileData/ProfileData';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\nimport { Box, Grid, Skeleton } from '@mui/material';\nimport { ProfilePhoto } from './ProfilePhoto/ProfilePhoto';\nimport { ProfileInfoPreloaderLeft, ProfileInfoPreloaderRight } from './ProfileInfoPreloader';\n\ntype PropsType = {\n  isOwner: boolean;\n}\n\n\nexport const ProfileInfo: React.FC<PropsType> = React.memo(({ isOwner }) => {\n  const userProfile = useSelector(getUserProfile);\n  const editMode = useSelector(getProfileInfoEditMode);\n\n  const dispatch = useDispatch();\n\n  const setProfileData = (data: UserProfileType) => dispatch(setProfileDataThunk(data));\n  const setEditMode = (state: boolean, fieldName: string) => dispatch(actions.toggleEditMode(state, fieldName));\n\n  useEffect(() => {\n    return () => {\n      setEditMode(false, 'profileInfoEditMode');\n    };\n  }, []);\n\n\n  const activeEditMode = () => {\n    setEditMode(true, 'profileInfoEditMode');\n  }\n\n  const deactiveEditMode = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setEditMode(false, 'profileInfoEditMode');\n  }\n\n\n  return (\n    <Grid\n      container\n      sx={{ pt: 5 }}\n    >\n      <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n        {\n          userProfile\n            ? <>\n              <ProfilePhoto userProfile={userProfile} isOwner={isOwner} />\n              <ProfileStatus isOwner={isOwner} />\n            </>\n            : <ProfileInfoPreloaderLeft />\n        }\n      </Grid>\n      <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n        {\n          userProfile\n            ? <>\n              <ProfileData\n                userProfile={userProfile}\n                activeEditMode={activeEditMode}\n                isOwner={isOwner}\n              />\n              <ProfileDataForm\n                editMode={editMode}\n                initialValues={userProfile}\n                deactiveEditMode={deactiveEditMode}\n                setProfileData={setProfileData}\n              />\n            </>\n            : <ProfileInfoPreloaderRight />\n        }\n      </Grid>\n    </Grid>\n  )\n});","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getAuth } from '../../redux/authSelecrors';\nimport { getProfileThunk, getStatusThunk } from '../../redux/profilePageReducer';\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\n\n\nexport type SetErrorType = (errorText: string | null, errorName: string) => {\n  readonly type: \"social-network/profile/SET_ERROR\";\n  readonly errorText: string | null;\n  readonly errorName: string;\n};\n\n\n\n\n\nconst ProfilePage: React.FC = React.memo(() => {\n  let { id } = useParams();\n  const auth = useSelector(getAuth);\n  const dispatch = useDispatch();\n\n  const getProfile = (id: number | null) => dispatch(getProfileThunk(id));\n  const getStatus = (id: number) => dispatch(getStatusThunk(id));\n\n\n  let currentUserId: number | null = null;\n  if (id) {\n    currentUserId = +id;\n  }\n  if (!currentUserId) {\n    const { isAuth, id } = auth;\n    if (isAuth === 'authorized') {\n      currentUserId = id;\n    }\n  }\n  const isOwner = currentUserId === auth.id;\n\n\n  const getCurrentUserData = () => {\n    if (typeof currentUserId === 'number') {\n      getProfile(currentUserId);\n      getStatus(currentUserId);\n    }\n  }\n\n  useEffect(() => {\n    getCurrentUserData();\n  }, [currentUserId]);\n\n\n\n\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n      />\n    </div>\n  );\n});\n\n\n\nexport default ProfilePage;"],"sourceRoot":""}