{"version":3,"sources":["api/authApi.ts","utils/errors/errors.ts","reportWebVitals.js","redux/appReducer.ts","redux/reduxStore.ts","components/common/Error/Error.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","redux/appSelectors.ts","App.tsx","index.js","api/securityApi.ts","redux/authReducer.ts","components/common/Preloader/Preloader.tsx","components/Header/Header.module.css","redux/authSelecrors.ts","components/Navbar/Navbar.module.css","redux/dialogsPageReducer.ts","api/indexApi.ts","api/profileApi.ts","redux/profilePageReducer.ts","redux/usersPageReducer.ts","api/usersApi.ts","components/common/Error/Error.module.css","components/common/Preloader/Preloader.module.css"],"names":["ResultCodesEnum","authAPI","getAuthUserData","instance","get","then","res","data","login","formData","post","logout","FollowUnfollowError","message","name","Error","ProfileDataSaveError","ProfileStatusSaveError","ProfilePhotoSaveError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INIT_SUCCESS","actions","type","initialState","init","appReducer","state","action","rootReducer","combineReducers","profilePage","profilePageReducer","dialogsPage","dialogsPageReducer","usersPage","usersPageReducer","auth","authReducer","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","errorMessage","className","classes","item","Header","userData","logoutUser","header","img","src","isAuth","email","onClick","to","HeaderContainer","this","props","React","Component","connect","Navbar","nav","isActive","classNames","link","active","Layout","fallback","Preloader","getInit","DialogsContainer","lazy","Login","ProfileContainer","UsersContainer","Music","News","App","errorMessageTimerId","catchUnhandledErrors","bind","initApp","addEventListener","clearTimeout","removeEventListener","e","setState","reason","setTimeout","path","element","index","connector","getAuth","dispatch","getAuthUser","ReactDOM","render","document","getElementById","securityAPI","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","url","resultCode","Success","loginUser","a","response","CapthaIsRequired","setCaptchaUrl","stopSubmit","_error","messages","id","captchaUrl","ldsRipple","module","exports","getIsAuth","getCaptchaUrl","SEND_MESSAGE","sendMessage","text","dialogs","status","length","axios","create","baseURL","withCredentials","headers","profileAPI","put","photo","FormData","append","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","SET_PHOTO","TOGGLE_IN_WAITING","SET_ERROR","addPost","setUserProfile","setUserStatus","setPhoto","photos","toggleInWaiting","inWaiting","setError","errorText","errorName","getProfile","getStatus","setStatus","getState","errorMessages","onSetPhotoErrorMessage","setProfileData","indexOf","errorFieldName","substring","toLowerCase","posts","likesCount","userProfile","userStatus","onSetStatusErrorMessage","followUnfollowErrorTimer","usersAPI","delete","pageSize","currentPage","searchStr","params","count","page","term","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_IN_PROGRESS","SET_FILTER","follow","userId","unfollow","setUsers","users","setCurrentPage","setTotalCount","totalCount","toggleIsFetching","isFetching","toggleFollowingProgress","inProgress","setFilter","payload","followUnfollow","apiMethod","actionCreator","getUsersList","searchValue","items","followingInProgress","onFollowUnfollowErrorMessage","filter","map","followed"],"mappings":"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","file":"static/js/main.c6ddffa3.chunk.js","sourcesContent":["import { LoginFormDataType } from './../redux/authReducer';\nimport { instance, OperationResultType } from './indexApi';\n\n\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n  CapthaIsRequired = 10,\n}\n\ntype LogautResponseType = {\n  resultCode: number;\n}\n\ntype AuthUserDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype LoginUserDataType = {\n  userId: number\n}\n\nexport const authAPI = {\n  getAuthUserData: () => {\n    return instance.get<OperationResultType<AuthUserDataType>>('/auth/me').then(res => res.data);\n  },\n\n  login: (formData: LoginFormDataType) => {\n    return instance.post<OperationResultType<LoginUserDataType>>('/auth/login', formData).then(res => res.data);\n  },\n\n  logout: () => {\n    return instance.post<LogautResponseType>('/auth/logout');\n  },\n}","export class FollowUnfollowError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'FollowUnfollowError';\n  }\n}\n\nexport class ProfileDataSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfileDataSaveError';\n  }\n}\n\nexport class ProfileStatusSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfileStatusSaveError';\n  }\n}\n\nexport class ProfilePhotoSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    this.name = 'ProfilePhotoSaveError';\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { getAuthUser } from \"./authReducer\";\n\n\ntype InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\n\n\nconst INIT_SUCCESS = 'social-network/app/INIT_SUCCESS';\n\nconst actions = {\n  initSuccess: () => ({ type: INIT_SUCCESS }) as const,\n}\n\n\n\n\nexport const initApp = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    dispatch(getAuthUser())\n      .then(() => {\n        dispatch(actions.initSuccess())\n      });\n  }\n}\n\n\n\nconst initialState = {\n  init: false,\n}\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case INIT_SUCCESS:\n      return {\n        ...state,\n        init: true,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\n\n\n\nexport default appReducer;","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport authReducer from './authReducer';\nimport dialogsPageReducer from './dialogsPageReducer';\nimport profilePageReducer from './profilePageReducer';\nimport usersPageReducer from './usersPageReducer';\nimport thunkMiddleware from 'redux-thunk'\nimport appReducer from './appReducer';\nimport { reducer as formReducer } from 'redux-form'\n\nconst rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  usersPage: usersPageReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n});\n\n// Создание store с расширением Redux Devtools\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// Создание store\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n\n// Определяем тип state по возвращаемому объекту из метода getState\nexport type RootStateType = ReturnType<typeof store.getState>\n\n// Определяем тип state по возвращаемому объекту из функции rootReducer \n// (возвращает она тоже самое, что и метот getState, потому что rootReducer - это функция принимающая глобальный state и возвращающая его)\n// export type RootStateType = ReturnType<typeof rootReducer>\n\n\n\n// Динамически определяем тип actions\n// type InferActionCreatersType<T> = T extends {[key: string]: infer U} ? U : never;\n// export type InferActionsType<T extends {[key: string]: (...arg: any) => any}> = ReturnType<InferActionCreatersType<T>>;\n\n// То же самое в укороченной записи\nexport type InferActionsType<T> = T extends {[key: string]: (...arg: any) => infer U} ? U : never;\n\n\nexport default store;","import React from 'react';\nimport classes from './Error.module.css'\n\ntype ErrorPropsType = {\n  errorMessage: string\n}\n\nconst Error = ({ errorMessage }: ErrorPropsType): JSX.Element => {\n  return (\n    <div className={classes.item}>{errorMessage}</div>\n  );\n}\n\nexport default Error; ","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { InitialStateType } from '../../redux/authReducer';\nimport classes from './Header.module.css'\n\ntype PropsType = {\n  userData: InitialStateType;\n  logoutUser: () => void;\n}\n\nconst Header: React.FC<PropsType> = ({ userData, logoutUser }) => {\n  return (\n    <header className={classes.header}>\n      <img className={classes.img} src=\"https://i.imgur.com/BrIpiK6.png\" />\n      <div>\n        {\n          userData.isAuth === 'authorized'\n            ? <div>\n              <span> {userData.login} ({userData.email}) </span>\n              <button onClick={logoutUser}>Exit</button>\n            </div>\n            : <NavLink to='/login'>Login</NavLink>\n        }\n      </div>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { InitialStateType, logoutUser } from '../../redux/authReducer';\nimport { RootStateType } from '../../redux/reduxStore';\nimport Header from './Header';\n\ntype StatePropsType = {\n  userData: InitialStateType;\n}\ntype DispatchPropsType = {\n  logoutUser: () => void;\n}\ntype PropsType = StatePropsType & DispatchPropsType;\n\n// type PropsType = ConnectedProps<typeof connector>;\n\n\nclass HeaderContainer extends React.Component<PropsType>{\n  render() {\n    return (\n      <Header {...this.props} logoutUser={this.props.logoutUser} />\n    )\n  }\n}\n\n\n\nconst mapStateToProps = (state: RootStateType) => {\n  return {  \n    userData: state.auth,\n  }\n};\n\n// const connector = connect(mapStateToProps, { logoutUser });\n\n// export default connector(HeaderContainer);\n\nexport default connect<StatePropsType, DispatchPropsType, {}, RootStateType>(mapStateToProps, { logoutUser })(HeaderContainer);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './Navbar.module.css'\nimport classNames from 'classnames';\n\n\nconst Navbar: React.FC = () => {\n  return (\n    <nav className={classes.nav}>\n      <ul>\n        <li className={classes.item}>\n          <NavLink className={ ({ isActive }) => classNames(classes.link, {[classes.active]: isActive}) } to='/profile'>\n             Profile\n          </NavLink>\n        </li>\n        \n        <li className={classes.item}>\n          <NavLink className={ ({ isActive }) => classNames(classes.link, {[classes.active]: isActive}) } to='/dialogs'>\n            Dialogs\n          </NavLink>\n        </li>\n\n        <li className={classes.item}>\n          <NavLink className={ ({ isActive }) => classNames(classes.link, {[classes.active]: isActive}) } to='/news'>\n            News\n          </NavLink>\n        </li>\n\n        <li className={classes.item}>\n          <NavLink className={ ({ isActive }) => classNames(classes.link, {[classes.active]: isActive}) } to='/music'>\n            Music\n          </NavLink>\n        </li>\n\n        <li className={classes.item}>\n          <NavLink className={ ({ isActive }) => classNames(classes.link, {[classes.active]: isActive}) } to='/users'>\n            Users\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navbar;","import React, { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport Preloader from '../common/Preloader/Preloader';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport Navbar from '../Navbar/Navbar';\n\nconst Layout: React.FC = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <Navbar />\n      <main className='app-content-wrapper'>\n        <Suspense fallback={<Preloader />}>\n          <Outlet />\n        </Suspense>\n      </main>\n    </>\n  );\n}\n\nexport default Layout;","import { RootStateType } from \"./reduxStore\";\n\nexport const getInit = (state: RootStateType) => state.app.init;","import React, { lazy } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css'\nimport Error from './components/common/Error/Error';\nimport Preloader from './components/common/Preloader/Preloader';\nimport Layout from './components/Layout/Layout';\nimport { initApp } from './redux/appReducer';\nimport { getInit } from './redux/appSelectors';\nimport { getAuth } from './redux/authSelecrors';\nimport { RootStateType } from './redux/reduxStore';\n\n\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst Login = lazy(() => import('./components/Login/Login'));\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'));\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'));\nconst Music = lazy(() => import('./components/Music/Music'));\nconst News = lazy(() => import('./components/News/News'));\n\n\ntype PropsType = ConnectedProps<typeof connector>;\n\ntype StateProps = {\n  errorMessage: string | null;\n}\n\nclass App extends React.Component<PropsType, StateProps> {\n  constructor(props: PropsType) {\n    super(props);\n    this.state = {\n      errorMessage: null\n    }\n    this.catchUnhandledErrors = this.catchUnhandledErrors.bind(this);\n  }\n\n  // Сделано все по документации и все работает, но почему то ts  выдает ошибку (в примере в документации тоже), из за этого ts-ignore\n  // @ts-ignore\n  errorMessageTimerId: NodeJS.Timeout;\n\n  componentDidMount() {\n    this.props.initApp();\n    // Перехватываем все не обработанные rejecton promises\n    window.addEventListener('unhandledrejection', this.catchUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    // При размонтировании удаляем обработчик события и зачищаем таймер\n    clearTimeout(this.errorMessageTimerId);\n    window.removeEventListener('unhandledrejection', this.catchUnhandledErrors);\n  }\n\n  // В данном месте сделата обработка ошибок всех сетевых запросов\n  // Если любой из промисов вернул reject, сообщение о коде ошибки будет показано на экране\n  // Обработка реализована через local state для более удобного управления timerId, создаваемым setTimeout\n  catchUnhandledErrors(e: PromiseRejectionEvent) {\n    this.setState({\n      errorMessage: e.reason.message,\n    })\n    clearTimeout(this.errorMessageTimerId);\n    this.errorMessageTimerId = setTimeout(() => {\n      this.setState({\n        errorMessage: null,\n      })\n    }, 2000)\n  } \n\n\n  render() {\n\n    if (!this.props.init) return <Preloader />\n\n    return (\n      <div className='app-wrapper'>\n        {\n          this.state.errorMessage && <Error errorMessage={this.state.errorMessage} />\n        }\n\n        <Routes>\n          <Route path='/' element={<Layout />}>\n            <Route index element={this.props.auth.isAuth === 'authorized' ? <Navigate to='/profile' /> : <div>Registration</div>} />\n            <Route path='login' element={<Login />} />\n            <Route path='profile/:id' element={<ProfileContainer />} />\n            <Route path='profile' element={<ProfileContainer />} />\n            <Route path='dialogs/*' element={<DialogsContainer />} />\n            <Route path='users' element={<UsersContainer />} />\n            <Route path='news' element={<News />} />\n            <Route path='music' element={<Music />} />\n            <Route path='*' element={<div>Error 404 Page not found</div>} />\n          </Route>\n        </Routes>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state: RootStateType) => {\n  return {\n    init: getInit(state),\n    auth: getAuth(state),\n  }\n}\n\nconst connector = connect(mapStateToProps, { initApp });\n\nexport default connector(App);\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, /* HashRouter */ } from 'react-router-dom';\n\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n\nReactDOM.render(\n\n  // HashRouter using only for git hab pages diploy!!!\n  // <HashRouter>\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  // </HashRouter>,\n    document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { instance } from \"./indexApi\";\n\n\ntype GetCaptchaResponseType = {\n  url: string;\n}\n\n\nexport const securityAPI = {\n  getCaptchaUrl: () => {\n    return instance.get<GetCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { authAPI, ResultCodesEnum } from \"../api/authApi\";\nimport { securityAPI } from \"../api/securityApi\";\n\n\ntype AuthUserDataType = {\n  email: string | null;\n  id: number | null;\n  login: string | null;\n}\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n}\n\nexport type FieldsNamesType = keyof LoginFormDataType;\n\n\nexport type IsAuthType = 'notAuthorized' | 'authorized';\n\nexport type InitialStateType = typeof initialState;\n\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>;\n\n\n\n\nconst SET_AUTH_USER_DATA = 'social-network/auth/SET_AUTH_USER_DATA';\nconst SET_CAPTCHA_URL = 'social-network/auth/SET_CAPTCHA_URL';\n\nconst actions = {\n  setAuthUserData: (data: AuthUserDataType, isAuth: IsAuthType) => ({ type: SET_AUTH_USER_DATA, data, isAuth }) as const,\n  setCaptchaUrl: (url: string) => ({ type: SET_CAPTCHA_URL, url }) as const,\n}\n\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\n\nexport const getAuthUser = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n\n    return authAPI.getAuthUserData()\n      .then(res => {\n        if (res.resultCode === ResultCodesEnum.Success) {\n          dispatch(actions.setAuthUserData(res.data, 'authorized'));\n        }\n      })\n  }\n}\n\nexport const loginUser = (formData: LoginFormDataType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType | FormAction>) => { // FormAction тип экшена, который возвращаее stopSubmit\n    const response = await authAPI.login(formData)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUser());\n    } else {\n      if (response.resultCode === ResultCodesEnum.CapthaIsRequired) {\n        dispatch(setCaptchaUrl());\n      }\n      dispatch(stopSubmit('login', { _error: response.messages[0] }));\n    }\n  }\n}\n\nexport const logoutUser = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData({ id: null, login: null, email: null }, 'notAuthorized'));\n    }\n  }\n}\n\nconst setCaptchaUrl = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await securityAPI.getCaptchaUrl();\n    dispatch(actions.setCaptchaUrl(response.url));\n  }\n}\n\nconst initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: 'notAuthorized' as IsAuthType,\n  captchaUrl: null as string | null,\n}\n\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isAuth: action.isAuth,\n      };\n\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.url,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\n\n// Использование MappedType и ConditionalType\n\n// type MyType<T> = T extends 'string' ? LikeType : DislikeType;\n\n// type LikeType = {\n//   myType: string;\n// }\n\n// type DislikeType = {\n//   myType: number;\n// }\n\n// const a: MyType<'string'> = {\n//   myType: 'fdsfd',\n// }\n\n// const b: MyType<'number'> = {\n//   myType: 1,\n// }\n\n// const obj = {\n//   a: {name: 'Art'},\n//   c: {age: 29},\n// }\n\n// const obj1 = {\n//   name: 'Art',\n//   age: 29,\n// }\n\n// type SomeType<T> = T extends {[key: string]: infer U} ? U : never;\n\n// const MyName: SomeType<typeof obj> = {name: 'dsf'};\n// const MyName1: SomeType<typeof obj1> = 'sdffs';\n\nexport default authReducer;","import React from \"react\";\nimport classes from './Preloader.module.css';\n\nconst Preloader: React.FC = () => {\n  return (\n    <div className={classes.ldsRipple}>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  )\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"img\":\"Header_img__3ifQS\"};","import { RootStateType } from \"./reduxStore\";\n\nexport const getAuth = (state: RootStateType) => state.auth;\n\nexport const getIsAuth = (state: RootStateType) => state.auth.isAuth;\n\nexport const getCaptchaUrl = (state: RootStateType) => state.auth.captchaUrl;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"link\":\"Navbar_link__TNvz9\",\"active\":\"Navbar_active__3mbhk\"};","import { InferActionsType } from \"./reduxStore\";\n\ntype InitialStateType = typeof initialState\n\ntype DialogType = {\n  id: number\n  name: string\n}\n\ntype MessageType = {\n  id: number\n  message: string\n  status: string\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\nconst SEND_MESSAGE = 'social-network/dialogs-page/SEND-MESSAGE';\n\nexport const actions = {\n  sendMessage: (text: string) => ({ type: SEND_MESSAGE, text }) as const,\n}\n\n\nconst initialState = {\n  dialogs: [\n    {id: 1, name: 'Aaaa'},\n    {id: 2, name: 'Bbb'},\n    {id: 3, name: 'Ccc'},\n  ] as Array<DialogType>,\n  messages: [\n    {id: 1, message: 'Hey!', status: 'from'},\n    {id: 2, message: 'How are you?', status: 'from'},\n    {id: 3, message: 'Im ok)', status: 'to'},\n  ] as Array<MessageType>,\n}\n\nconst dialogsPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SEND_MESSAGE: {\n      return {\n        ...state, \n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length + 1, \n            status: 'to',\n            message: action.text,\n          }\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default dialogsPageReducer;","import axios from \"axios\";\n\nexport type OperationResultType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n}\n\nexport const instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0',\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"9d799735-d786-4c1b-bde9-09779c3bba07\"\n  },\n});","import { PhotosType, UserProfileType } from \"../redux/profilePageReducer\";\nimport { instance, OperationResultType } from \"./indexApi\";\n\n\n\n\nexport const profileAPI = {\n  getProfileData: (id: number | null) => {\n    return instance.get<UserProfileType>(`/profile/${id}`).then(res => res.data);\n  },\n\n  getStatus: (id: number) => {\n    return instance.get<string>(`/profile/status/${id}`).then(res => res.data);\n  },\n\n  setStatus: (status: string) => {\n    return instance.put<OperationResultType>('/profile/status', { status }).then(res => res.data);\n  },\n\n  setProfilePhoto: (photo: File) => {\n    const formData = new FormData();\n    formData.append('image', photo);\n    return instance.put<OperationResultType<{ photos: PhotosType }>>('/profile/photo', formData, {headers: {'Content-Type' : 'multipart/form-data'}}).then(res => res.data);\n  },\n\n  setProfileData: (data: UserProfileType) => {\n    return instance.put<OperationResultType>('/profile', data).then(res => res.data);\n  },\n}","import { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { profileAPI } from \"../api/profileApi\";\nimport { ProfileDataSaveError, ProfilePhotoSaveError, ProfileStatusSaveError } from \"../utils/errors/errors\";\n\n\ntype InitialStateType = typeof initialState\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n}\n\nexport type ErrorMessagesType = {\n  onSetPhotoErrorMessage: string | null;\n  onSetStatusErrorMessage: string | null;\n}\n\nexport type UserProfileType = {\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n  aboutMe: string;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n}\n\nexport type PhotosType = {\n  small: string | null;\n  large: string | null;\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>\n\n\nconst ADD_POST = 'social-network/profile/ADD-POST';\nconst SET_USER_PROFILE = 'social-network/profile/SET_USER_PROFILE';\nconst SET_USER_STATUS = 'social-network/profile/SET_USER_STATUS';\nconst SET_PHOTO = 'social-network/profile/SET_PHOTO';\nconst TOGGLE_IN_WAITING = 'social-network/profile/TOGGLE_IN_WAITING';\nconst SET_ERROR = 'social-network/profile/SET_ERROR';\n\nexport const actions = {\n  addPost: (text: string) => ({ type: ADD_POST, text }) as const,\n  setUserProfile: (userData: UserProfileType) => ({ type: SET_USER_PROFILE, userData }) as const,\n  setUserStatus: (text: string) => ({ type: SET_USER_STATUS, text }) as const,\n  setPhoto: (photos: PhotosType) => ({ type: SET_PHOTO, photos }) as const,\n  toggleInWaiting: (inWaiting: boolean) => ({ type: TOGGLE_IN_WAITING, inWaiting }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n}\n\n\n\nexport const getProfile = (id: number | null): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getProfileData(id)\n\n    dispatch(actions.setUserProfile(response));\n  }\n}\n\nexport const getStatus = (id: number): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setUserStatus(response));\n  }\n}\n\nexport const setStatus = (text: string): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    try {\n      const response = await profileAPI.setStatus(text)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setUserStatus(text));\n      } else {\n        throw new ProfileStatusSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      if (err instanceof ProfileStatusSaveError) {\n        dispatch(actions.setError(err.message, 'onSetStatusErrorMessage'));\n      } else {\n        throw err;\n      }\n    }\n  }\n}\n\nexport const setPhoto = (photo: File): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      if (getState().profilePage.errorMessages.onSetPhotoErrorMessage) {\n        dispatch(actions.setError(null, 'onSetPhotoErrorMessage'));\n      }\n      dispatch(actions.toggleInWaiting(true));\n\n      const response = await profileAPI.setProfilePhoto(photo);\n\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setPhoto(response.data.photos));\n      } else {\n        throw new ProfilePhotoSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      if (err instanceof ProfilePhotoSaveError) {\n        dispatch(actions.setError(err.message, 'onSetPhotoErrorMessage'));\n      } else {\n        throw err;\n      }\n    } finally {\n      dispatch(actions.toggleInWaiting(false));\n    }\n  }\n}\n\n\nexport const setProfileData = (data: UserProfileType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType | FormAction>, getState: () => RootStateType) => {  // FormAction тип экшена, который возвращаее stopSubmit\n    try {\n      const id = getState().auth.id;\n      const response = await profileAPI.setProfileData(data)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(getProfile(id));\n      } else {\n        if (response.messages[0].indexOf('->') > -1) {\n          const errorFieldName = response.messages[0]\n            .substring(response.messages[0].indexOf('->') + 2, response.messages[0].length - 1)\n            .toLowerCase();\n\n          dispatch(stopSubmit('profileDataForm', { 'contacts': { [errorFieldName]: response.messages[0] } }));\n        } else {\n          dispatch(stopSubmit('profileDataForm', { _error: response.messages[0] }));\n        }\n\n        // Прокидываем данную ошибку наверх, потому что в компоненте ProfileInfo реализовано отображение формы в зависимости от состояния editMode\n        // Нам нужно понимать, успешно сохранились данные на сервере или нет\n        // Если успех (resultCode === ResultCodesEnum.Success) => убираем форму\n        // Если нет (resultCode !== ResultCodesEnum.Success) => нужно оставить форму и подсветить непровалидированные поля\n        // Далее в ProfileInfo прокидываем эту ошибку дальше, что бы она обработалась в App\n        throw new ProfileDataSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n}\n\n\n\nconst initialState = {\n  posts: [\n    { id: 1, message: 'Hi, how are you?', likesCount: 10 },\n    { id: 2, message: 'Its my first post', likesCount: 15 },\n    { id: 3, message: 'Da', likesCount: 120 },\n    { id: 4, message: 'Ok, its cool', likesCount: 110 },\n    { id: 5, message: ';)', likesCount: 40 },\n  ] as Array<PostType>,\n  userProfile: null as UserProfileType | null,\n  userStatus: '',\n  inWaiting: false,\n  errorMessages: {\n    onSetPhotoErrorMessage: null,\n    onSetStatusErrorMessage: null,\n  } as ErrorMessagesType,\n}\n\n\nconst profilePageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case ADD_POST: {\n      return {\n        ...state,\n        posts: [\n          ...state.posts,\n          {\n            id: state.posts.length + 1,\n            message: action.text,\n            likesCount: 0,\n          }\n        ],\n      };\n    }\n\n    case SET_USER_PROFILE: {\n      return { ...state, userProfile: action.userData };\n    }\n\n    case SET_USER_STATUS: {\n      return { ...state, userStatus: action.text }\n    }\n\n    case SET_PHOTO: {\n      return {\n        ...state,\n        userProfile: {\n          ...state.userProfile as UserProfileType,\n          photos: action.photos,\n        }, /// !!! as UserProfileType\n      }\n    }\n\n    case TOGGLE_IN_WAITING:\n      return {\n        ...state,\n        inWaiting: action.inWaiting,\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n\n\n    default:\n      return state;\n  }\n}\n\nexport default profilePageReducer;","import { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { usersAPI } from \"../api/usersApi\";\nimport { FollowUnfollowError } from \"../utils/errors/errors\";\nimport { PhotosType } from \"./profilePageReducer\";\nimport { OperationResultType } from '../api/indexApi';\n\nconst FOLLOW = 'social-network/users/FOLLOW';\nconst UNFOLLOW = 'social-network/users/UNFOLLOW';\nconst SET_USERS = 'social-network/users/SET_USERS';\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'social-network/users/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'social-network/users/TOGGLE_IS_FETCHING';\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'social-network/users/TOGGLE_FOLLOWING_IN_PROGRESS';\nconst SET_ERROR = 'social-network/users/SET_ERROR';\nconst SET_FILTER = 'social-network/users/SET_FILTER';\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>;\n\nexport type ErrorMessagesType = {\n  onFollowUnfollowErrorMessage: string | null;\n}\n\nexport const actions = {\n  follow: (userId: number) => ({ type: FOLLOW, userId }) as const,\n  unfollow: (userId: number) => ({ type: UNFOLLOW, userId }) as const,\n  setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }) as const,\n  setCurrentPage: (page: number) => ({ type: SET_CURRENT_PAGE, page }) as const,\n  setTotalCount: (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount }) as const,\n  toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }) as const,\n  toggleFollowingProgress: (inProgress: boolean, id: number) => ({ type: TOGGLE_FOLLOWING_IN_PROGRESS, inProgress, id }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  setFilter: (payload: { term: string }) => ({ type: SET_FILTER, payload }) as const,\n}\n\n\n\n\nlet followUnfollowErrorTimer: NodeJS.Timeout;\n\nconst followUnfollow = async (\n  dispatch: Dispatch<ActionsType>, apiMethod: (id: number) => Promise<OperationResultType>,\n  actionCreator: (userId: number) => ActionsType,\n  id: number\n) => {\n  try {\n    dispatch(actions.toggleFollowingProgress(true, id));\n\n    const response = await apiMethod(id);\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actionCreator(id))\n    } else {\n      throw new FollowUnfollowError(response.messages[0])\n    }\n  } catch (err) {\n    if (err instanceof FollowUnfollowError) {\n      dispatch(actions.setError(err.message, 'onFollowUnfollowErrorMessage'));\n\n      clearTimeout(followUnfollowErrorTimer);\n      followUnfollowErrorTimer = setTimeout(() => {\n        dispatch(actions.setError(null, 'onFollowUnfollowErrorMessage'));\n      }, 2000)\n    } else {\n      throw err;\n    }\n  } finally {\n    dispatch(actions.toggleFollowingProgress(false, id));\n  }\n}\n\nexport const follow = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getFollow, actions.follow, id);\n  }\n}\n\nexport const unfollow = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getUnfollow, actions.unfollow, id);\n  }\n}\n\n\nexport const getUsersList = (pageSize: number, currentPage: number, searchValue = ''): ThunkActionType => {\n  return async (dispatch: Dispatch<ActionsType>) => {\n    try {\n      dispatch(actions.toggleIsFetching(true));\n\n      const response = await usersAPI.getUsersData(pageSize, currentPage, searchValue)\n\n      dispatch(actions.setUsers(response.items));\n      dispatch(actions.setTotalCount(response.totalCount));\n      dispatch(actions.setCurrentPage(currentPage));\n    } finally {\n      dispatch(actions.toggleIsFetching(false));\n    }\n  }\n}\n\nexport type UserType = {\n  name: string\n  id: number\n  photos: PhotosType\n  status: string | null\n  followed: boolean\n}\n\nexport type FilterType = {\n  term: string;\n};\n\nexport type SetFilterType = typeof actions.setFilter;\nexport type SetCurrentPageType = typeof actions.setCurrentPage;\n\ntype InitialStateType = typeof initialState\n\nconst initialState = {\n  items: [] as Array<UserType>,\n  pageSize: 50,\n  currentPage: 1,\n  totalCount: 0,\n  isFetching: false,\n  followingInProgress: [] as Array<number>, // массив пользовательских id\n  errorMessages: {\n    onFollowUnfollowErrorMessage: null,\n  } as ErrorMessagesType,\n  filter: null as null | FilterType,\n};\n\nconst usersPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case FOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: true,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: false,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case SET_USERS:\n      return {\n        ...state,\n        items: action.users,\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.page,\n      };\n\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalCount: action.totalCount,\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n\n    case TOGGLE_FOLLOWING_IN_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.inProgress\n          ? [...state.followingInProgress, action.id]\n          : state.followingInProgress.filter(item => item !== action.id),\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: {\n          ...state.filter,\n          ...action.payload,\n        }\n      }\n\n\n    default:\n      return state;\n  }\n}\n\nexport default usersPageReducer;","import { UserType } from \"../redux/usersPageReducer\";\nimport { instance, OperationResultType } from './indexApi';\n\ntype GetUsersDataResponseType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n}\n\n\nexport const usersAPI = {\n  getFollow: (id: number) => {\n    return instance.post<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUnfollow: (id: number) => {\n    return instance.delete<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUsersData: (pageSize = 10, currentPage = 1, searchStr = '') => {\n    // return instance.get(`/users?count=${pageSize}&page=${currentPage}&term=${searchStr}`).then(res => res.data);   \n    return instance.get<GetUsersDataResponseType>(`/users`, { params: {count: pageSize, page: currentPage, term: searchStr} }).then(res => res.data);\n  },\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Error_item__3hG1O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRipple\":\"Preloader_ldsRipple__39kqY\"};"],"sourceRoot":""}