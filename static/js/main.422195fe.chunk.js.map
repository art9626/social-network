{"version":3,"sources":["api/profileApi.ts","redux/profilePageReducer.ts","redux/usersPageReducer.ts","api/usersApi.ts","redux/dialogsPageReducer.ts","components/common/Error/Error.tsx","api/chatApi.ts","redux/chatReducer.ts","api/indexApi.ts","api/authApi.ts","redux/appReducer.ts","redux/reduxStore.ts","components/common/ColorTheme.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/common/Private.tsx","redux/appSelectors.ts","App.tsx","index.js","utils/errors/errors.ts","redux/authSelecrors.ts","api/securityApi.ts","redux/authReducer.ts"],"names":["profileAPI","id","instance","get","then","res","editDataContacts","data","status","put","photo","formData","FormData","append","headers","aboutMe","contacts","lookingForAJobDescription","Object","keys","map","item","SET_USER_PROFILE","SET_USER_STATUS","SET_PHOTO","TOGGLE_IN_WAITING","SET_ERROR","TOGGLE_EDIT_MODE","TOGGLE_PROFILE_DATA_SUBMITTING","actions","setUserProfile","userData","type","setUserStatus","text","setPhoto","photos","toggleInWaiting","inWaiting","setError","errorText","errorName","toggleEditMode","state","fieldName","toggleProfileDataSubmitting","isSubmitting","getProfileThunk","dispatch","a","response","getStatusThunk","setStatusThunk","resultCode","ResultCodesEnum","Success","ProfileStatusSaveError","messages","setPhotoThunk","getState","profilePage","errorMessages","onSetPhotoErrorMessage","ProfilePhotoSaveError","message","setProfileDataThunk","auth","ProfileDataSaveError","initialState","userProfile","userStatus","profileInfoEditMode","profileDataIsSubmitting","statusEditMode","profilePageReducer","action","followUnfollowErrorTimer","usersAPI","post","delete","count","page","term","friend","params","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_IN_PROGRESS","SET_FILTER","follow","userId","unfollow","setUsers","users","setCurrentPage","setTotalCount","totalCount","toggleIsFetching","isFetching","toggleFollowingProgress","inProgress","setFilter","payload","followUnfollow","apiMethod","actionCreator","FollowUnfollowError","clearTimeout","setTimeout","followThunk","unfollowThunk","getUsersListThunk","pageSize","currentPage","searchValue","followersFilter","items","followingInProgress","onFollowUnfollowErrorMessage","filter","usersPageReducer","followed","SEND_MESSAGE","sendMessage","dialogs","name","dialogsPageReducer","length","Error","children","handleClose","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","subscribers","window","timerId","_subscriberMessageHandler","_subscriberStatusChangedHendler","wsChannel","onOpenWsChannel","statusChanged","forEach","onCloseWsChannel","createWsChannel","onMessageWsChannel","e","console","log","newMessages","JSON","parse","messagesReceived","cleanup","removeEventListener","WebSocket","addEventListener","chatApi","close","event","callback","push","send","SET_MESSAGES","SET_CHANNEL_STATUS","startWsChannelListeningThunk","stopWsChannelListeningThunk","channelStatus","chatReducer","axios","create","baseURL","withCredentials","authAPI","getAuthUserData","login","logout","INIT_SUCCESS","init","appReducer","rootReducer","combineReducers","dialogsPage","usersPage","authReducer","app","form","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ColorModeContext","createContext","toggleColorMode","ColorTheme","useState","mode","setMode","colorMode","useMemo","prevMode","theme","createTheme","palette","Provider","value","ThemeProvider","Header","React","memo","toggleNavbar","useTheme","useContext","useSelector","getAuth","avatar","small","isAuth","useDispatch","AppBar","position","Toolbar","IconButton","onClick","size","edge","color","sx","mr","to","Avatar","src","alt","Typography","Button","variant","logoutUserThunk","ml","Navbar","navbarStatus","Drawer","anchor","style","height","width","marginRight","component","List","toLowerCase","primary","Divider","ListItemLink","props","location","useLocation","isMatchPath","pathname","renderLink","forwardRef","itemProps","ref","role","undefined","ListItem","button","bgcolor","hover","info","main","ListItemText","Layout","setNavbarStatus","Box","minHeight","fallback","LinearProgress","Container","maxWidth","Privat","getIsAuth","from","getInit","DialogsPage","lazy","LoginPage","ProfilePage","UsersPage","ChatPage","Music","News","App","errorMessage","setErrorMessage","initApp","getAuthUser","catchUnhandledErrors","reason","useEffect","path","element","index","ReactDOM","render","document","getElementById","getCaptchaUrl","captchaUrl","securityAPI","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","url","loginUserThunk","CapthaIsRequired","setCaptchaUrl","stopSubmit","_error","email"],"mappings":"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","file":"static/js/main.422195fe.chunk.js","sourcesContent":["import { ContactsType, PhotosType, UserProfileType } from \"../redux/profilePageReducer\";\nimport { instance, OperationResultType } from \"./indexApi\";\n\n\n\n\nexport const profileAPI = {\n  getProfileData: (id: number | null) => {\n    return instance.get<UserProfileType>(`/profile/${id}`).then(res => { editDataContacts(res.data); return res.data });\n  },\n\n  getStatus: (id: number) => {\n    return instance.get<string>(`/profile/status/${id}`).then(res => res.data);\n  },\n\n  setStatus: (status: string) => {\n    return instance.put<OperationResultType>('/profile/status', { status }).then(res => res.data);\n  },\n\n  setProfilePhoto: (photo: File) => {\n    const formData = new FormData();\n    formData.append('image', photo);\n    return instance.put<OperationResultType<{ photos: PhotosType }>>('/profile/photo', formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then(res => res.data);\n  },\n\n  setProfileData: (data: UserProfileType) => {\n    return instance.put<OperationResultType>('/profile', data).then(res => res.data);\n  },\n}\n\nconst editDataContacts = (data: UserProfileType) => {\n  const { aboutMe, contacts, lookingForAJobDescription } = data;\n\n  if (aboutMe === null) {\n    data.aboutMe = '';\n  }\n\n  if (lookingForAJobDescription === null) {\n    data.lookingForAJobDescription = '';\n  }\n\n  Object.keys(contacts).map((item: string) => {\n    if (contacts[item as keyof ContactsType] === null) {\n      return contacts[item as keyof ContactsType] = '';\n    }\n    return contacts[item as keyof ContactsType];\n  })\n};","import { ProfileDataSaveError } from './../utils/errors/errors';\nimport { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { profileAPI } from \"../api/profileApi\";\nimport { ProfilePhotoSaveError, ProfileStatusSaveError } from \"../utils/errors/errors\";\n\n\ntype InitialStateType = typeof initialState\n\nexport type ErrorMessagesType = {\n  onSetPhotoErrorMessage: string | null;\n  onSetStatusErrorMessage: string | null;\n}\n\nexport type UserProfileType = {\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n  aboutMe: string;\n}\n\nexport type ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n}\n\nexport type PhotosType = {\n  small: string | null;\n  large: string | null;\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>\n\n\nconst SET_USER_PROFILE = 'social-network/profile/SET_USER_PROFILE';\nconst SET_USER_STATUS = 'social-network/profile/SET_USER_STATUS';\nconst SET_PHOTO = 'social-network/profile/SET_PHOTO';\nconst TOGGLE_IN_WAITING = 'social-network/profile/TOGGLE_IN_WAITING';\nconst SET_ERROR = 'social-network/profile/SET_ERROR';\nconst TOGGLE_EDIT_MODE = 'social-network/profile/TOGGLE_PROFILE_INFO_EDIT_MODE';\nconst TOGGLE_PROFILE_DATA_SUBMITTING = 'social-network/profile/TOGGLE_PROFILE_DATA_SUBMITTING';\n\nexport const actions = {\n  setUserProfile: (userData: UserProfileType) => ({ type: SET_USER_PROFILE, userData }) as const,\n  setUserStatus: (text: string) => ({ type: SET_USER_STATUS, text }) as const,\n  setPhoto: (photos: PhotosType) => ({ type: SET_PHOTO, photos }) as const,\n  toggleInWaiting: (inWaiting: boolean) => ({ type: TOGGLE_IN_WAITING, inWaiting }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  toggleEditMode: (state: boolean, fieldName: string) => ({ type: TOGGLE_EDIT_MODE, state, fieldName }) as const,\n  toggleProfileDataSubmitting: (isSubmitting: boolean) => ({ type: TOGGLE_PROFILE_DATA_SUBMITTING, isSubmitting } as const),\n}\n\n\n\nexport const getProfileThunk = (id: number | null): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getProfileData(id)\n    dispatch(actions.setUserProfile(response));\n  }\n}\n\nexport const getStatusThunk = (id: number): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setUserStatus(response));\n  }\n}\n\nexport const setStatusThunk = (text: string): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    try {\n      const response = await profileAPI.setStatus(text)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setUserStatus(text));\n        dispatch(actions.toggleEditMode(false, 'statusEditMode'));\n      } else {\n        throw new ProfileStatusSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport const setPhotoThunk = (photo: File): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      if (getState().profilePage.errorMessages.onSetPhotoErrorMessage) {\n        dispatch(actions.setError(null, 'onSetPhotoErrorMessage'));\n      }\n      dispatch(actions.toggleInWaiting(true));\n      const response = await profileAPI.setProfilePhoto(photo);\n      if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setPhoto(response.data.photos));\n      } else {\n        throw new ProfilePhotoSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      if (err instanceof ProfilePhotoSaveError) {\n        dispatch(actions.setError(err.message, 'onSetPhotoErrorMessage'));\n      } else {\n        throw err;\n      }\n    } finally {\n      dispatch(actions.toggleInWaiting(false));\n    }\n  }\n}\n\n\n\nexport const setProfileDataThunk = (data: UserProfileType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>, getState: () => RootStateType) => {\n    try {\n      const id = getState().auth.id;\n      dispatch(actions.toggleProfileDataSubmitting(true));\n      const response = await profileAPI.setProfileData(data)\n      if (response.resultCode === ResultCodesEnum.Success) {\n        await dispatch(getProfileThunk(id));\n        dispatch(actions.toggleEditMode(false, 'profileInfoEditMode'));\n      } else {\n        throw new ProfileDataSaveError(response.messages[0]);\n      }\n    } catch (err) {\n      throw err;\n    } finally {\n      dispatch(actions.toggleProfileDataSubmitting(false));\n    }\n  };\n}\n\n\n\nconst initialState = {\n  userProfile: null as UserProfileType | null,\n  userStatus: '',\n  inWaiting: false,\n  profileInfoEditMode: false,\n  profileDataIsSubmitting: false,\n  statusEditMode: false,\n  errorMessages: {\n    onSetPhotoErrorMessage: null,\n  } as ErrorMessagesType,\n}\n\n\nconst profilePageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n  \n    case SET_USER_PROFILE: {\n      return { ...state, userProfile: action.userData };\n    }\n\n    case SET_USER_STATUS: {\n      return { ...state, userStatus: action.text }\n    }\n\n    case SET_PHOTO: {\n      return {\n        ...state,\n        userProfile: {\n          ...state.userProfile as UserProfileType,\n          photos: action.photos,\n        }, /// !!! as UserProfileType\n      }\n    }\n\n    case TOGGLE_IN_WAITING:\n      return {\n        ...state,\n        inWaiting: action.inWaiting,\n      }\n\n    case TOGGLE_PROFILE_DATA_SUBMITTING:\n      return {\n        ...state,\n        profileDataIsSubmitting: action.isSubmitting,\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case TOGGLE_EDIT_MODE:\n      return {\n        ...state,\n        [action.fieldName]: action.state,\n      }\n\n\n\n    default:\n      return state;\n  }\n}\n\nexport default profilePageReducer;","import { ResultCodesEnum } from './../api/authApi';\nimport { InferActionsType, RootStateType } from './reduxStore';\nimport { Dispatch } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { usersAPI } from \"../api/usersApi\";\nimport { FollowUnfollowError } from \"../utils/errors/errors\";\nimport { PhotosType } from \"./profilePageReducer\";\nimport { OperationResultType } from '../api/indexApi';\n\nconst FOLLOW = 'social-network/users/FOLLOW';\nconst UNFOLLOW = 'social-network/users/UNFOLLOW';\nconst SET_USERS = 'social-network/users/SET_USERS';\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'social-network/users/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'social-network/users/TOGGLE_IS_FETCHING';\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'social-network/users/TOGGLE_FOLLOWING_IN_PROGRESS';\nconst SET_ERROR = 'social-network/users/SET_ERROR';\nconst SET_FILTER = 'social-network/users/SET_FILTER';\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>;\n\nexport type ErrorMessagesType = {\n  onFollowUnfollowErrorMessage: string | null;\n}\n\nexport const actions = {\n  follow: (userId: number) => ({ type: FOLLOW, userId }) as const,\n  unfollow: (userId: number) => ({ type: UNFOLLOW, userId }) as const,\n  setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }) as const,\n  setCurrentPage: (page: number) => ({ type: SET_CURRENT_PAGE, page }) as const,\n  setTotalCount: (totalCount: number) => ({ type: SET_TOTAL_COUNT, totalCount }) as const,\n  toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }) as const,\n  toggleFollowingProgress: (inProgress: boolean, id: number) => ({ type: TOGGLE_FOLLOWING_IN_PROGRESS, inProgress, id }) as const,\n  setError: (errorText: string | null, errorName: string) => ({ type: SET_ERROR, errorText, errorName }) as const,\n  setFilter: (payload: { term: string, friend: boolean | null }, page: number) => ({ type: SET_FILTER, payload, page }) as const,\n}\n\n\n\n\nlet followUnfollowErrorTimer: NodeJS.Timeout;\n\nconst followUnfollow = async (\n  dispatch: Dispatch<ActionsType>, apiMethod: (id: number) => Promise<OperationResultType>,\n  actionCreator: (userId: number) => ActionsType,\n  id: number\n) => {\n  try {\n    dispatch(actions.toggleFollowingProgress(true, id));\n\n    const response = await apiMethod(id);\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actionCreator(id))\n    } else {\n      throw new FollowUnfollowError(response.messages[0])\n    }\n  } catch (err) {\n    if (err instanceof FollowUnfollowError) {\n      dispatch(actions.setError(err.message, 'onFollowUnfollowErrorMessage'));\n\n      clearTimeout(followUnfollowErrorTimer);\n      followUnfollowErrorTimer = setTimeout(() => {\n        dispatch(actions.setError(null, 'onFollowUnfollowErrorMessage'));\n      }, 2000)\n    } else {\n      throw err;\n    }\n  } finally {\n    dispatch(actions.toggleFollowingProgress(false, id));\n  }\n}\n\nexport const followThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getFollow, actions.follow, id);\n  }\n}\n\nexport const unfollowThunk = (id: number): ThunkActionType => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    followUnfollow(dispatch, usersAPI.getUnfollow, actions.unfollow, id);\n  }\n}\n\n\nexport const getUsersListThunk = (pageSize: number, currentPage: number, searchValue: string, followersFilter: boolean | null): ThunkActionType => {\n  return async (dispatch: Dispatch<ActionsType>) => {\n    dispatch(actions.toggleIsFetching(true));\n\n    const response = await usersAPI.getUsersData(pageSize, currentPage, searchValue, followersFilter);\n\n    dispatch(actions.setUsers(response.items));\n    dispatch(actions.setTotalCount(response.totalCount));\n\n    dispatch(actions.toggleIsFetching(false));\n  }\n}\n\nexport type UserType = {\n  name: string\n  id: number\n  photos: PhotosType\n  status: string | null\n  followed: boolean\n}\n\n\nexport type FilterType = {\n  term: string;\n  friend: boolean | null;\n};\n\nexport type SetFilterType = typeof actions.setFilter;\nexport type SetCurrentPageType = typeof actions.setCurrentPage;\n\ntype InitialStateType = typeof initialState\n\nconst initialState = {\n  items: [] as Array<UserType>,\n  pageSize: 50,\n  currentPage: 1,\n  totalCount: 0,\n  isFetching: false,\n  followingInProgress: [] as Array<number>, // массив пользовательских id\n  errorMessages: {\n    onFollowUnfollowErrorMessage: null,\n  } as ErrorMessagesType,\n  filter: null as null | FilterType,\n};\n\nconst usersPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case FOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: true,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case UNFOLLOW:\n      return {\n        ...state,\n        items: [...state.items.map((item: any) => {\n          if (item.id === action.userId) {\n            return {\n              ...item,\n              followed: false,\n            }\n          }\n          return item;\n        })],\n      };\n\n    case SET_USERS:\n      return {\n        ...state,\n        items: action.users,\n      };\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.page,\n      };\n\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalCount: action.totalCount,\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n\n    case TOGGLE_FOLLOWING_IN_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.inProgress\n          ? [...state.followingInProgress, action.id]\n          : state.followingInProgress.filter(item => item !== action.id),\n      }\n\n    case SET_ERROR:\n      return {\n        ...state,\n        errorMessages: {\n          ...state.errorMessages,\n          [action.errorName]: action.errorText,\n        },\n      }\n\n    case SET_FILTER:\n      return {\n        ...state,\n        filter: {\n          // ...state.filter,\n          ...action.payload,\n        },\n        currentPage: action.page,\n      }\n\n\n    default:\n      return state;\n  }\n}\n\nexport default usersPageReducer;","import { UserType } from \"../redux/usersPageReducer\";\nimport { instance, OperationResultType } from './indexApi';\n\ntype GetUsersDataResponseType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n}\n\n\nexport const usersAPI = {\n  getFollow: (id: number) => {\n    return instance.post<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUnfollow: (id: number) => {\n    return instance.delete<OperationResultType>(`/follow/${id}`).then(res => res.data);\n  },\n\n\n  getUsersData: (count = 10, page: number, term: string, friend: boolean | null ) => {\n    // return instance.get(`/users?count=${pageSize}&page=${currentPage}&term=${searchStr}`).then(res => res.data);   \n    return instance.get<GetUsersDataResponseType>(`/users`, { params: {count, page, term, friend} }).then(res => res.data);\n  },\n}","import { InferActionsType } from \"./reduxStore\";\n\ntype InitialStateType = typeof initialState\n\ntype DialogType = {\n  id: number\n  name: string\n}\n\ntype MessageType = {\n  id: number\n  message: string\n  status: string\n}\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\nconst SEND_MESSAGE = 'social-network/dialogs-page/SEND-MESSAGE';\n\nexport const actions = {\n  sendMessage: (text: string) => ({ type: SEND_MESSAGE, text }) as const,\n}\n\n\nconst initialState = {\n  dialogs: [\n    {id: 1, name: 'Aaaa'},\n    {id: 2, name: 'Bbb'},\n    {id: 3, name: 'Ccc'},\n  ] as Array<DialogType>,\n  messages: [\n    {id: 1, message: 'Hey!', status: 'from'},\n    {id: 2, message: 'How are you?', status: 'from'},\n    {id: 3, message: 'Im ok)', status: 'to'},\n  ] as Array<MessageType>,\n}\n\nconst dialogsPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SEND_MESSAGE: {\n      return {\n        ...state, \n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length + 1, \n            status: 'to',\n            message: action.text,\n          }\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default dialogsPageReducer;","import { Alert, Snackbar } from '@mui/material';\nimport React from 'react';\n\n\n\n\n\nconst Error: React.FC<any> = ({ children, handleClose }) => {\n  return (\n    <Snackbar\n      open={true}\n      autoHideDuration={3000}\n      onClose={handleClose}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n    >\n      <Alert onClose={handleClose} severity=\"error\">\n        {children}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default Error; ","import { SubscriberMessageHandlerType, SubscriberStatusChangedHandlerType } from './../redux/chatReducer';\n\n\nexport type MessageDataType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n}\n\ntype SubscribeEventType = 'messagesReceived' | 'statusChanged';\n\n\n\nlet subscribers = {\n  'messagesReceived': [] as SubscriberMessageHandlerType[],\n  'statusChanged': [] as SubscriberStatusChangedHandlerType[],\n};\n\n// @ts-ignore\nwindow.subscribers = subscribers;\n\nlet wsChannel: WebSocket | null = null;\n\nlet timerId: NodeJS.Timeout; \n\n\n\nconst onOpenWsChannel = () => {\n  subscribers.statusChanged.forEach((item) => item(true));\n};\n\nconst onCloseWsChannel = () => {\n  subscribers.statusChanged.forEach((item) => item(false));\n  timerId = setTimeout(() => {\n    createWsChannel()\n  }, 3000)\n};\n\nconst onMessageWsChannel = (e: MessageEvent) => {\n  console.log('WS MESSAGE');\n  \n  const newMessages: Array<MessageDataType> = JSON.parse(e.data);\n  subscribers.messagesReceived.forEach((item) => item(newMessages));\n};\n\n\n\nconst cleanup = () => {\n  clearTimeout(timerId);\n  wsChannel?.removeEventListener('open', onOpenWsChannel);\n  wsChannel?.removeEventListener('close', onCloseWsChannel);\n  wsChannel?.removeEventListener('message', onMessageWsChannel);\n}\n\nconst createWsChannel = () => {\n  cleanup();\n  wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  wsChannel.addEventListener('open', onOpenWsChannel);\n  wsChannel.addEventListener('close', onCloseWsChannel);\n  wsChannel.addEventListener('message', onMessageWsChannel);\n}\n\n\n\nexport const chatApi = {\n  start() {\n    createWsChannel();\n  },\n\n  stop() {\n    cleanup();\n    wsChannel?.close();\n    subscribers.statusChanged.forEach((item) => item(false));\n  },\n\n  subscribe(event: SubscribeEventType, callback: SubscriberMessageHandlerType | SubscriberStatusChangedHandlerType) {\n    event === 'messagesReceived' && subscribers[event].push(callback as SubscriberMessageHandlerType);\n    event === 'statusChanged' && subscribers[event].push(callback as SubscriberStatusChangedHandlerType);\n\n    console.log(subscribers);\n  },\n\n  unsubscribe(event: SubscribeEventType, callback: SubscriberMessageHandlerType | SubscriberStatusChangedHandlerType) {\n    if (event === 'messagesReceived') {\n      subscribers[event] = subscribers[event].filter((item) => item !== callback);\n    }\n    if (event === 'statusChanged') {\n      subscribers[event] = subscribers[event].filter((item) => item !== callback);\n    }\n  },\n\n  send(message: string) {\n    wsChannel?.send(message);\n  }\n}\n","import { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { chatApi, MessageDataType } from \"../api/chatApi\";\nimport { InferActionsType, RootStateType } from \"./reduxStore\";\n\n\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsType<typeof actions>;\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\nexport type SubscriberMessageHandlerType = (messages: MessageDataType[]) => void;\nexport type SubscriberStatusChangedHandlerType = (status: boolean) => void;\n\n\n\n\nconst SET_MESSAGES = 'social-network/auth/SET_MESSAGES';\nconst SET_CHANNEL_STATUS = 'social-network/auth/SET_CHANNEL_STATUS';\n\n\nconst actions = {\n  setMessages: (messages: MessageDataType[]) => ({ type: SET_MESSAGES, messages } as const),\n  setChannelStatus: (status: boolean) => ({ type: SET_CHANNEL_STATUS, status } as const),\n}\n\n\n\nlet _subscriberMessageHandler: SubscriberMessageHandlerType;\nlet _subscriberStatusChangedHendler: SubscriberStatusChangedHandlerType;\n\nexport const startWsChannelListeningThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    chatApi.start();\n    _subscriberMessageHandler = (messages: MessageDataType[]) => {\n      dispatch(actions.setMessages(messages));\n    };\n    _subscriberStatusChangedHendler = (status: boolean) => {\n      dispatch(actions.setChannelStatus(status));\n    };\n    chatApi.subscribe('messagesReceived', _subscriberMessageHandler);\n    chatApi.subscribe('statusChanged', _subscriberStatusChangedHendler);\n  }\n}\n\nexport const stopWsChannelListeningThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    chatApi.stop();\n    chatApi.unsubscribe('messagesReceived', _subscriberMessageHandler);\n    chatApi.unsubscribe('statusChanged', _subscriberStatusChangedHendler);\n    dispatch(actions.setMessages([]));\n  };\n}\n\nexport const sendMessage = (message: string) => {\n  console.log('send');\n  \n  chatApi.send(message);\n};\n\n\n\n\nconst initialState = {\n  messages: [] as MessageDataType[],\n  channelStatus: false,\n}\n\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case SET_MESSAGES:\n      return {\n        ...state,\n        messages: action.messages.length > 1 ? action.messages : [...state.messages, ...action.messages],\n      };\n\n    case SET_CHANNEL_STATUS:\n      return {\n        ...state,\n        channelStatus: action.status,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\nexport default chatReducer;","import axios from \"axios\";\n\nexport type OperationResultType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n}\n\nexport const instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.0',\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"9d799735-d786-4c1b-bde9-09779c3bba07\" // ddr9626@yandex.ru\n    // \"API-KEY\": \"036c44c9-5c4a-4e50-8bd2-abc9e86b54f0\" // art9626@mail.ru\n  },\n});","import { LoginFormDataType } from './../redux/authReducer';\nimport { instance, OperationResultType } from './indexApi';\n\n\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n  CapthaIsRequired = 10,\n}\n\ntype LogautResponseType = {\n  resultCode: number;\n}\n\ntype AuthUserDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype LoginUserDataType = {\n  userId: number\n}\n\nexport const authAPI = {\n  getAuthUserData: () => {\n    return instance.get<OperationResultType<AuthUserDataType>>('/auth/me').then(res => res.data);\n  },\n\n  login: (formData: LoginFormDataType) => {\n    return instance.post<OperationResultType<LoginUserDataType>>('/auth/login', formData).then(res => res.data);\n  },\n\n  logout: () => {\n    return instance.post<LogautResponseType>('/auth/logout');\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { getAuthUser } from \"./authReducer\";\n\n\ntype InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsType<typeof actions>;\n\ntype ThunkActionType = ThunkAction<void, RootStateType, unknown, ActionsType>\n\n\nconst INIT_SUCCESS = 'social-network/app/INIT_SUCCESS';\n\nconst actions = {\n  initSuccess: () => ({ type: INIT_SUCCESS }) as const,\n}\n\n\n\n\nexport const initAppThunk = (): ThunkActionType => {\n  return (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    dispatch(getAuthUser())\n      .then(() => {\n        dispatch(actions.initSuccess())\n      });\n  }\n}\n\n\n\nconst initialState = {\n  init: false,\n}\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n\n    case INIT_SUCCESS:\n      return {\n        ...state,\n        init: true,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\n\n\n\nexport default appReducer;","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport authReducer from './authReducer';\nimport dialogsPageReducer from './dialogsPageReducer';\nimport profilePageReducer from './profilePageReducer';\nimport usersPageReducer from './usersPageReducer';\nimport thunkMiddleware from 'redux-thunk'\nimport appReducer from './appReducer';\nimport { reducer as formReducer } from 'redux-form'\nimport chatReducer from './chatReducer';\n\nconst rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  usersPage: usersPageReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n});\n\n// Создание store с расширением Redux Devtools\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// Создание store\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\n\n// Определяем тип state по возвращаемому объекту из метода getState\nexport type RootStateType = ReturnType<typeof store.getState>\n\n// Определяем тип state по возвращаемому объекту из функции rootReducer \n// (возвращает она тоже самое, что и метот getState, потому что rootReducer - это функция принимающая глобальный state и возвращающая его)\n// export type RootStateType = ReturnType<typeof rootReducer>\n\n\n\n// Динамически определяем тип actions\n// type InferActionCreatersType<T> = T extends {[key: string]: infer U} ? U : never;\n// export type InferActionsType<T extends {[key: string]: (...arg: any) => any}> = ReturnType<InferActionCreatersType<T>>;\n\n// То же самое в укороченной записи\nexport type InferActionsType<T> = T extends {[key: string]: (...arg: any) => infer U} ? U : never;\n\n\nexport default store;","import { createTheme, ThemeProvider } from '@mui/material';\nimport React, { createContext, useMemo, useState } from 'react';\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => { } });\n\nexport const ColorTheme: React.FC = ({ children }) => {\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  const colorMode = useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = createTheme({\n    palette: { \n      mode,\n    },\n  });\n\n  \n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};","import { AppBar, Avatar, Button, IconButton, Toolbar, Typography, useTheme } from '@mui/material';\nimport React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { logoutUserThunk } from '../../redux/authReducer';\nimport { getAuth } from '../../redux/authSelecrors';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { RootStateType } from '../../redux/reduxStore';\nimport { ColorModeContext } from '../common/ColorTheme';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\ntype PropsType = {\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Header: React.FC<PropsType> = React.memo(({ toggleNavbar }) => {\n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n  const userData = useSelector(getAuth);\n  const avatar = useSelector((state: RootStateType) => state.profilePage.userProfile?.photos.small)\n  const { isAuth, login } = userData;\n\n  const dispatch = useDispatch();\n\n  const logoutUser = () => dispatch(logoutUserThunk());\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <IconButton\n          onClick={toggleNavbar(true)}\n          size=\"large\"\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          sx={{ mr: 'auto' }}\n        >\n          <MenuIcon />\n        </IconButton>\n        {\n          isAuth === 'authorized'\n            ? <>\n              <Link to='/profile'>\n                <Avatar src={avatar as string} alt='User avatar' sx={{ mr: 3 }} />\n              </Link>\n              <Typography sx={{ mr: 5 }}>\n                {login}\n              </Typography>\n              <Button variant=\"contained\" color='error' onClick={logoutUser}>Logout</Button>\n            </>\n            : <Link to='/login'>Login</Link>\n        }\n        <IconButton sx={{ ml: 1 }} onClick={colorMode.toggleColorMode} color=\"inherit\">\n          {theme.palette.mode === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n\n  )\n});","import React from 'react';\nimport { NavLink, NavLinkProps, useLocation } from 'react-router-dom';\nimport { Divider, Drawer, List, ListItem, ListItemText } from '@mui/material';\nimport { Box } from '@mui/system';\n\ntype PropsType = {\n  navbarStatus: boolean;\n  toggleNavbar: (status: boolean) => (e: React.MouseEvent) => void;\n}\n\nexport const Navbar: React.FC<PropsType> = ({ navbarStatus, toggleNavbar }) => {\n  return (\n    <Drawer\n      anchor='left'\n      open={navbarStatus}\n      onClose={toggleNavbar(false)}\n    >\n      <img style={{ height: '50px', width: '50px', marginRight: 'auto' }} src=\"https://i.imgur.com/BrIpiK6.png\" />\n      <Box\n        sx={{ width: 250 }}\n        onClick={toggleNavbar(false)}\n        component='nav'\n      >\n        <List>\n          {\n            ['Profile', 'Dialogs', 'Chat', 'News', 'Music', 'Users'].map((item) => {\n              return (\n                <ListItemLink \n                  key={item} \n                  to={`/${item.toLowerCase()}`} \n                  primary={item} \n                />\n              );\n            })\n          }\n        </List>\n        <Divider />\n      </Box>\n    </Drawer >\n  )\n}\n\n\ntype ListItemLinkPropsType = {\n  primary: string;\n  to: string;\n}\n\nconst ListItemLink = (props: ListItemLinkPropsType) => {\n  const location = useLocation();\n  const { primary, to } = props;\n  const isMatchPath = location.pathname === to;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef<HTMLAnchorElement, Omit<NavLinkProps, 'to'>>(function Link(\n        itemProps,\n        ref,\n      ) {\n        return <NavLink\n          to={to} ref={ref}\n          {...itemProps} role={undefined}\n        />;\n      }),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem \n        button component={renderLink}\n        sx={ (theme) => (isMatchPath ? { bgcolor: theme.palette.action.hover,  color: theme.palette.info.main } : {}) } \n      >\n        <ListItemText \n          primary={primary} \n        />\n      </ListItem>\n    </li>\n  );\n}","import { Box, Container, LinearProgress } from '@mui/material';\nimport React, { Suspense, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Header } from '../Header/Header';\nimport { Navbar } from '../Navbar/Navbar';\n\nexport const Layout: React.FC = React.memo(() => {\n  const [navbarStatus, setNavbarStatus] = useState(false);\n\n  const toggleNavbar = (status: boolean) => (e: React.MouseEvent) => setNavbarStatus(status);\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        bgcolor: 'background.default',\n        color: 'text.primary',\n      }}\n    >\n      <Header toggleNavbar={toggleNavbar} />\n      <Box\n        component='main'\n      >\n        <Suspense fallback={<LinearProgress color='primary' />}>\n          <Container maxWidth='md'>\n            <Outlet />\n          </Container>\n        </Suspense>\n        <Navbar navbarStatus={navbarStatus} toggleNavbar={toggleNavbar} />\n      </Box>\n    </Box>\n  );\n})","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { getIsAuth } from '../../redux/authSelecrors';\n\n\nexport const Privat: React.FC = ({ children }) => {\n\n  const isAuth = useSelector(getIsAuth);\n  const location = useLocation();\n\n  if (isAuth === 'notAuthorized') {\n    return <Navigate to='/login' state={{ from: location.pathname }} />\n  };\n\n  return (\n    <>\n      {children}\n    </>\n  );\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getInit = (state: RootStateType) => state.app.init;","import React, { lazy, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport Error from './components/common/Error/Error';\nimport { Layout } from './components/Layout/Layout';\nimport { Privat } from './components/common/Private';\nimport { initAppThunk } from './redux/appReducer';\nimport { getInit } from './redux/appSelectors';\nimport { getAuth } from './redux/authSelecrors';\nimport { LinearProgress, } from '@mui/material';\nimport { ColorTheme } from './components/common/ColorTheme';\n\n\nconst DialogsPage = lazy(() => import('./components/Dialogs/DialogsPage'));\nconst LoginPage = lazy(() => import('./components/Login/LoginPage'));\nconst ProfilePage = lazy(() => import('./components/Profile/ProfilePage'));\nconst UsersPage = lazy(() => import('./components/Users/UsersPage'));\nconst ChatPage = lazy(() => import('./components/Chat/ChatPage'));\nconst Music = lazy(() => import('./components/Music/Music'));\nconst News = lazy(() => import('./components/News/News'));\n\n\n\nconst App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState<null | string>(null);\n  const init = useSelector(getInit);\n  const auth = useSelector(getAuth);\n\n  const dispatch = useDispatch();\n\n  const initApp = () => dispatch(initAppThunk());\n\n  const catchUnhandledErrors = (e: PromiseRejectionEvent) => {\n    setErrorMessage(e.reason.message);\n  }\n\n  useEffect(() => {\n    initApp();\n    window.addEventListener('unhandledrejection', catchUnhandledErrors);\n\n    return () => window.removeEventListener('unhandledrejection', catchUnhandledErrors);\n  }, [])\n\n  const handleCloseError = (event: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setErrorMessage(null);\n  };\n\n\n\n  if (!init) return <LinearProgress color='primary' />;\n\n  return (\n    <ColorTheme>\n      {\n        errorMessage\n        && <Error\n            handleClose={handleCloseError}\n          >\n            {errorMessage}\n          </Error>\n      }\n\n      <Routes>\n        <Route path='/' element={<Layout />}>\n          <Route index element={auth.isAuth === 'authorized' ? <Navigate to='/profile' /> : <div>Registration</div>} />\n          <Route path='login' element={<LoginPage />} />\n          <Route\n            path='profile/'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='profile/:id'\n            element={\n              <Privat>\n                <ProfilePage />\n              </Privat>\n            }\n          />\n          <Route\n            path='dialogs/*'\n            element={\n              <Privat>\n                <DialogsPage />\n              </Privat>\n            }\n          />\n          <Route\n            path='chat'\n            element={\n              <Privat>\n                <ChatPage />\n              </Privat>\n            }\n          />\n          <Route path='users' element={<UsersPage />} />\n          <Route path='news' element={<News />} />\n          <Route path='music' element={<Music />} />\n          <Route path='*' element={<div>Error 404 Page not found</div>} />\n        </Route>\n      </Routes>\n    </ColorTheme>\n  );\n}\n\nexport default App;","import './index.css';\n// import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter  } from 'react-router-dom';\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n\nReactDOM.render(\n\n  // HashRouter using only for git hab pages diploy!!!\n  <HashRouter>\n  {/* <BrowserRouter> */}\n      <Provider store={store}>\n        <App />\n      </Provider>\n  {/* </BrowserRouter>, */}\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","export class FollowUnfollowError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'FollowUnfollowError';\n  }\n}\n\nexport class ProfileDataSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfileDataSaveError';\n  }\n}\n\nexport class ProfileStatusSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfileStatusSaveError';\n  }\n}\n\nexport class ProfilePhotoSaveError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProfilePhotoSaveError';\n  }\n}","import { RootStateType } from \"./reduxStore\";\n\nexport const getAuth = (state: RootStateType) => state.auth;\n\nexport const getIsAuth = (state: RootStateType) => state.auth.isAuth;\n\nexport const getCaptchaUrl = (state: RootStateType) => state.auth.captchaUrl;","import { instance } from \"./indexApi\";\n\n\ntype GetCaptchaResponseType = {\n  url: string;\n}\n\n\nexport const securityAPI = {\n  getCaptchaUrl: () => {\n    return instance.get<GetCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\n  },\n}","import { InferActionsType, RootStateType } from './reduxStore';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { authAPI, ResultCodesEnum } from \"../api/authApi\";\nimport { securityAPI } from \"../api/securityApi\";\n\n\ntype AuthUserDataType = {\n  email: string | null;\n  id: number | null;\n  login: string | null;\n}\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n}\n\nexport type FieldsNamesType = keyof LoginFormDataType;\n\n\nexport type IsAuthType = 'notAuthorized' | 'authorized';\n\nexport type InitialStateType = typeof initialState;\n\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsType>;\n\n\n\n\nconst SET_AUTH_USER_DATA = 'social-network/auth/SET_AUTH_USER_DATA';\nconst SET_CAPTCHA_URL = 'social-network/auth/SET_CAPTCHA_URL';\n\nconst actions = {\n  setAuthUserData: (data: AuthUserDataType, isAuth: IsAuthType) => ({ type: SET_AUTH_USER_DATA, data, isAuth }) as const,\n  setCaptchaUrl: (url: string) => ({ type: SET_CAPTCHA_URL, url }) as const,\n}\n\n\ntype ActionsType = InferActionsType<typeof actions>;\n\n\n\nexport const getAuthUser = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n\n    const response = await authAPI.getAuthUserData()\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData(response.data, 'authorized'));\n    }\n  }\n}\n\nexport const loginUserThunk = (formData: LoginFormDataType): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType | FormAction>) => { // FormAction тип экшена, который возвращаее stopSubmit\n    const response = await authAPI.login(formData)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUser());\n    } else {\n      if (response.resultCode === ResultCodesEnum.CapthaIsRequired) {\n        dispatch(setCaptchaUrl());\n      }\n      dispatch(stopSubmit('login', { _error: response.messages[0] }));\n    }\n  }\n}\n\nexport const logoutUserThunk = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setAuthUserData({ id: null, login: null, email: null }, 'notAuthorized'));\n    }\n  }\n}\n\nconst setCaptchaUrl = (): ThunkActionType => {\n  return async (dispatch: ThunkDispatch<RootStateType, unknown, ActionsType>) => {\n    const response = await securityAPI.getCaptchaUrl();\n    dispatch(actions.setCaptchaUrl(response.url));\n  }\n}\n\nconst initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: 'notAuthorized' as IsAuthType,\n  captchaUrl: null as string | null,\n}\n\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isAuth: action.isAuth,\n      };\n\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.url,\n      };\n\n\n    default:\n      return state;\n  }\n}\n\nexport default authReducer;"],"sourceRoot":""}