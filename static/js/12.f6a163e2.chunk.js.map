{"version":3,"sources":["components/Chat/ChatPage.tsx"],"names":["ChatPage","React","memo","useState","messages","setMessages","socket","setSocket","isDisabledButton","readyState","useEffect","onCloseWs","setTimeout","onMessageWs","e","newMessages","JSON","parse","data","length","prevState","newChannel","WebSocket","addEventListener","removeEventListener","close","MessagesList","SendMessageForm","sendNewMessage","message","send","style","width","height","border","overflowY","map","item","index","Message","messageData","photo","userName","src","alt","backgroundColor","newMessage","setNewMessage","onSubmit","preventDefault","onChange","target","value","name","disabled"],"mappings":"2JAUMA,EAAqBC,IAAMC,MAAK,WACpC,MAAgCC,mBAAiC,IAAjE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAA2B,MAAvD,mBAAOG,EAAP,KAAeC,EAAf,KACMC,IAA4C,KAAjB,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQG,aAyCnC,OAjCAC,qBAAU,WACR,IAAMC,EAAY,WAChBC,YAAW,WACTL,EAAU,QACT,MAGCM,EAAc,SAACC,GACnB,IAAMC,EAAsCC,KAAKC,MAAMH,EAAEI,MAE9B,IAAvBH,EAAYI,OACdd,GAAY,SAACe,GAAD,4BAAmBA,GAAnB,YAAiCL,OAE7CV,EAAYU,IAIhB,IAAKT,EAAQ,CACX,IAAMe,EAAa,IAAIC,UAAU,gEACjCD,EAAWE,iBAAiB,QAASZ,GACrCU,EAAWE,iBAAiB,UAAWV,GAEvCN,EAAUc,GAGZ,OAAO,WACC,OAANf,QAAM,IAANA,KAAQkB,oBAAoB,QAASb,GAC/B,OAANL,QAAM,IAANA,KAAQkB,oBAAoB,UAAWX,GACjC,OAANP,QAAM,IAANA,KAAQmB,WAET,CAACnB,IAIF,qCACE,cAACoB,EAAD,CAActB,SAAUA,IACxB,cAACuB,EAAD,CAAiBC,eA3CE,SAACC,GAClBvB,GACFA,EAAOwB,KAAKD,IAyCqCrB,iBAAkBA,UAWnEkB,EAAgDzB,IAAMC,MAAK,YAAmB,IAAhBE,EAAe,EAAfA,SAClE,OACE,oBAAI2B,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,kBAAmBC,UAAW,UAAlF,SAEI/B,EAASgC,KAAI,SAACC,EAAuBC,GACnC,OACE,cAACC,EAAD,CAAqBC,YAAaH,GAApBC,WAcpBC,EAAsCtC,IAAMC,MAAK,YAAsB,IAAnBsC,EAAkB,EAAlBA,YAChDC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUb,EAAYW,EAAZX,QAEzB,OACE,+BACE,gCAEIY,EACI,qBAAKE,IAAG,UAAKF,GAASG,IAAI,SAASb,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UACnE,qBAAKF,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQY,gBAAiB,WAEnEH,KAEH,8BACGb,IAEH,6BAYAF,EAAsD1B,IAAMC,MAAK,YAA2C,IAAxC0B,EAAuC,EAAvCA,eAAgBpB,EAAuB,EAAvBA,iBACxF,EAAoCL,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmBC,EAAnB,KAYA,OACE,uBAAMC,SAXa,SAAClC,GACpBA,EAAEmC,iBAEGH,IAGLlB,EAAekB,GACfC,EAAc,MAId,UACE,0BAAUG,SAAU,SAACpC,GAAD,OAAOiC,EAAcjC,EAAEqC,OAAOC,QAAQA,MAAON,EAAYO,KAAK,eAClF,wBAAQC,SAAU9C,EAAlB,wBAKSR","file":"static/js/12.f6a163e2.chunk.js","sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react';\n\n\ntype MessageDataType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n}\n\nconst ChatPage: React.FC = React.memo(() => {\n  const [messages, setMessages] = useState<Array<MessageDataType>>([]);\n  const [socket, setSocket] = useState<null | WebSocket>(null);\n  const isDisabledButton = !(socket?.readyState === 1);\n  const sendNewMessage = (message: string) => {\n    if (socket) {\n      socket.send(message);\n    }\n  }\n\n  \n  useEffect(() => {\n    const onCloseWs = () => {\n      setTimeout(() => {\n        setSocket(null);\n      }, 3000);\n    };\n\n    const onMessageWs = (e: MessageEvent) => {\n      const newMessages: Array<MessageDataType> = JSON.parse(e.data);\n\n      if (newMessages.length === 1) {\n        setMessages((prevState) => [...prevState, ...newMessages]);\n      } else {\n        setMessages(newMessages);\n      }\n    };\n\n    if (!socket) {\n      const newChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n      newChannel.addEventListener('close', onCloseWs);\n      newChannel.addEventListener('message', onMessageWs)\n\n      setSocket(newChannel);\n    }\n\n    return () => {\n      socket?.removeEventListener('close', onCloseWs);\n      socket?.removeEventListener('message', onMessageWs);\n      socket?.close();\n    };\n  }, [socket]);\n  \n\n  return (\n    <>\n      <MessagesList messages={messages} />\n      <SendMessageForm sendNewMessage={sendNewMessage} isDisabledButton={isDisabledButton} />\n    </>\n  );\n});\n\n\n\ntype MessagesListPropsType = {\n  messages: Array<MessageDataType>;\n}\n\nconst MessagesList: React.FC<MessagesListPropsType> = React.memo(({ messages }) => {\n  return (\n    <ul style={{ width: '100%', height: '70vh', border: '1px solid black', overflowY: 'scroll' }}>\n      {\n        messages.map((item: MessageDataType, index: number) => {\n          return (\n            <Message key={index} messageData={item} />\n          );\n        })\n      }\n    </ul>\n  );\n});\n\n\n\ntype MessagePropsType = {\n  messageData: MessageDataType;\n}\n\nconst Message: React.FC<MessagePropsType> = React.memo(({ messageData }) => {\n  const { photo, userName, message } = messageData;\n\n  return (\n    <li>\n      <div>\n        {\n          photo\n            ? <img src={`${photo}`} alt=\"Avatar\" style={{ width: '30px', height: '30px' }} />\n            : <div style={{ width: '30px', height: '30px', backgroundColor: 'green' }}></div>\n        }\n        {userName}\n      </div>\n      <div>\n        {message}\n      </div>\n      <hr />\n    </li>\n  );\n});\n\n\n\ntype SendMessageFormPropsType = {\n  sendNewMessage: (message: string) => void;\n  isDisabledButton: boolean;\n}\n\nconst SendMessageForm: React.FC<SendMessageFormPropsType> = React.memo(({ sendNewMessage, isDisabledButton }) => {\n  const [newMessage, setNewMessage] = useState('');\n\n  const onSubmitForm = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!newMessage) {\n      return;\n    }\n    sendNewMessage(newMessage);\n    setNewMessage('');\n  }\n\n  return (\n    <form onSubmit={onSubmitForm}>\n      <textarea onChange={(e) => setNewMessage(e.target.value)} value={newMessage} name=\"newMessage\"></textarea>\n      <button disabled={isDisabledButton}>Send</button>\n    </form>\n  );\n});\n\nexport default ChatPage;"],"sourceRoot":""}