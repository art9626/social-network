{"version":3,"sources":["components/Chat/ChatPage.tsx"],"names":["MessagesList","messages","style","width","height","border","overflowY","map","item","index","Message","messageData","photo","userName","message","src","alt","backgroundColor","SendMessageForm","sendNewMessage","useState","newMessage","setNewMessage","onSubmit","e","preventDefault","onChange","target","value","name","ChatPage","setMessages","socket","setSocket","useEffect","WebSocket","addEventListener","onMessageWs","onOpenWs","onCloseWs","console","log","newMessages","JSON","parse","data","prevState","readyState","send"],"mappings":"kJAwEMA,EAAgD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvD,OACE,oBAAIC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,kBAAmBC,UAAW,UAAlF,SAEIL,EAASM,KAAI,SAACC,EAAuBC,GACnC,OACE,cAACC,EAAD,CAAqBC,YAAaH,GAApBC,SAcpBC,EAAsC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrCC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,QAEzB,OACE,+BACE,gCAEIF,EACI,qBAAKG,IAAG,UAAKH,GAASI,IAAI,SAASd,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UACnE,qBAAKF,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQa,gBAAiB,WAEnEJ,KAEH,8BACGC,IAEH,2BAWAI,EAAsD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC7D,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,uBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEGJ,IAGLF,EAAeE,GACfC,EAAc,MAId,UACE,0BAAUI,SAAU,SAACF,GAAD,OAAOF,EAAcE,EAAEG,OAAOC,QAAQA,MAAOP,EAAYQ,KAAK,eAClF,8CAKSC,UAlIY,WACzB,MAAgCV,mBAAiC,IAAjE,mBAAOnB,EAAP,KAAiB8B,EAAjB,KACA,EAA4BX,mBAA2B,MAAvD,mBAAOY,EAAP,KAAeC,EAAf,KAIAC,qBAAU,WACND,EAAU,IAAIE,UAAU,mEACzB,IAEHD,qBAAU,WACJF,IACFA,EAAOI,iBAAiB,UAAWC,GACnCL,EAAOI,iBAAiB,OAAQE,GAChCN,EAAOI,iBAAiB,QAASG,MAQlC,CAACP,IAEJ,IAAMO,EAAY,WAChBC,QAAQC,IAAI,aAGRH,EAAW,WACfE,QAAQC,IAAI,YAIRJ,EAAc,SAACb,GACnBgB,QAAQC,IAAI,cAEZ,IAAMC,EAAcC,KAAKC,MAAMpB,EAAEqB,MACjCd,GAAY,SAACe,GAAD,4BAAmBA,GAAnB,YAAiCJ,QAW/C,OACE,qCACE,cAAC1C,EAAD,CAAcC,SAAUA,IACxB,cAACiB,EAAD,CAAiBC,eAXE,SAACL,GAClBkB,IACFQ,QAAQC,IAAIT,EAAOe,YAEnBf,EAAOgB,KAAKlC","file":"static/js/12.3a6f9d38.chunk.js","sourcesContent":["import React, { FormEvent, useEffect, useState } from 'react';\n\n\ntype MessageDataType = {\n  message: string;\n  photo: string;\n  userId: number;\n  userName: string;\n}\n\nconst ChatPage: React.FC = () => {\n  const [messages, setMessages] = useState<Array<MessageDataType>>([]);\n  const [socket, setSocket] = useState<null | WebSocket>(null);\n\n\n\n  useEffect(() => {\n      setSocket(new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'));\n  }, []);\n\n  useEffect(() => {\n    if (socket) {\n      socket.addEventListener('message', onMessageWs);\n      socket.addEventListener('open', onOpenWs);\n      socket.addEventListener('close', onCloseWs);\n    }\n\n    // return () => {\n    //   if (socket) {\n    //     socket?.close();\n    //   }\n    // };\n  }, [socket]);\n\n  const onCloseWs = () => {\n    console.log('WS CLOSE');\n  };\n\n  const onOpenWs = () => {\n    console.log('WS OPEN');\n  };\n\n\n  const onMessageWs = (e: MessageEvent) => {\n    console.log('WS MESSAGE');\n    \n    const newMessages = JSON.parse(e.data);\n    setMessages((prevState) => [...prevState, ...newMessages]);\n  };\n\n  const sendNewMessage = (message: string) => {\n    if (socket) {\n      console.log(socket.readyState);\n      \n      socket.send(message);\n    }\n  }\n\n  return (\n    <>\n      <MessagesList messages={messages} />\n      <SendMessageForm sendNewMessage={sendNewMessage} />\n    </>\n  );\n};\n\n\n\ntype MessagesListPropsType = {\n  messages: Array<MessageDataType>;\n}\n\nconst MessagesList: React.FC<MessagesListPropsType> = ({ messages }) => {\n  return (\n    <ul style={{ width: '100%', height: '70vh', border: '1px solid black', overflowY: 'scroll' }}>\n      {\n        messages.map((item: MessageDataType, index: number) => {\n          return (\n            <Message key={index} messageData={item} />\n          );\n        })\n      }\n    </ul>\n  );\n}\n\n\n\ntype MessagePropsType = {\n  messageData: MessageDataType;\n}\n\nconst Message: React.FC<MessagePropsType> = ({ messageData }) => {\n  const { photo, userName, message } = messageData;\n\n  return (\n    <li>\n      <div>\n        {\n          photo\n            ? <img src={`${photo}`} alt=\"Avatar\" style={{ width: '30px', height: '30px' }} />\n            : <div style={{ width: '30px', height: '30px', backgroundColor: 'green' }}></div>\n        }\n        {userName}\n      </div>\n      <div>\n        {message}\n      </div>\n      <hr />\n    </li>\n  );\n}\n\n\n\ntype SendMessageFormPropsType = {\n  sendNewMessage: (message: string) => void;\n}\n\nconst SendMessageForm: React.FC<SendMessageFormPropsType> = ({ sendNewMessage }) => {\n  const [newMessage, setNewMessage] = useState('');\n\n  const onSubmitForm = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!newMessage) {\n      return;\n    }\n    sendNewMessage(newMessage);\n    setNewMessage('');\n  }\n\n  return (\n    <form onSubmit={onSubmitForm}>\n      <textarea onChange={(e) => setNewMessage(e.target.value)} value={newMessage} name=\"newMessage\"></textarea>\n      <button>Send</button>\n    </form>\n  );\n}\n\nexport default ChatPage;"],"sourceRoot":""}