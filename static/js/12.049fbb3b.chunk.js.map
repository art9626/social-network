{"version":3,"sources":["../node_modules/@mui/icons-material/Send.js","../node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js","redux/chatSelecror.ts","components/Chat/ChatPage.tsx"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","_extends","minWidth","flexShrink","marginTop","ListItemAvatar","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","context","ListContext","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","getMessages","state","chat","messages","getChannelStatus","channelStatus","ChatPage","memo","dispatch","useDispatch","useEffect","startWsChannelListeningThunk","stopWsChannelListeningThunk","Box","sx","display","flexDirection","justifyContent","height","paddingBottom","MessagesList","SendMessageForm","useSelector","messagesAnchor","useRef","useState","scrollIsActive","setScrollIsActive","current","scrollIntoView","List","width","margin","padding","paddingTop","color","overflowY","onScroll","e","currentTarget","scrollHeight","clientHeight","scrollTop","map","item","index","Message","messageData","photo","userName","message","userId","isOwner","getAuth","id","ListItem","alignSelf","maxWidth","marginBottom","backgroundColor","borderRadius","to","Avatar","src","alt","style","ListItemText","primary","secondary","Typography","component","variant","newMessage","setNewMessage","onSubmit","preventDefault","sendMessage","TextField","onChange","target","autoComplete","multiline","rows","Button","type","endIcon","disabled"],"mappings":"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","file":"static/js/12.049fbb3b.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport ListContext from '../List/ListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemAvatarUtilityClass } from './listItemAvatarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\n\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 56,\n  flexShrink: 0\n}, ownerState.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = React.useContext(ListContext);\n\n  const ownerState = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;","import { RootStateType } from './reduxStore';\n\nexport const getMessages = (state: RootStateType) => state.chat.messages;\n\nexport const getChannelStatus = (state: RootStateType) => state.chat.channelStatus;","import { Avatar, Box, Button, List, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@mui/material';\nimport React, { FormEvent, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MessageDataType } from '../../api/chatApi';\nimport { getAuth } from '../../redux/authSelecrors';\nimport { stopWsChannelListeningThunk, sendMessage, startWsChannelListeningThunk } from '../../redux/chatReducer';\nimport { getChannelStatus, getMessages } from '../../redux/chatSelecror';\nimport SendIcon from '@mui/icons-material/Send';\nimport { NavLink } from 'react-router-dom';\n\n\n\n\nconst ChatPage: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n\n  const startWsChannelListening = () => dispatch(startWsChannelListeningThunk());\n  const stopWsChannelListening = () => dispatch(stopWsChannelListeningThunk());\n\n  useEffect(() => {\n    startWsChannelListening();\n\n    return () => {\n      stopWsChannelListening();\n    }\n  }, []);\n\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'calc(100vh - 64px)',\n        paddingBottom: '20px',\n      }}\n    >\n      <MessagesList />\n      <SendMessageForm />\n    </Box>\n  );\n});\n\n\n\n\nconst MessagesList: React.FC = React.memo(() => {\n  const messages = useSelector(getMessages);\n  const messagesAnchor = useRef<HTMLDivElement>(null);\n  const [scrollIsActive, setScrollIsActive] = useState(true);\n\n  const onScrollHandler = (e: React.UIEvent<HTMLUListElement, UIEvent>) => {\n    const { scrollHeight, clientHeight, scrollTop } = e.currentTarget;\n\n    if ((scrollHeight - clientHeight) - scrollTop > 50) {\n      scrollIsActive && setScrollIsActive(false);\n    } else {\n      scrollIsActive || setScrollIsActive(true);\n    }\n\n  }\n\n  useEffect(() => {\n    scrollIsActive && messagesAnchor.current?.scrollIntoView();\n  }, [messages])\n\n\n\n  return (\n    <List\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        height: '100%',\n        margin: '0',\n        padding: '0 30px',\n        paddingTop: '20px',\n        color: 'grey.50',\n        overflowY: 'scroll',\n      }}\n      onScroll={onScrollHandler}\n    >\n      {\n        messages.map((item: MessageDataType, index: number) => {\n          return (\n            <Message key={index} messageData={item} />\n          );\n        })\n      }\n      <div ref={messagesAnchor}></div>\n    </List>\n  );\n});\n\n\n\ntype MessagePropsType = {\n  messageData: MessageDataType;\n}\n\nconst Message: React.FC<MessagePropsType> = React.memo(({ messageData }) => {\n  const { photo, userName, message, userId } = messageData;\n  const { id } = useSelector(getAuth);\n  const isOwner = userId === id;\n\n  return (\n    <ListItem\n      sx={{\n        alignSelf: isOwner ? 'flex-end' : 'flex-start',\n        width: 'fit-content',\n        maxWidth: '300px',\n        marginBottom: '20px',\n        backgroundColor: isOwner ? 'success.light' : 'success.dark',\n        borderRadius: '5px',\n      }}\n    >\n      <ListItemAvatar>\n        <NavLink to={`/profile/${userId}`}>\n          <Avatar>\n            {\n              photo && <img src={`${photo}`} alt=\"Avatar\" style={{ width: '50px', height: '50px' }} />\n            }\n          </Avatar>\n        </NavLink>\n      </ListItemAvatar>\n      <ListItemText\n        primary={userName}\n        secondary={\n          <>\n            <Typography\n              component='span'\n              color='white'\n              variant='body2'\n            >\n              {message}\n            </Typography>\n          </>\n        }\n      />\n    </ListItem>\n  );\n});\n\n\n\n\nconst SendMessageForm: React.FC = React.memo(() => {\n  const [newMessage, setNewMessage] = useState('');\n  const channelStatus = useSelector(getChannelStatus);\n\n  const onSubmitForm = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (!newMessage) {\n      return;\n    }\n    sendMessage(newMessage);\n    setNewMessage('');\n  }\n\n  return (\n    <Box\n      component='form'\n      onSubmit={onSubmitForm}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField\n        onChange={(e) => setNewMessage(e.target.value)}\n        variant=\"outlined\"\n        value={newMessage}\n        name=\"newMessage\"\n        autoComplete='off'\n        multiline\n        rows={2}\n        sx={{\n          width: '100%',\n          marginBottom: '5px',\n        }}\n      />\n\n      <Button\n        type='submit'\n        variant=\"contained\"\n        endIcon={<SendIcon />}\n        disabled={!channelStatus}\n      >\n        Send\n      </Button>\n    </Box>\n  );\n});\n\nexport default ChatPage;"],"sourceRoot":""}