{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","utils/validators/validators.ts","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","redux/dialogsPageSelectors.ts","components/Dialogs/DialogsPage.tsx"],"names":["Textarea","input","meta","touched","error","placeholder","className","classes","formControl","formControlTextarea","errorMessage","Input","type","label","inputTypeClass","formControlCheckbox","formControlInput","classNames","module","exports","max","DialogItem","id","name","item","to","Message","status","text","classFrom","message","from","classTo","required","value","undefined","reduxForm","form","handleSubmit","onSubmit","Field","component","validate","getDialogs","state","dialogsPage","dialogs","getMessages","messages","DialogsPage","React","memo","useSelector","dispatch","useDispatch","dialogsElements","map","messagesElements","list","messagesContainer","values","newMessage","actions","sendMessage","reset"],"mappings":"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","file":"static/js/5.1f2d7c9e.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './FormControls.module.css'\nimport classNames from 'classnames';\nimport { WrappedFieldProps } from 'redux-form';\n\ntype TextareaPropsType = WrappedFieldProps & {placeholder: string}\n\nexport const Textarea: React.FC<TextareaPropsType> = ({ input, meta: { touched, error }, placeholder }) => {\n  return (\n    <div className={classes.formControl}>\n      <textarea\n        {...input}\n        placeholder={placeholder}\n        className={touched && error ? `${classes.error} ${classes.formControlTextarea}` : classes.formControlTextarea}>\n      </textarea>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}\n\ntype InputPropsType = WrappedFieldProps & {type: string, label: string}\n\nexport const Input:  React.FC<InputPropsType> = ({ input, meta: { touched, error }, type, label }) => {\n  const inputTypeClass = type === 'checkbox' ? classes.formControlCheckbox : classes.formControlInput;\n\n  return (\n    <div className={classes.formControl}>\n      <label>{label}</label>\n      <input\n        {...input}\n        type={type}\n        className={classNames(inputTypeClass, { [classes.error]: touched && error })}\n      />\n\n\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"formControlTextarea\":\"FormControls_formControlTextarea__5AIlH\",\"formControlInput\":\"FormControls_formControlInput__gNBr0\",\"formControlCheckbox\":\"FormControls_formControlCheckbox__2ILOp\",\"error\":\"FormControls_error__24y5C\",\"errorMessage\":\"FormControls_errorMessage__NDl_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\",\"from\":\"Message_from__215MN\",\"to\":\"Message_to__3TBUh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messagesContainer\":\"Dialogs_messagesContainer__eYApo\"};","\nconst maxLength = (max: number) => {\n  return (value: string) => value && value.length > max ? `Max length is ${max} symbols` : undefined;\n}\n\n\n\nexport const maxLength300 = maxLength(300);\n\nexport const required = (value: string) => value ? undefined : 'Field is required';\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './DialogsItem.module.css'\n\ntype PropsType = {\n  id: number;\n  name: string;\n}\n\nconst DialogItem: React.FC<PropsType> = ({ id, name }) => {\n  return (\n    <li className={classes.item}>\n      <NavLink to={`/dialogs/${id}`}>\n        {name}\n      </NavLink>\n    </li>\n  );\n}\n\nexport default DialogItem;","import React from 'react';\nimport classes from './Message.module.css'\n\ntype PropsType = {\n  status: string;\n  text: string;\n}\n\nconst Message: React.FC<PropsType> = ({ status, text }) => {\n  const classFrom = `${classes.message} ${classes.from}`;\n  const classTo = `${classes.message} ${classes.to}`;\n\n\n  return (\n    <div className={status === 'from' ? classFrom : classTo} >\n      {text}\n    </div>\n  )\n}\n\nexport default Message;","import React from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { required } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormControls/FormControls';\nimport { AddMessageFormDataType } from '../DialogsPage';\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        name='newMessage'\n        component={Textarea}\n        placeholder='Enter your message'\n        validate={[required]}\n      />\n      <button>Send</button>\n    </form>\n  )\n};\n\nexport default reduxForm<AddMessageFormDataType>({ form: 'dialogsAddMessageForm' })(AddMessageForm);","import { RootStateType } from './reduxStore';\n\nexport const getDialogs = (state: RootStateType) => state.dialogsPage.dialogs;\n\nexport const getMessages = (state: RootStateType) => state.dialogsPage.messages;","import React from 'react';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Message/Message';\nimport classes from './Dialogs.module.css';\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getDialogs, getMessages } from '../../redux/dialogsPageSelectors';\nimport { reset } from 'redux-form';\nimport { actions } from '../../redux/dialogsPageReducer';\n\nexport type AddMessageFormDataType = {\n  newMessage: string;\n}\n\nconst DialogsPage: React.FC = React.memo(() => {\n  const dialogs = useSelector(getDialogs);\n  const messages = useSelector(getMessages);\n\n  const dispatch = useDispatch();\n\n  const resetForm = (form: string) => dispatch(reset(form));\n  const sendMessage = (text: string) => dispatch(actions.sendMessage(text));\n\n  const dialogsElements = dialogs\n    .map(item => <DialogItem key={item.id} name={item.name} id={item.id} />)\n  const messagesElements = messages\n    .map(item => <Message key={item.id} text={item.message} status={item.status} />)\n\n\n  const addNewMessage = (values: AddMessageFormDataType) => {\n    sendMessage(values.newMessage);\n    resetForm('dialogsAddMessageForm');\n  }\n\n  return (\n    <div className={classes.dialogs}>\n      <ul className={classes.list}>\n        {dialogsElements}\n      </ul>\n\n      <div className={classes.messagesContainer}>\n        {messagesElements}\n        <AddMessageForm onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n});\n\nexport default DialogsPage;"],"sourceRoot":""}