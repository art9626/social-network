{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","assets/images/user-icon.jpeg","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.module.css","redux/profileSelecrors.ts","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withUrlData.tsx"],"names":["Textarea","input","meta","touched","error","placeholder","className","classes","formControl","formControlTextarea","errorMessage","Input","type","label","inputTypeClass","formControlCheckbox","formControlInput","classNames","module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","max","maxLength300","value","undefined","required","WithAuthRedirect","WrappedComponent","connect","state","isAuth","auth","props","location","useLocation","to","from","pathname","getUserProfile","profilePage","userProfile","getUserStatus","userStatus","getPosts","posts","getInWaiting","inWaiting","getErrorMessages","errorMessages","reduxForm","form","handleSubmit","onSubmit","Field","name","component","validate","Post","message","likeCount","item","avatar","src","MyPosts","addPost","resetForm","postsElements","map","likesCount","id","values","newPost","React","memo","Contact","contactName","contactValue","ProfileData","activeEditMode","isOwner","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","onClick","deactiveEditMode","ProfilePhoto","setPhoto","Preloader","photos","large","userIcon","userPhoto","alt","onChange","e","files","disabled","ProfileStatusWithHooks","setUserStatus","setError","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","onDoubleClick","ProfileInfo","setProfileData","profileContent","onSetPhotoErrorMessage","initialValues","then","catch","err","ProfileDataSaveError","ProfileStatus","onSetStatusErrorMessage","Profile","reset","ProfileContainer","userId","this","getProfile","getStatus","getCurrentUserData","prevProps","Component","connector","getAuth","actions","compose","useParams","userID"],"mappings":"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","file":"static/js/4.fd8b5877.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './FormControls.module.css'\nimport classNames from 'classnames';\nimport { WrappedFieldProps } from 'redux-form';\n\ntype TextareaPropsType = WrappedFieldProps & {placeholder: string}\n\nexport const Textarea: React.FC<TextareaPropsType> = ({ input, meta: { touched, error }, placeholder }) => {\n  return (\n    <div className={classes.formControl}>\n      <textarea\n        {...input}\n        placeholder={placeholder}\n        className={touched && error ? `${classes.error} ${classes.formControlTextarea}` : classes.formControlTextarea}>\n      </textarea>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}\n\ntype InputPropsType = WrappedFieldProps & {type: string, label: string}\n\nexport const Input:  React.FC<InputPropsType> = ({ input, meta: { touched, error }, type, label }) => {\n  const inputTypeClass = type === 'checkbox' ? classes.formControlCheckbox : classes.formControlInput;\n\n  return (\n    <div className={classes.formControl}>\n      <label>{label}</label>\n      <input\n        {...input}\n        type={type}\n        className={classNames(inputTypeClass, { [classes.error]: touched && error })}\n      />\n\n\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"formControlTextarea\":\"FormControls_formControlTextarea__5AIlH\",\"formControlInput\":\"FormControls_formControlInput__gNBr0\",\"formControlCheckbox\":\"FormControls_formControlCheckbox__2ILOp\",\"error\":\"FormControls_error__24y5C\",\"errorMessage\":\"FormControls_errorMessage__NDl_o\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\nconst maxLength = (max: number) => {\n  return (value: string) => value && value.length > max ? `Max length is ${max} symbols` : undefined;\n}\n\n\n\nexport const maxLength300 = maxLength(300);\n\nexport const required = (value: string) => value ? undefined : 'Field is required';\n","import { RootStateType } from '../redux/reduxStore';\nimport { connect } from \"react-redux\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport React from 'react';\nimport { IsAuthType } from '../redux/authReducer';\n\n\nexport const WithAuthRedirect = <WCP,>(WrappedComponent: React.ComponentType<WCP>) => {\n\n  const AuthRedirectComponent: React.FC<PropsType> = ({isAuth, ...props}) => {\n\n    const location = useLocation();\n\n    if (isAuth === 'notAuthorized') {\n      return <Navigate to='/login' state={{ from: location.pathname }} />\n    };\n\n    return (\n      <WrappedComponent {...props as WCP} />\n    );\n  }\n\n\n  const mapStateToProps = (state: RootStateType) => {\n    return {\n      isAuth: state.auth.isAuth,\n    }\n  }\n\n  type MapStatePropsType = {\n    isAuth: IsAuthType;\n  }\n\n  type MapDispatchPropsType = {}\n\n  type PropsType = MapStatePropsType & MapDispatchPropsType;\n\n\n  return connect<MapStatePropsType, MapDispatchPropsType, WCP, RootStateType>(mapStateToProps)(AuthRedirectComponent);\n}","export default __webpack_public_path__ + \"static/media/user-icon.506e3070.jpeg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"avatar\":\"Post_avatar__1wBwP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"ProfileInfo_profileContent__uGti0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"ProfilePhoto_userPhoto__1yb8Q\"};","import { RootStateType } from \"./reduxStore\";\n\nexport const getUserProfile = (state: RootStateType) => state.profilePage.userProfile;\n\nexport const getUserStatus = (state: RootStateType) => state.profilePage.userStatus;\n\nexport const getPosts = (state: RootStateType) => state.profilePage.posts;\n\nexport const getInWaiting = (state: RootStateType) => state.profilePage.inWaiting;\n\nexport const getErrorMessages = (state: RootStateType) => state.profilePage.errorMessages;","import React from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { maxLength300, required } from '../../../../utils/validators/validators';\nimport { Textarea } from '../../../common/FormControls/FormControls';\nimport { NewPostMessageType } from '../MyPosts';\n\nconst AddNewPostForm: React.FC<InjectedFormProps<NewPostMessageType>> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        name='newPost'\n        component={Textarea}\n        placeholder='Enter your post'\n        validate={[required, maxLength300]}\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default reduxForm<NewPostMessageType>({ form: 'profileAddNewPostForm' })(AddNewPostForm);","import React from 'react';\nimport classes from './Post.module.css';\n\ntype PropsType = {\n  message: string;\n  likeCount: number;\n}\n\nconst Post: React.FC<PropsType> = ({ message, likeCount }) => {\n  return (\n    <li className={classes.item}>\n      <img className={classes.avatar} src='https://скачать-ватсап-бесплатно.рус/wp-content/uploads/2018/10/kartinka-na-avatar-dlya-devushki-9.jpg' />\n\n      {message}\n\n      <div>\n        <span>{likeCount}</span>\n        <button>Like</button>\n      </div>\n    </li>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport { FormAction } from 'redux-form';\nimport { PostType } from '../../../redux/profilePageReducer';\nimport { AddPostType } from '../Profile';\nimport AddNewPostForm from './AddNewPostForm/AddNewPostForm';\nimport Post from './Post/Post';\n\ntype PropsType = {\n  posts: Array<PostType>;\n  addPost: AddPostType;\n  resetForm: (form: string) => FormAction;\n}\n\nexport type NewPostMessageType = {\n  newPost: string;\n}\n\nconst MyPosts: React.FC<PropsType> = ({ posts, addPost, resetForm }) => {\n\n  const postsElements = posts\n    .map((item: PostType) => <Post key={item.id} message={item.message} likeCount={item.likesCount} />)\n\n\n  const addNewPost = (values: NewPostMessageType) => {\n    addPost(values.newPost);\n    resetForm('profileAddNewPostForm');\n  }\n\n \n\n  return (\n    <div>\n      <AddNewPostForm onSubmit={addNewPost} />\n      <ul>\n        {postsElements}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default React.memo(MyPosts);","import React from 'react';\nimport { ContactsType, UserProfileType } from '../../../../redux/profilePageReducer';\n\ntype PropsType = {\n  userProfile: UserProfileType | null;\n  activeEditMode: () => void;\n  isOwner: boolean;\n}\n\nconst ProfileData: React.FC<PropsType> = ({ userProfile, activeEditMode, isOwner }) => {\n  return (\n    userProfile &&\n    <>\n      <h2>{userProfile.fullName}</h2>\n      <p>About me: {userProfile.aboutMe}</p>\n      <p>Looking for a job: {userProfile.lookingForAJob ? 'Yes' : 'No'}</p>\n      {\n        userProfile.lookingForAJob &&\n        <p>My skills: {userProfile.lookingForAJobDescription}</p>\n      }\n      <h3>Contacts</h3>\n      <ul>\n        {\n          Object.keys(userProfile.contacts)\n            .map((item: string) => {\n              return <Contact key={item} contactName={item} contactValue={userProfile.contacts[item as keyof ContactsType]} />\n            })\n        }\n      </ul>\n      {\n        isOwner && <button onClick={activeEditMode}>Edit</button>\n      }\n    </>\n  );\n}\n\ntype ContactPropsType = {\n  contactName: string;\n  contactValue: string;\n}\n\nconst Contact: React.FC<ContactPropsType> = ({ contactName, contactValue }) => {\n  return (\n    <li>\n      {contactName}: {contactValue}\n    </li>\n  );\n}\n\nexport default ProfileData;","import React from 'react';\nimport { Field, InjectedFormProps } from 'redux-form';\nimport { Textarea, Input } from '../../../common/FormControls/FormControls';\nimport { reduxForm } from 'redux-form';\nimport { required } from '../../../../utils/validators/validators';\nimport { UserProfileType } from '../../../../redux/profilePageReducer';\n\ntype OwnPropsType = {\n  deactiveEditMode: () => void;\n  userProfile: UserProfileType;\n}\n\n\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfileType, OwnPropsType> & OwnPropsType> = ({ handleSubmit, deactiveEditMode, userProfile, error }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {\n        error && <div>{error}</div>\n      }\n      Full Name\n      <label>\n        <Field\n          name='fullName'\n          component={Input}\n          type='text'\n          validate={[required]}\n        />\n      </label>\n      <label>\n        About me\n        <Field\n          name='aboutMe'\n          component={Textarea}\n          type='text'\n          validate={[required]}\n        />\n      </label>\n      <label>\n        Looking for a job\n        <Field\n          name='lookingForAJob'\n          component={Input}\n          type='checkbox'\n        />\n      </label>\n      <label>\n        My skills\n        <Field\n          name='lookingForAJobDescription'\n          component={Textarea}\n          type='text'\n          validate={[required]}\n        />\n      </label>\n      <ul>\n        <label>Contacts</label>\n        {Object.keys(userProfile.contacts)\n          .map(item => {\n            return (\n              <li key={item}>\n                <label>\n                  {item}\n                  <Field\n                    name={`contacts.${item}`}\n                    component={Input}\n                    type='text'\n                  />\n                </label>\n              </li>\n            );\n          })}\n      </ul>\n      <button>Done</button>\n      <button onClick={deactiveEditMode}>Close</button>\n    </form>\n  );\n}\n\nexport default reduxForm<UserProfileType, OwnPropsType>({ form: 'profileDataForm' })(ProfileDataForm);","import React, { ChangeEvent } from 'react';\nimport userIcon from '../../../../assets/images/user-icon.jpeg'\nimport { UserProfileType } from '../../../../redux/profilePageReducer';\nimport Preloader from '../../../common/Preloader/Preloader';\nimport classes from './ProfilePhoto.module.css'\n\ntype PropsType = {\n  errorMessage: string | null;\n  userProfile: UserProfileType;\n  isOwner: boolean;\n  setPhoto: (photo: File) => void;\n  inWaiting: boolean;\n}\n\n\n\nconst ProfilePhoto: React.FC<PropsType> = ({ errorMessage, isOwner, setPhoto, inWaiting, userProfile }) => {\n\n  const onChooseFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setPhoto(e.target.files[0]);\n    }\n  }\n\n\n  return (\n    <>\n      {\n        errorMessage && <div>{errorMessage}</div>\n      }\n      {\n        inWaiting\n          ? <Preloader />\n          : <img src={userProfile.photos.large || userIcon} className={classes.userPhoto} alt=\"User photo\" />\n      }\n      {\n        isOwner && <input id='input-file' onChange={onChooseFile} type=\"file\" disabled={inWaiting} />\n      }\n    </>\n  );\n}\n\nexport default ProfilePhoto;","import React, { ChangeEvent } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { SetErrorType } from '../../Profile';\n\ntype PropsType = {\n  userStatus: string;\n  isOwner: boolean;\n  setUserStatus: (text: string) => void;\n  errorMessage: string | null;\n  setError: SetErrorType;\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = ({\n  userStatus,\n  isOwner,\n  setUserStatus,\n  errorMessage,\n  setError\n}) => {\n\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(userStatus);\n\n  useEffect(() => {\n    setStatus(userStatus);\n  }, [userStatus])\n\n  const activateEditMode = () => {\n    if (isOwner) {\n      setEditMode(true)\n    }\n  };\n\n  const deactivateEditMode = () => setEditMode(false);\n\n  const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n    if (errorMessage) {\n      setError(null, 'onSetStatusErrorMessage');\n    }\n    setStatus(e.target.value)\n  };\n\n  const onBlurStatus = () => {\n    deactivateEditMode();\n    setUserStatus(status)\n  }\n\n  return (\n    <div>\n      {\n        errorMessage && <div>{errorMessage}</div>\n      }\n      {\n        editMode\n          ? <input\n            autoFocus={true}\n            onBlur={onBlurStatus}\n            onChange={onChangeStatus}\n            type=\"text\"\n            value={status}\n          />\n          : <span onDoubleClick={activateEditMode}>{userStatus || '---'}</span>\n      }\n    </div>\n  )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport classes from './ProfileInfo.module.css'\n// import ProfileStatus from './ProfileStatus/ProfileStatus';\nimport { useState } from 'react';\nimport ProfileData from './ProfileData/ProfileData';\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\nimport ProfilePhoto from './ProfilePhoto/ProfilePhoto';\nimport { ErrorMessagesType, UserProfileType } from '../../../redux/profilePageReducer';\nimport { ProfileDataSaveError } from '../../../utils/errors/errors';\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\nimport { SetErrorType } from '../Profile';\n\ntype PropsType = {\n  userProfile: UserProfileType | null;\n  userStatus: string;\n  setStatus: (text: string) => void;\n  isOwner: boolean;\n  setPhoto: (photo: File) => void;\n  inWaiting: boolean;\n  setProfileData: (data: UserProfileType) => Promise<void>;\n  errorMessages: ErrorMessagesType;\n  setError: SetErrorType;\n}\n\n\nconst ProfileInfo: React.FC<PropsType> = ({\n  userProfile,\n  userStatus,\n  setStatus,\n  isOwner,\n  setPhoto,\n  inWaiting,\n  setProfileData,\n  errorMessages,\n  setError,\n}) => {\n\n  const [editMode, setEditMode] = useState(false);\n\n  const activeEditMode = () => {\n    setEditMode(true);\n  }\n\n  const deactiveEditMode = () => {\n    setEditMode(false);\n  }\n\n  const onSubmitForm = (values: UserProfileType) => {\n    setProfileData(values)\n      //remove.then\n      .then(() => setEditMode(false))\n      .catch((err) => {\n        if (err instanceof ProfileDataSaveError) {\n          throw err;\n        }\n      })\n  }\n\n  return (\n    <>\n      {\n        userProfile\n          ? <div>\n            <div className={classes.profileContent}>\n\n              <ProfilePhoto userProfile={userProfile} inWaiting={inWaiting} setPhoto={setPhoto} isOwner={isOwner} errorMessage={errorMessages.onSetPhotoErrorMessage} />\n\n              {\n                editMode\n                  ? <ProfileDataForm\n                    initialValues={userProfile}\n                    userProfile={userProfile}\n                    onSubmit={onSubmitForm}\n                    deactiveEditMode={deactiveEditMode}\n                  />\n                  : <ProfileData\n                    userProfile={userProfile}\n                    activeEditMode={activeEditMode}\n                    isOwner={isOwner}\n                  />\n              }\n              <ProfileStatus\n                userStatus={userStatus}\n                setUserStatus={setStatus}\n                isOwner={isOwner}\n                errorMessage={errorMessages.onSetStatusErrorMessage}\n                setError={setError}\n              />\n            </div>\n          </div>\n          : <Preloader />\n      }\n    </>\n  )\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport { FormAction } from 'redux-form';\nimport { ErrorMessagesType, PostType, UserProfileType } from '../../redux/profilePageReducer';\nimport MyPosts from './MyPosts/MyPosts';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nexport type SetErrorType = (errorText: string | null, errorName: string) => {\n  readonly type: \"social-network/profile/SET_ERROR\";\n  readonly errorText: string | null;\n  readonly errorName: string;\n};\n\nexport type AddPostType = (text: string) => { \n  readonly type: \"social-network/profile/ADD-POST\"; \n  readonly text: string; \n};\n\ntype PropsType = {\n  isOwner: boolean;\n  userProfile: UserProfileType | null;\n  userStatus: string;\n  setStatus: (text: string) => void;\n  posts: Array<PostType>;\n  reset: (form: string) => FormAction;\n  addPost: AddPostType;\n  setPhoto: (photo: File) => void;\n  inWaiting: boolean;\n  setProfileData: (data: UserProfileType) => Promise<void>;\n  errorMessages: ErrorMessagesType;\n  setError: SetErrorType;\n}\n\nconst Profile: React.FC<PropsType> = ({\n  isOwner,\n  userProfile,\n  userStatus,\n  setStatus,\n  posts,\n  reset,\n  addPost,\n  setPhoto,\n  inWaiting,\n  setProfileData,\n  errorMessages,\n  setError,\n}) => {\n\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={isOwner}\n        userProfile={userProfile}\n        userStatus={userStatus}\n        setStatus={setStatus}\n        setPhoto={setPhoto}\n        inWaiting={inWaiting}\n        setProfileData={setProfileData}\n        errorMessages={errorMessages}\n        setError={setError}\n      />\n      <MyPosts\n        posts={posts}\n        resetForm={reset}\n        addPost={addPost}\n      />\n    </div>\n  )\n}\n\nexport default Profile;","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { compose } from 'redux';\nimport { reset } from 'redux-form';\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { WithURLData } from '../../hoc/withUrlData';\nimport { getAuth } from '../../redux/authSelecrors';\nimport { actions, setProfileData, getProfile, getStatus, setPhoto, setStatus } from '../../redux/profilePageReducer';\nimport { getErrorMessages, getInWaiting, getPosts, getUserProfile, getUserStatus } from '../../redux/profileSelecrors';\nimport { RootStateType } from '../../redux/reduxStore';\nimport Profile from './Profile';\n\ntype ProfileContainerPropsType = ConnectedProps<typeof connector> & OwnPropsType;\ntype OwnPropsType = {\n  userId: number | null;\n};\n\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n  // @ts-ignore\n  isOwner: boolean;\n\n  getCurrentUserData() {\n    let userId = this.props.userId;\n\n    if (!userId) {\n      const { isAuth, id } = this.props.auth;\n      if (isAuth === 'authorized') {\n        userId = id;\n      } \n      this.isOwner = userId === id;\n    }\n    \n    if (typeof userId === 'number') {\n      this.props.getProfile(userId);\n      this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.getCurrentUserData();\n  }\n\n  componentDidUpdate(prevProps: ProfileContainerPropsType) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getCurrentUserData();\n    }\n  }\n\n\n  render() {\n    return ( \n      <Profile {...this.props} isOwner={this.isOwner} />\n    )\n  }\n}\n\nconst mapStateToProps = (state: RootStateType) => {\n  return {\n    userProfile: getUserProfile(state),\n    userStatus: getUserStatus(state),\n    auth: getAuth(state),\n    posts: getPosts(state),\n    inWaiting: getInWaiting(state),\n    errorMessages: getErrorMessages(state),\n  }\n};\n\nconst connector = connect(\n  mapStateToProps, \n  { \n    getProfile, \n    getStatus, \n    setStatus, \n    reset, \n    addPost: actions.addPost, \n    setPhoto, \n    setProfileData, \n    setError: actions.setError,\n  });\n\n\n// Обязательно типизируем возврощаемое значение функции compose, для того, что бы React.lazy в App.tsx понял, что это значение является функциональным компонентом\nexport default compose<React.ComponentType>(\n  connector,\n  WithURLData,  \n  WithAuthRedirect,\n)(ProfileContainer);","import { useParams } from \"react-router-dom\"\nimport React from 'react';\n\n\nexport const WithURLData = <WCP extends {userId: number}>(WrappedComponent: React.ComponentType<WCP>) => {\n\n  const URLDataComponent: React.FC<Omit<WCP, 'userId'>> = (props) => {\n    \n    let userId: number | null = null;\n\n    // Использование данного хука приводит к перерисовке URLDataComponent!!!\n    // Из за этого перерисовываются вложенные компоненты!!!\n    let {id} = useParams();\n    if (id) {\n      userId = +id;\n    }\n\n    // let a = useParams().userId;\n    // let userId = 21727;\n\n    return (\n      <WrappedComponent {...props as WCP} userID={userId} />\n    )\n  }\n\n  return URLDataComponent;\n}"],"sourceRoot":""}