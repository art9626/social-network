{"version":3,"sources":["../node_modules/redux-form/es/index.js","components/common/FormControls/FormControls.jsx","components/common/FormControls/FormControls.module.css","hoc/withAuthRedirect.js","utils/validators/validators.js","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["reset","actions","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","Textarea","input","meta","touched","error","props","className","classes","formControl","formControlTextarea","errorMessage","Input","type","label","inputTypeClass","formControlCheckbox","formControlInput","module","exports","WithAuthRedirect","Component","connect","state","isAuth","auth","userId","to","max","maxLength300","value","length","undefined","required","DialogItem","item","id","name","Message","classFrom","message","from","classTo","status","text","reduxForm","form","handleSubmit","onSubmit","Field","component","placeholder","validate","Dialogs","sendMessage","dialogs","messages","resetForm","dialogsElements","map","messagesElements","list","messagesContainer","values","newMessage","compose","dialogsPage","dispatch","sendMessageAC","formName"],"mappings":"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","file":"static/js/4.82f3405a.chunk.js","sourcesContent":["import actions from './actions';\nexport { default as actionTypes } from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import React from 'react';\nimport classes from './FormControls.module.css'\n\n\nexport const Textarea = ({ input, meta: { touched, error }, ...props }) => {\n  return (\n    <div className={classes.formControl}>\n      <textarea\n        {...input}\n        {...props}\n        className={touched && error ? `${classes.error} ${classes.formControlTextarea}` : classes.formControlTextarea}>\n      </textarea>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}\n\nexport const Input = ({ input, meta: { touched, error }, type, label }) => {\n  const inputTypeClass = type === 'checkbox' ? classes.formControlCheckbox : classes.formControlInput;\n\n  return (\n    <div className={classes.formControl}>\n      <label>{label}</label>\n      <input\n        type={type}\n        {...input}\n        className={touched && error ? `${classes.error} ${inputTypeClass}` : inputTypeClass}>\n      </input>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"formControlTextarea\":\"FormControls_formControlTextarea__5AIlH\",\"formControlInput\":\"FormControls_formControlInput__gNBr0\",\"formControlCheckbox\":\"FormControls_formControlCheckbox__2ILOp\",\"error\":\"FormControls_error__24y5C\",\"errorMessage\":\"FormControls_errorMessage__NDl_o\"};","import { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nexport const WithAuthRedirect = (Component) => {\n  \n  const AuthRedirectComponent = (props) => {\n\n    if (props.isAuth === 'notAuthorized' && !props.userId) {\n      return <Navigate to='/login' />\n    };\n\n    return <Component {...props} />;\n  }\n\n\n  const mapStateToProps = (state) => {\n    return {\n      isAuth: state.auth.isAuth,\n    }\n  }\n\n\n  return connect(mapStateToProps)(AuthRedirectComponent);;\n}\n\n\n","\nconst maxLength = (max) => {\n  return (value) => value && value.length > max ? `Max length is ${max} symbols` : undefined;\n}\n\n\n\nexport const maxLength300 = maxLength(300);\n\nexport const required = (value) => value ? undefined : 'Field is required';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\",\"from\":\"Message_from__215MN\",\"to\":\"Message_to__3TBUh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messagesContainer\":\"Dialogs_messagesContainer__eYApo\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './DialogsItem.module.css'\n\n\nconst DialogItem = props => {\n  return (\n    <li className={classes.item}>\n      <NavLink to={`/dialogs/${props.id}`}>\n        {props.name}\n      </NavLink>\n    </li>\n  );\n}\n\nexport default DialogItem;","import React from 'react';\nimport classes from './Message.module.css'\n\n\nconst Message = props => {\n  const classFrom = `${classes.message} ${classes.from}`;\n  const classTo = `${classes.message} ${classes.to}`;\n\n\n  return (\n    <div className={props.status === 'from' ? classFrom : classTo} >\n      {props.text}\n    </div>\n  )\n}\n\nexport default Message;","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { required } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormControls/FormControls';\n\nconst AddMessageForm = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        name='newMessage'\n        component={Textarea}\n        placeholder='Enter your message'\n        validate={[required]}\n      />\n      <button>Send</button>\n    </form>\n  )\n};\n\nexport default reduxForm({ form: 'dialogsAddMessageForm' })(AddMessageForm);","import React from 'react';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Message/Message';\nimport classes from './Dialogs.module.css';\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\n\nconst Dialogs = ({ sendMessage, dialogs, messages, resetForm }) => {\n\n  const dialogsElements = dialogs\n    .map(item => <DialogItem key={item.id} name={item.name} id={item.id} />)\n  const messagesElements = messages\n    .map(item => <Message key={item.id} text={item.message} status={item.status} />)\n\n\n  const addNewMessage = (values) => {\n    sendMessage(values.newMessage)\n    resetForm('dialogsAddMessageForm')\n  }\n\n  return (\n    <div className={classes.dialogs}>\n      <ul className={classes.list}>\n        {dialogsElements}\n      </ul>\n\n      <div className={classes.messagesContainer}>\n        {messagesElements}\n\n        <AddMessageForm onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dialogs;","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { reset } from 'redux-form';\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { sendMessageAC } from '../../redux/dialogsPageReducer';\nimport Dialogs from './Dialogs';\n\n\nconst mapStateToProps = state => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (text) => dispatch(sendMessageAC(text)),\n    resetForm: (formName) => dispatch(reset(formName)),\n  }\n}\n\n// const AuthRedirectComponent= WithAuthRedirect(Dialogs);\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n// export default DialogsContainer;\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  WithAuthRedirect\n)(Dialogs);\n\n"],"sourceRoot":""}