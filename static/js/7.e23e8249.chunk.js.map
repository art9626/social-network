{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"names":["Textarea","input","meta","touched","error","placeholder","className","classes","formControl","formControlTextarea","errorMessage","Input","type","label","inputTypeClass","formControlCheckbox","formControlInput","classNames","module","exports","reduxForm","form","handleSubmit","captchaUrl","onSubmit","Field","name","component","src","alt","connector","connect","state","isAuth","getIsAuth","getCaptchaUrl","loginUser","fromPage","useLocation","from","to","formData"],"mappings":"gPAOaA,EAAwC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAmD,IAA5CC,KAAQC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAASC,EAAkB,EAAlBA,YACvF,OACE,sBAAKC,UAAWC,IAAQC,YAAxB,UACE,oDACMP,GADN,IAEEI,YAAaA,EACbC,UAAWH,GAAWC,EAAX,UAAsBG,IAAQH,MAA9B,YAAuCG,IAAQE,qBAAwBF,IAAQE,uBAE3FN,GAAYC,GAAS,uBAAME,UAAWC,IAAQG,aAAzB,cAAyCN,EAAzC,WAOfO,EAAmC,SAAC,GAAsD,IAApDV,EAAmD,EAAnDA,MAAmD,IAA5CC,KAAQC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAASQ,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAClFC,EAA0B,aAATF,EAAsBL,IAAQQ,oBAAsBR,IAAQS,iBAEnF,OACE,sBAAKV,UAAWC,IAAQC,YAAxB,UACE,gCAAQK,IACR,iDACMZ,GADN,IAEEW,KAAMA,EACNN,UAAWW,IAAWH,EAAD,eAAoBP,IAAQH,MAAQD,GAAWC,OAIrED,GAAYC,GAAS,uBAAME,UAAWC,IAAQG,aAAzB,cAAyCN,EAAzC,Y,oBClC5Bc,EAAOC,QAAU,CAAC,YAAc,kCAAkC,oBAAsB,0CAA0C,iBAAmB,uCAAuC,oBAAsB,0CAA0C,MAAQ,4BAA4B,aAAe,qC,kHC2DhSC,cAA2C,CAAEC,KAAM,SAAnDD,EAnDgF,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAclB,EAAwB,EAAxBA,MAAOmB,EAAiB,EAAjBA,WACrH,OACE,uBAAMC,SAAUF,EAAhB,UAEE,cAACG,EAAA,EAAD,CACEC,KAAK,QACLC,UAAWhB,IACXC,KAAK,OACLC,MAAM,UAIR,cAACY,EAAA,EAAD,CACEC,KAAK,WACLC,UAAWhB,IACXC,KAAK,WACLC,MAAM,aAIR,cAACY,EAAA,EAAD,CACEC,KAAK,aACLC,UAAWhB,IACXC,KAAK,WACLC,MAAM,gBAINU,GACA,gCACE,qBAAKK,IAAKL,EAAYM,IAAI,KAC1B,cAACJ,EAAA,EAAD,CACEC,KAAK,UACLC,UAAWhB,IACXC,KAAK,OACLC,MAAM,6CAMVT,GAAS,8BAAMA,IAGjB,iDCZA0B,EAAYC,aAPM,SAACC,GACvB,MAAO,CACLC,OAAQC,YAAUF,GAClBT,WAAYY,YAAcH,MAIa,CAAEI,gBAE9BN,aAjCoB,SAAC,GAAuC,IAArCG,EAAoC,EAApCA,OAAQG,EAA4B,EAA5BA,UAAWb,EAAiB,EAAjBA,WAIjDc,EAFQC,cAAcN,MAELO,MAAQ,WAO/B,MAAe,eAAXN,EAAgC,cAAC,IAAD,CAAUO,GAAIH,IAIhD,qCACE,uCACA,cAAC,EAAD,CAAWb,SAXE,SAACiB,GAChBL,EAAUK,IAUuBlB,WAAYA","file":"static/js/7.e23e8249.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './FormControls.module.css'\nimport classNames from 'classnames';\nimport { WrappedFieldProps } from 'redux-form';\n\ntype TextareaPropsType = WrappedFieldProps & {placeholder: string}\n\nexport const Textarea: React.FC<TextareaPropsType> = ({ input, meta: { touched, error }, placeholder }) => {\n  return (\n    <div className={classes.formControl}>\n      <textarea\n        {...input}\n        placeholder={placeholder}\n        className={touched && error ? `${classes.error} ${classes.formControlTextarea}` : classes.formControlTextarea}>\n      </textarea>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}\n\ntype InputPropsType = WrappedFieldProps & {type: string, label: string}\n\nexport const Input:  React.FC<InputPropsType> = ({ input, meta: { touched, error }, type, label }) => {\n  const inputTypeClass = type === 'checkbox' ? classes.formControlCheckbox : classes.formControlInput;\n\n  return (\n    <div className={classes.formControl}>\n      <label>{label}</label>\n      <input\n        {...input}\n        type={type}\n        className={classNames(inputTypeClass, { [classes.error]: touched && error })}\n      />\n\n\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"formControlTextarea\":\"FormControls_formControlTextarea__5AIlH\",\"formControlInput\":\"FormControls_formControlInput__gNBr0\",\"formControlCheckbox\":\"FormControls_formControlCheckbox__2ILOp\",\"error\":\"FormControls_error__24y5C\",\"errorMessage\":\"FormControls_errorMessage__NDl_o\"};","import React from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { LoginFormDataType } from '../../../redux/authReducer';\nimport { Input } from '../../common/FormControls/FormControls';\n\nexport type OwnPropsType = {\n  captchaUrl: string | null;\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, OwnPropsType> & OwnPropsType> = ({ handleSubmit, error, captchaUrl }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n\n      <Field\n        name='email'\n        component={Input}\n        type='text'\n        label='Email'\n      />\n\n\n      <Field\n        name='password'\n        component={Input}\n        type='password'\n        label='Password'\n      />\n\n\n      <Field\n        name='rememberMe'\n        component={Input}\n        type='checkbox'\n        label='Remember me'\n      />\n\n      {\n        captchaUrl &&\n        <div>\n          <img src={captchaUrl} alt=\"\" />\n          <Field\n            name='captcha'\n            component={Input}\n            type='text'\n            label='Enter the characters from the picture'\n          />\n        </div>\n      }\n\n      {\n        error && <div>{error}</div>\n      }\n\n      <button>Login</button>\n    </form>\n  )\n}\n\n\n\nexport default reduxForm<LoginFormDataType, OwnPropsType>({ form: 'login' })(LoginForm);","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { LoginFormDataType, loginUser } from '../../redux/authReducer';\nimport { getCaptchaUrl, getIsAuth } from '../../redux/authSelecrors';\nimport { RootStateType } from '../../redux/reduxStore';\nimport LoginForm from './LoginForm/LoginForm';\n\ntype PropsType = ConnectedProps<typeof connector>;\n\nconst Login: React.FC<PropsType> = ({ isAuth, loginUser, captchaUrl }) => {\n\n  const state = useLocation().state as { from: string };\n\n  const fromPage = state.from || '/profile';\n\n  const onSubmit = (formData: LoginFormDataType) => {\n    loginUser(formData);\n  };\n\n\n  if (isAuth === 'authorized') return <Navigate to={fromPage} />;\n\n\n  return (\n    <>\n      <h1>Login</h1>\n      <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n    </>\n  )\n}\n\n\n\nconst mapStateToProps = (state: RootStateType) => {\n  return {\n    isAuth: getIsAuth(state),\n    captchaUrl: getCaptchaUrl(state),\n  };\n}\n\nconst connector = connect(mapStateToProps, { loginUser });\n\nexport default connector(Login);"],"sourceRoot":""}