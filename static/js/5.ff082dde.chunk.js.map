{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","redux/dialogsPageSelectors.ts","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["Textarea","input","meta","touched","error","placeholder","className","classes","formControl","formControlTextarea","errorMessage","Input","type","label","inputTypeClass","formControlCheckbox","formControlInput","classNames","module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","max","maxLength300","value","undefined","required","WithAuthRedirect","WrappedComponent","connect","state","isAuth","auth","props","location","useLocation","to","from","pathname","getDialogs","dialogsPage","dialogs","getMessages","messages","DialogItem","id","name","item","Message","status","text","classFrom","message","classTo","reduxForm","form","handleSubmit","onSubmit","Field","component","validate","Dialogs","sendMessage","resetForm","dialogsElements","map","messagesElements","list","messagesContainer","values","newMessage","connector","actions","reset","compose"],"mappings":"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","file":"static/js/5.ff082dde.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './FormControls.module.css'\nimport classNames from 'classnames';\nimport { WrappedFieldProps } from 'redux-form';\n\ntype TextareaPropsType = WrappedFieldProps & {placeholder: string}\n\nexport const Textarea: React.FC<TextareaPropsType> = ({ input, meta: { touched, error }, placeholder }) => {\n  return (\n    <div className={classes.formControl}>\n      <textarea\n        {...input}\n        placeholder={placeholder}\n        className={touched && error ? `${classes.error} ${classes.formControlTextarea}` : classes.formControlTextarea}>\n      </textarea>\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}\n\ntype InputPropsType = WrappedFieldProps & {type: string, label: string}\n\nexport const Input:  React.FC<InputPropsType> = ({ input, meta: { touched, error }, type, label }) => {\n  const inputTypeClass = type === 'checkbox' ? classes.formControlCheckbox : classes.formControlInput;\n\n  return (\n    <div className={classes.formControl}>\n      <label>{label}</label>\n      <input\n        {...input}\n        type={type}\n        className={classNames(inputTypeClass, { [classes.error]: touched && error })}\n      />\n\n\n      {touched && (error && <span className={classes.errorMessage}> {error} </span>)}\n    </div>\n  );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"formControlTextarea\":\"FormControls_formControlTextarea__5AIlH\",\"formControlInput\":\"FormControls_formControlInput__gNBr0\",\"formControlCheckbox\":\"FormControls_formControlCheckbox__2ILOp\",\"error\":\"FormControls_error__24y5C\",\"errorMessage\":\"FormControls_errorMessage__NDl_o\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\nconst maxLength = (max: number) => {\n  return (value: string) => value && value.length > max ? `Max length is ${max} symbols` : undefined;\n}\n\n\n\nexport const maxLength300 = maxLength(300);\n\nexport const required = (value: string) => value ? undefined : 'Field is required';\n","import { RootStateType } from '../redux/reduxStore';\nimport { connect } from \"react-redux\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport React from 'react';\nimport { IsAuthType } from '../redux/authReducer';\n\n\nexport const WithAuthRedirect = <WCP,>(WrappedComponent: React.ComponentType<WCP>) => {\n\n  const AuthRedirectComponent: React.FC<PropsType> = ({isAuth, ...props}) => {\n\n    const location = useLocation();\n\n    if (isAuth === 'notAuthorized') {\n      return <Navigate to='/login' state={{ from: location.pathname }} />\n    };\n\n    return (\n      <WrappedComponent {...props as WCP} />\n    );\n  }\n\n\n  const mapStateToProps = (state: RootStateType) => {\n    return {\n      isAuth: state.auth.isAuth,\n    }\n  }\n\n  type MapStatePropsType = {\n    isAuth: IsAuthType;\n  }\n\n  type MapDispatchPropsType = {}\n\n  type PropsType = MapStatePropsType & MapDispatchPropsType;\n\n\n  return connect<MapStatePropsType, MapDispatchPropsType, WCP, RootStateType>(mapStateToProps)(AuthRedirectComponent);\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\",\"from\":\"Message_from__215MN\",\"to\":\"Message_to__3TBUh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messagesContainer\":\"Dialogs_messagesContainer__eYApo\"};","import { RootStateType } from './reduxStore';\n\nexport const getDialogs = (state: RootStateType) => state.dialogsPage.dialogs;\n\nexport const getMessages = (state: RootStateType) => state.dialogsPage.messages;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './DialogsItem.module.css'\n\ntype PropsType = {\n  id: number;\n  name: string;\n}\n\nconst DialogItem: React.FC<PropsType> = ({ id, name }) => {\n  return (\n    <li className={classes.item}>\n      <NavLink to={`/dialogs/${id}`}>\n        {name}\n      </NavLink>\n    </li>\n  );\n}\n\nexport default DialogItem;","import React from 'react';\nimport classes from './Message.module.css'\n\ntype PropsType = {\n  status: string;\n  text: string;\n}\n\nconst Message: React.FC<PropsType> = ({ status, text }) => {\n  const classFrom = `${classes.message} ${classes.from}`;\n  const classTo = `${classes.message} ${classes.to}`;\n\n\n  return (\n    <div className={status === 'from' ? classFrom : classTo} >\n      {text}\n    </div>\n  )\n}\n\nexport default Message;","import React from 'react';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { required } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormControls/FormControls';\nimport { AddMessageFormDataType } from '../Dialogs';\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        name='newMessage'\n        component={Textarea}\n        placeholder='Enter your message'\n        validate={[required]}\n      />\n      <button>Send</button>\n    </form>\n  )\n};\n\nexport default reduxForm<AddMessageFormDataType>({ form: 'dialogsAddMessageForm' })(AddMessageForm);","import React from 'react';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Message/Message';\nimport classes from './Dialogs.module.css';\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\nimport { DialogsPropsType } from './DialogsContainer';\n\nexport type AddMessageFormDataType = {\n  newMessage: string;\n}\n\nconst Dialogs: React.FC<DialogsPropsType> = ({ sendMessage, dialogs, messages, resetForm }) => {\n\n  const dialogsElements = dialogs\n    .map(item => <DialogItem key={item.id} name={item.name} id={item.id} />)\n  const messagesElements = messages\n    .map(item => <Message key={item.id} text={item.message} status={item.status} />)\n\n\n  const addNewMessage = (values: AddMessageFormDataType) => {\n    sendMessage(values.newMessage);\n    resetForm('dialogsAddMessageForm');\n  }\n\n  return (\n    <div className={classes.dialogs}>\n      <ul className={classes.list}>\n        {dialogsElements}\n      </ul>\n\n      <div className={classes.messagesContainer}>\n        {messagesElements}\n        <AddMessageForm onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dialogs;","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { compose } from 'redux';\nimport { reset } from 'redux-form';\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { actions } from '../../redux/dialogsPageReducer';\nimport { getDialogs, getMessages } from '../../redux/dialogsPageSelectors';\n\nimport { RootStateType } from '../../redux/reduxStore';\nimport Dialogs from './Dialogs';\n\nexport type DialogsPropsType = ConnectedProps<typeof connector>;\n\n\nconst mapStateToProps = (state: RootStateType) => {\n  return {\n    dialogs: getDialogs(state),\n    messages: getMessages(state),\n  }\n}\n\n\nconst connector = connect(mapStateToProps, { sendMessage: actions.sendMessage, resetForm: reset });\n\n// Обязательно типизируем возврощаемое значение функции compose, для того, что бы React.lazy в App.tsx понял, что это значение является функциональным компонентом\nexport default compose<React.FunctionComponent>(\n  connector,\n  WithAuthRedirect\n)(Dialogs);\n\n\n"],"sourceRoot":""}